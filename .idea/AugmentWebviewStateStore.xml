<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AugmentWebviewStateStore">
    <option name="stateMap">
      <map>
        <entry key="CHAT_STATE" value="eyJjdXJyZW50Q29udmVyc2F0aW9uSWQiOiJkZDViMTA0OS0zOTYzLTQ3MmUtOWE5NS0wMmM4NzMzYzgzN2UiLCJjb252ZXJzYXRpb25zIjp7ImMwYmUyMDcwLTI5ODQtNGNlYS1hMTFkLWI3YTEzYTQ1MmNjZCI6eyJpZCI6ImMwYmUyMDcwLTI5ODQtNGNlYS1hMTFkLWI3YTEzYTQ1MmNjZCIsImNyZWF0ZWRBdElzbyI6IjIwMjUtMDUtMDhUMTA6NTk6MDkuMDY0WiIsImxhc3RJbnRlcmFjdGVkQXRJc28iOiIyMDI1LTA1LTA4VDEwOjU5OjA5LjA2NFoiLCJjaGF0SGlzdG9yeSI6W10sImZlZWRiYWNrU3RhdGVzIjp7fSwidG9vbFVzZVN0YXRlcyI6e30sImRyYWZ0RXhjaGFuZ2UiOnsicmVxdWVzdF9tZXNzYWdlIjoiIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCJ9XX0sInN0YXR1cyI6ImRyYWZ0In0sInJlcXVlc3RJZHMiOltdLCJpc1Bpbm5lZCI6ZmFsc2UsImlzU2hhcmVhYmxlIjpmYWxzZSwiZXh0cmFEYXRhIjp7Imhhc0RpcnR5RWRpdHMiOmZhbHNlfSwicGVyc29uYVR5cGUiOjB9LCI5NWZlYjIyNS1jNWIwLTQ1YjQtOTU0MC1lZjgyMTk0MmJlMDkiOnsiaWQiOiI5NWZlYjIyNS1jNWIwLTQ1YjQtOTU0MC1lZjgyMTk0MmJlMDkiLCJjcmVhdGVkQXRJc28iOiIyMDI1LTA1LTA4VDEwOjU5OjA5LjMwNFoiLCJsYXN0SW50ZXJhY3RlZEF0SXNvIjoiMjAyNS0wNS0wOFQxMDo1OTowOS4zMDRaIiwiY2hhdEhpc3RvcnkiOltdLCJmZWVkYmFja1N0YXRlcyI6e30sInRvb2xVc2VTdGF0ZXMiOnt9LCJkcmFmdEV4Y2hhbmdlIjp7InJlcXVlc3RfbWVzc2FnZSI6IiIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgifV19LCJzdGF0dXMiOiJkcmFmdCJ9LCJyZXF1ZXN0SWRzIjpbXSwiaXNQaW5uZWQiOmZhbHNlLCJpc1NoYXJlYWJsZSI6ZmFsc2UsImV4dHJhRGF0YSI6eyJoYXNEaXJ0eUVkaXRzIjpmYWxzZX0sInBlcnNvbmFUeXBlIjowfSwiNjZkN2U5OTEtZTM3NC00Njk2LWIyZGEtODU5MjA3ZjYxZGI3Ijp7ImlkIjoiNjZkN2U5OTEtZTM3NC00Njk2LWIyZGEtODU5MjA3ZjYxZGI3IiwibmFtZSI6IldlbGNvbWUgdG8gdGhlIEF1Z21lbnQgQWdlbnQiLCJjcmVhdGVkQXRJc28iOiIyMDI1LTA1LTA4VDEwOjU5OjExLjk0NFoiLCJsYXN0SW50ZXJhY3RlZEF0SXNvIjoiMjAyNS0wNS0wOFQxMToyMjo0NC43MzhaIiwiY2hhdEhpc3RvcnkiOlt7InJlcXVlc3RfaWQiOiIyOTRlYWM5MC1kN2FlLTQzM2UtODQzNS1hMzgwODk4NzFmZWIiLCJ1dWlkIjoiOGNhM2JiZWQtNGI0Mi00NDZjLTg0MzQtMmRkZDI5MmRkMDZiIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy1jaGVja3BvaW50LWRlbGltaXRlciIsInN0YXR1cyI6InN1Y2Nlc3MiLCJmcm9tVGltZXN0YW1wIjowLCJ0b1RpbWVzdGFtcCI6MTc0NjcwMTk1MTk0NSwic2Vlbl9zdGF0ZSI6InNlZW4ifSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiZjJkNTk2NGItZDhjNi00NjJiLTljZDItOWRiYmYzMGE5OGJmIiwicmVxdWVzdF9tZXNzYWdlIjoid2hhdCBjYW4geW91IHRlbGwgbWUgYWJvdXQgdGhpcyBwcm9qZWN0IiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IndoYXQgY2FuIHlvdSB0ZWxsIG1lIGFib3V0IHRoaXMgcHJvamVjdCJ9XX1dfSwibWVudGlvbmVkX2l0ZW1zIjpbXSwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxQkh3azZaSm9MVWJpbldidHNIQkZFVyIsInRvb2xfbmFtZSI6ImNvZGViYXNlLXJldHJpZXZhbCIsImlucHV0X2pzb24iOiJ7XCJpbmZvcm1hdGlvbl9yZXF1ZXN0XCI6IFwiRmluZCB0aGUgbWFpbiBSRUFETUUubWQgZmlsZSBvciBhbnkgaGlnaC1sZXZlbCBkb2N1bWVudGF0aW9uIHRoYXQgZGVzY3JpYmVzIHRoZSBwcm9qZWN0XCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSSdsbCBoZWxwIHlvdSB1bmRlcnN0YW5kIHRoaXMgcHJvamVjdC4gTGV0IG1lIGdhdGhlciBzb21lIGluZm9ybWF0aW9uIGFib3V0IGl0IGZpcnN0LlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiJ3aGF0IGNhbiB5b3UgdGVsbCBtZSBhYm91dCB0aGlzIHByb2plY3QifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJDOi9Vc2Vycy9Ucm9uL0RvY3VtZW50cy9HaXRIdWIvZmFzdGFwaSIsImZvbGRlclJvb3QiOiJDOi9Vc2Vycy9Ucm9uL0RvY3VtZW50cy9HaXRIdWIvZmFzdGFwaSJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMDhUMTA6NTk6MjUuNTU0WiIsInJlc3BvbnNlX3RleHQiOiJJJ2xsIGhlbHAgeW91IHVuZGVyc3RhbmQgdGhpcyBwcm9qZWN0LiBMZXQgbWUgZ2F0aGVyIHNvbWUgaW5mb3JtYXRpb24gYWJvdXQgaXQgZmlyc3QuXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiNjhlODRhODQtMDdiNS00ZDNlLTgzZTQtZDJiZWU4YzliZDc4IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxUlhDUUxVc1FvWG9QWUFSU2EyaXByRiIsInRvb2xfbmFtZSI6ImNvZGViYXNlLXJldHJpZXZhbCIsImlucHV0X2pzb24iOiJ7XCJpbmZvcm1hdGlvbl9yZXF1ZXN0XCI6IFwiRmluZCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcHJvamVjdCBzdHJ1Y3R1cmUsIGFueSB0ZXN0cywgYW5kIGhvdyB0byBydW4gdGhlIGFwcGxpY2F0aW9uXCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTGV0IG1lIGdhdGhlciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBwcm9qZWN0IHN0cnVjdHVyZSBhbmQgYW55IGFkZGl0aW9uYWwga2V5IGZpbGVzLlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogUkVBRE1FLm1kXG4jIERlcGxveSBGYXN0QVBJIG9uIFJlbmRlclxuXG5Vc2UgdGhpcyByZXBvIGFzIGEgdGVtcGxhdGUgdG8gZGVwbG95IGEgUHl0aG9uIFtGYXN0QVBJXShodHRwczovL2Zhc3RhcGkudGlhbmdvbG8uY29tKSBzZXJ2aWNlIG9uIFJlbmRlci5cblxuU2VlIGh0dHBzOi8vcmVuZGVyLmNvbS9kb2NzL2RlcGxveS1mYXN0YXBpIG9yIGZvbGxvdyB0aGUgc3RlcHMgYmVsb3c6XG5cbiMjIE1hbnVhbCBTdGVwc1xuXG4xLiBZb3UgbWF5IHVzZSB0aGlzIHJlcG9zaXRvcnkgZGlyZWN0bHkgb3IgW2NyZWF0ZSB5b3VyIG93biByZXBvc2l0b3J5IGZyb20gdGhpcyB0ZW1wbGF0ZV0oaHR0cHM6Ly9naXRodWIuY29tL3JlbmRlci1leGFtcGxlcy9mYXN0YXBpL2dlbmVyYXRlKSBpZiB5b3UnZCBsaWtlIHRvIGN1c3RvbWl6ZSB0aGUgY29kZS5cbjIuIENyZWF0ZSBhIG5ldyBXZWIgU2VydmljZSBvbiBSZW5kZXIuXG4zLiBTcGVjaWZ5IHRoZSBVUkwgdG8geW91ciBuZXcgcmVwb3NpdG9yeSBvciB0aGlzIHJlcG9zaXRvcnkuXG40LiBSZW5kZXIgd2lsbCBhdXRvbWF0aWNhbGx5IGRldGVjdCB0aGF0IHlvdSBhcmUgZGVwbG95aW5nIGEgUHl0aG9uIHNlcnZpY2UgYW5kIHVzZSBgcGlwYCB0byBkb3dubG9hZCB0aGUgZGVwZW5kZW5jaWVzLlxuNS4gU3BlY2lmeSB0aGUgZm9sbG93aW5nIGFzIHRoZSBTdGFydCBDb21tYW5kLlxuXG4gICAgYGBgc2hlbGxcbiAgICB1dmljb3JuIG1haW46YXBwIC0taG9zdCAwLjAuMC4wIC0tcG9ydCAkUE9SVFxuICAgIGBgYFxuXG42LiBDbGljayBDcmVhdGUgV2ViIFNlcnZpY2UuXG5cbk9yIHNpbXBseSBjbGljazpcblxuWyFbRGVwbG95IHRvIFJlbmRlcl0oaHR0cHM6Ly9yZW5kZXIuY29tL2ltYWdlcy9kZXBsb3ktdG8tcmVuZGVyLWJ1dHRvbi5zdmcpXShodHRwczovL3JlbmRlci5jb20vZGVwbG95P3JlcG89aHR0cHM6Ly9naXRodWIuY29tL3JlbmRlci1leGFtcGxlcy9mYXN0YXBpKVxuXG4jIyBUaGFua3NcblxuVGhhbmtzIHRvIFtIYXJpc2hdKGh0dHBzOi8vaGFyaXNoZ2FyZy5jb20pIGZvciB0aGUgW2luc3BpcmF0aW9uIHRvIGNyZWF0ZSBhIEZhc3RBUEkgcXVpY2tzdGFydCBmb3IgUmVuZGVyXShodHRwczovL3R3aXR0ZXIuY29tL2hhcmlzaGtnYXJnL3N0YXR1cy8xNDM1MDg0MDE4Njc3MDEwNDM0KSBhbmQgZm9yIHNvbWUgc2FtcGxlIGNvZGUhLi4uXG5QYXRoOiBtYWluLnB5XG4jIEZpbGU6IG1haW4ucHlcbmZyb20gZmFzdGFwaSBpbXBvcnQgRmFzdEFQSVxuXG5mcm9tIHV0aWxzIGltcG9ydCBCQ29sb3JzICMgSW1wb3J0IGZyb20gbmV3IHV0aWxzXG5mcm9tIGNvbmZpZyBpbXBvcnQgT1BFTkFJX0FQSV9LRVlfU0VUICMgSW1wb3J0IGZyb20gbmV3IGNvbmZpZ1xuZnJvbSByb3V0ZXJzIGltcG9ydCBhZ2VudF9yb3V0ZXIgIyBJbXBvcnQgdGhlIG5ldyByb3V0ZXJcbiMgVGhlIGdsb2JhbCBhZ2VudHNfZGIgaXMgbm93IGluIHJvdXRlcnMuYWdlbnRfcm91dGVyXG5cbmFwcCA9IEZhc3RBUEkodGl0bGU9XCJBdXRvbm9tb3VzIEdlbmVyYXRpdmUtQWdlbnQgQVBJIHYyXCIpICMgVXBkYXRlZCB0aXRsZVxuXG5wcmludChmXCJ7QkNvbG9ycy5PS0dSRUVOfURFQlVHOiBGYXN0QVBJIGFwcGxpY2F0aW9uIHN0YXJ0aW5nIHVwLi4uIChVc2luZyBBdXRvbm9tb3VzIEFnZW50cyAtIFJlZmFjdG9yZWQpe0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcblxuIyAtLS0gQVBJIEtleSBDaGVjayAtLS1cbmlmIG5vdCBPUEVOQUlfQVBJX0tFWV9TRVQ6XG4gICAgcHJpbnQoZlwie0JDb2xvcnMuRkFJTH1DUklUSUNBTF9XQVJOSU5HOiBPUEVOQUlfQVBJX0tFWSBlbnZpcm9ubWVudCB2YXJpYWJsZSBpcyBOT1QgU0VULiBPcGVuQUkgY2FsbHMgbGlrZWx5IGZhaWwue0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbmVsc2U6XG4gICAgcHJpbnQoZlwie0JDb2xvcnMuT0tHUkVFTn1ERUJVRzogT1BFTkFJX0FQSV9LRVkgZW52aXJvbm1lbnQgdmFyaWFibGUgaXMgZGV0ZWN0ZWQue0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcblxuXG4jIC0tLSBIZWFsdGggQ2hlY2sgLS0tXG5AYXBwLmdldChcIi9cIilcbmFzeW5jIGRlZiBoZWFsdGhfY2hlY2soKTpcbiAgICBwcmludChmXCJ7QkNvbG9ycy5PS0dSRUVOfURFQlVHOiBIZWFsdGggY2hlY2sgJy8nIGVuZHBvaW50IGhpdC57QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgIHJldHVybiB7XCJzdGF0dXNcIjogXCJva1wiLCBcIm1lc3NhZ2VcIjogXCJBdXRvbm9tb3VzIEFnZW50IEFQSSBpcyBydW5uaW5nLlwifVxuXG4jIC0tLSBJbmNsdWRlIFJvdXRlcnMgLS0tXG5hcHAuaW5jbHVkZV9yb3V0ZXIoYWdlbnRfcm91dGVyLnJvdXRlcikgIyBBZGQgdGhlIGFnZW50IHJvdXRlc1xuXG4jIC0tLSBHbG9iYWwgQWdlbnQgU3RvcmFnZSAobWFuYWdlZCB3aXRoaW4gYWdlbnRfcm91dGVyLnB5IG5vdykgLS0tXG4jIFRoZSBgYWdlbnRzX2RiYCBkaWN0aW9uYXJ5IGlzIG5vdyBtYW5hZ2VkIHdpdGhpbiBgcm91dGVycy9hZ2VudF9yb3V0ZXIucHlgXG4jIFRoaXMga2VlcHMgaXQgY2xvc2VyIHRvIHRoZSBvcGVyYXRpb25zIHRoYXQgdXNlIGl0LlxuIyBJZiB5b3UgbmVlZCB0byBhY2Nlc3MgaXQgZnJvbSBgbWFpbi5weWAgZm9yIG90aGVyIHJlYXNvbnMgKGUuZy4gc3RhcnR1cC9zaHV0ZG93biBldmVudHMpLFxuIyB5b3UgY291bGQgaW1wb3J0IGl0OiBgZnJvbSByb3V0ZXJzLmFnZW50X3JvdXRlciBpbXBvcnQgYWdlbnRzX2RiYFxuIyBPciBwYXNzIGBhcHAuc3RhdGUuYWdlbnRzX2RiYCBhcm91bmQgaWYgeW91IHByZWZlciB0aGF0IHBhdHRlcm4uXG5cbnByaW50KGZcIntCQ29sb3JzLk9LR1JFRU59REVCVUc6IEZhc3RBUEkgYXBwbGljYXRpb24gZmluaXNoZWQgbG9hZGluZy4gKFVzaW5nIEF1dG9ub21vdXMgQWdlbnRzIC0gUmVmYWN0b3JlZCl7QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuXG4jIFRvIHJ1bjogdXZpY29ybiBtYWluOmFwcCAtLXJlbG9hZFxuIyBFbnN1cmUgUHl0aG9uJ3MgaW1wb3J0IHN5c3RlbSBjYW4gZmluZCB5b3VyIG1vZHVsZXMgKGUuZy4sIHJvdXRlcnMuYWdlbnRfcm91dGVyKVxuIyBJZiBydW5uaW5nIGZyb20gdGhlIHByb2plY3Qgcm9vdCwgYW5kIGByb3V0ZXJzYCBpcyBhIHN1YmRpcmVjdG9yeSwgaXQgc2hvdWxkIHdvcmsuXG4uLi5cblBhdGg6IC5naXRpZ25vcmVcbiMgQnl0ZS1jb21waWxlZCAvIG9wdGltaXplZCAvIERMTCBmaWxlc1xuX19weWNhY2hlX18vXG4qLnB5W2NvZF1cbiokcHkuY2xhc3NcblxuIyBDIGV4dGVuc2lvbnNcbiouc29cblxuIyBEaXN0cmlidXRpb24gLyBwYWNrYWdpbmdcbi5QeXRob25cbmJ1aWxkL1xuZGV2ZWxvcC1lZ2dzL1xuZGlzdC9cbmRvd25sb2Fkcy9cbmVnZ3MvXG4uZWdncy9cbmxpYi9cbmxpYjY0L1xucGFydHMvXG5zZGlzdC9cbnZhci9cbndoZWVscy9cbiouZWdnLWluZm8vXG4uaW5zdGFsbGVkLmNmZ1xuKi5lZ2dcbk1BTklGRVNUXG5cbiMgUHlJbnN0YWxsZXJcbiMgIFVzdWFsbHkgdGhlc2UgZmlsZXMgYXJlIHdyaXR0ZW4gYnkgYSBweXRob24gc2NyaXB0IGZyb20gYSB0ZW1wbGF0ZVxuIyAgYmVmb3JlIFB5SW5zdGFsbGVyIGJ1aWxkcyB0aGUgZXhlLCBzbyBhcyB0byBpbmplY3QgZGF0ZS9vdGhlciBpbmZvcyBpbnRvIGl0LlxuKi5tYW5pZmVzdFxuKi5zcGVjXG5cbiMgSW5zdGFsbGVyIGxvZ3NcbnBpcC1sb2cudHh0XG5waXAtZGVsZXRlLXRoaXMtZGlyZWN0b3J5LnR4dFxuXG4jIFVuaXQgdGVzdCAvIGNvdmVyYWdlIHJlcG9ydHNcbmh0bWxjb3YvXG4udG94L1xuLmNvdmVyYWdlXG4uY292ZXJhZ2UuKlxuLmNhY2hlXG5ub3NldGVzdHMueG1sXG5jb3ZlcmFnZS54bWxcbiouY292ZXJcbi5oeXBvdGhlc2lzL1xuLnB5dGVzdF9jYWNoZS9cblxuIyBUcmFuc2xhdGlvbnNcbioubW9cbioucG90XG5cbiMgRGphbmdvIHN0dWZmOlxuKi5sb2dcbmxvY2FsX3NldHRpbmdzLnB5XG5kYi5zcWxpdGUzXG5cbiMgRmxhc2sgc3R1ZmY6XG5pbnN0YW5jZS9cbi53ZWJhc3NldHMtY2FjaGVcblxuIyBTY3JhcHkgc3R1ZmY6XG4uc2NyYXB5XG5cbiMgU3BoaW54IGRvY3VtZW50YXRpb25cbmRvY3MvX2J1aWxkL1xuXG4jIFB5QnVpbGRlclxudGFyZ2V0L1xuXG4jIEp1cHl0ZXIgTm90ZWJvb2tcbi5pcHluYl9jaGVja3BvaW50c1xuXG4jIHB5ZW52XG4ucHl0aG9uLXZlcnNpb25cbnB5dmVudi5jZmdcblxuIyBjZWxlcnkgYmVhdCBzY2hlZHVsZSBmaWxlXG5jZWxlcnliZWF0LXNjaGVkdWxlXG5cbiMgU2FnZU1hdGggcGFyc2VkIGZpbGVzXG4qLnNhZ2UucHlcblxuIyBFbnZpcm9ubWVudHNcbi5lbnZcbi52ZW52XG5lbnYvXG52ZW52L1xuRU5WL1xuZW52LmJhay9cbnZlbnYuYmFrL1xuXG4jIFNweWRlciBwcm9qZWN0IHNldHRpbmdzXG4uc3B5ZGVycHJvamVjdFxuLnNweXByb2plY3RcblxuIyBSb3BlIHByb2plY3Qgc2V0dGluZ3Ncbi5yb3BlcHJvamVjdFxuXG4jIG1rZG9jcyBkb2N1bWVudGF0aW9uXG4vc2l0ZVxuXG4jIG15cHlcbi5teXB5X2NhY2hlL1xuXG4jIE1hYyBPU1xuLkRTX1N0b3JlXG4uLi5cblBhdGg6IHJlbmRlci55YW1sXG5zZXJ2aWNlczpcbiAgIyBBIERvY2tlciB3ZWIgc2VydmljZVxuICAtIHR5cGU6IHdlYlxuICAgIG5hbWU6IGZhc3RhcGktZXhhbXBsZVxuICAgIHJ1bnRpbWU6IHB5dGhvblxuICAgIHBsYW46IGZyZWVcbiAgICBhdXRvRGVwbG95OiBmYWxzZVxuICAgIGJ1aWxkQ29tbWFuZDogcGlwIGluc3RhbGwgLXIgcmVxdWlyZW1lbnRzLnR4dFxuICAgIHN0YXJ0Q29tbWFuZDogdXZpY29ybiBtYWluOmFwcCAtLWhvc3QgMC4wLjAuMCAtLXBvcnQgJFBPUlRcbi4uLlxuUGF0aDogcmVxdWlyZW1lbnRzLnR4dFxuIyBjb3JlIHdlYiBmcmFtZXdvcmtcbmZhc3RhcGlbYWxsXVxuXG4jIExhbmdDaGFpbiBwcmltaXRpdmVzXG5sYW5nY2hhaW5+PTAuMiAgICAgICAgICAjIGNvcmVcbmxhbmdjaGFpbi1leHBlcmltZW50YWx+PTAuMiAgIyBjb250YWlucyBnZW5lcmF0aXZlX2FnZW50c1xubGFuZ2NoYWluLWNvbW11bml0eX49MC4yXG5sYW5nY2hhaW4tb3BlbmFpfj0wLjEgICMgaG91c2VzIENoYXRPcGVuQUkgJiBPcGVuQUlFbWJlZGRpbmdzXG5cbiMgTExNICsgZW1iZWRkaW5ncyAocGljayB0aGUgcHJvdmlkZXIgeW914oCZbGwgcmVhbGx5IHVzZSlcbm9wZW5haT49MS4yNS4wXG50aWt0b2tlbj49MC42LjBcblxuIyBzaW1wbGUgaW7igJFwcm9jZXNzIHZlY3RvciBzdG9yZSBmb3IgYWdlbnQgbWVtb3J5XG5mYWlzcy1jcHU+PTEuOC4wXG4uLi5cblBhdGg6IGNvbmZpZy5weVxuIyBGaWxlOiBjb25maWcucHlcbmltcG9ydCBvc1xuXG5ERUZBVUxUX0NIQVRfTU9ERUwgPSBcImdwdC00by1taW5pXCJcbkRFRkFVTFRfRU1CRURESU5HX01PREVMID0gXCJ0ZXh0LWVtYmVkZGluZy0zLXNtYWxsXCJcblxuT1BFTkFJX0FQSV9LRVlfU0VUID0gYm9vbChvcy5nZXRlbnYoXCJPUEVOQUlfQVBJX0tFWVwiKSlcbi4uLlxuUGF0aDogcm91dGVycy9hZ2VudF9yb3V0ZXIucHlcbiMgRmlsZTogcm91dGVycy9hZ2VudF9yb3V0ZXIucHlcbmltcG9ydCB0cmFjZWJhY2tcbmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lXG5mcm9tIHR5cGluZyBpbXBvcnQgRGljdCwgTGlzdCwgQW55LCBUdXBsZVxuZnJvbSB1dWlkIGltcG9ydCB1dWlkNFxuaW1wb3J0IG51bXB5IGFzIG5wXG5cbmZyb20gZmFzdGFwaSBpbXBvcnQgQVBJUm91dGVyLCBIVFRQRXhjZXB0aW9uXG5mcm9tIGxhbmdjaGFpbl9jb3JlLmRvY3VtZW50cyBpbXBvcnQgRG9jdW1lbnQgIyBSZXF1aXJlZCBmb3IgZmV0Y2hfbWVtb3JpZXMgdHlwZSBoaW50XG5cbmZyb20gY3VzdG9tX2FnZW50IGltcG9ydCBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50XG5mcm9tIGFnZW50X2ZhY3RvcnkgaW1wb3J0IGNyZWF0ZV9uZXdfYWdlbnRfaW5zdGFuY2VcbmZyb20gc2NoZW1hcyBpbXBvcnQgKFxuICAgIENyZWF0ZUFnZW50UmVxLCBHZW5lcmF0ZVJlc3BvbnNlUmVxLCBHZW5lcmF0ZVJlYWN0aW9uUmVzcG9uc2UsIEFkZE1lbW9yeVJlcSxcbiAgICBGZXRjaE1lbW9yaWVzUmVxLCBVcGRhdGVTdGF0dXNSZXEsIEFnZW50TGlzdFJlc3BvbnNlLCBBZ2VudERldGFpbCxcbiAgICBBZ2VudENyZWF0aW9uUmVzcG9uc2UsIEFkZGVkTWVtb3J5UmVzcG9uc2UsIEZldGNoZWRNZW1vcmllc1Jlc3BvbnNlLFxuICAgIEZldGNoZWRNZW1vcmllc0RvY3VtZW50LCBBZ2VudFN1bW1hcnlSZXNwb25zZSwgRGVsZXRlZEFnZW50UmVzcG9uc2Vcbilcbi4uLlxuXG5cbkByb3V0ZXIucG9zdChcIlwiLCBzdGF0dXNfY29kZT0yMDEsIHJlc3BvbnNlX21vZGVsPUFnZW50Q3JlYXRpb25SZXNwb25zZSlcbmRlZiBjcmVhdGVfYWdlbnRfZW5kcG9pbnQocmVxOiBDcmVhdGVBZ2VudFJlcSk6XG4gICAgcHJpbnQoZlwie0JDb2xvcnMuSEVBREVSfURFQlVHOiAvYWdlbnRzIFBPU1QgcmVxdWVzdCByZWNlaXZlZDoge3JlcS5tb2RlbF9kdW1wX2pzb24oZXhjbHVkZV9ub25lPVRydWUpfXtCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgYWlkID0gcmVxLmFnZW50X2lkIG9yIHN0cih1dWlkNCgpKVxuICAgIGlmIGFpZCBpbiBhZ2VudHNfZGI6XG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NDAwLCBkZXRhaWw9ZlwiQWdlbnQgd2l0aCBhZ2VudF9pZCAne2FpZH0nIGFscmVhZHkgZXhpc3RzLlwiKVxuICAgIHRyeTpcbiAgICAgICAgY3VycmVudF9hZ2VudF9pbnN0YW5jZSA9IGNyZWF0ZV9uZXdfYWdlbnRfaW5zdGFuY2UoXG4gICAgICAgICAgICBuYW1lPXJlcS5uYW1lLCBhZ2U9cmVxLmFnZSwgdHJhaXRzPXJlcS50cmFpdHMsIHN0YXR1cz1yZXEuc3RhdHVzLFxuICAgICAgICAgICAgc3VtbWFyeV9yZWZyZXNoX3NlY29uZHM9cmVxLnN1bW1hcnlfcmVmcmVzaF9zZWNvbmRzLFxuICAgICAgICAgICAgcmVmbGVjdGlvbl90aHJlc2hvbGQ9cmVxLnJlZmxlY3Rpb25fdGhyZXNob2xkLCB2ZXJib3NlPXJlcS52ZXJib3NlLFxuICAgICAgICAgICAgbGxtX21vZGVsX25hbWU9cmVxLm1vZGVsX25hbWUsIGVtYmVkZGluZ19tb2RlbF9uYW1lPXJlcS5lbWJlZGRpbmdfbW9kZWxfbmFtZVxuICAgICAgICApXG4uLi5cblxuQHJvdXRlci5nZXQoXCJcIiwgcmVzcG9uc2VfbW9kZWw9QWdlbnRMaXN0UmVzcG9uc2UpXG5kZWYgbGlzdF9hZ2VudHNfZW5kcG9pbnQoKTpcbiAgICBhZ2VudF9kZXRhaWxzX2xpc3QgPSBbXVxuICAgIGZvciBhZ2VudF9pZCwgYWdlbnRfaW5zdGFuY2UgaW4gYWdlbnRzX2RiLml0ZW1zKCk6XG4gICAgICAgIG5hbWUsIHN0YXR1cywgbGxtX21vZGVsLCBlbWJfbW9kZWwgPSBcIlVua25vd25cIiwgXCJVbmtub3duXCIsIFwidW5rbm93blwiLCBcInVua25vd25cIlxuICAgICAgICBpZiBhZ2VudF9pbnN0YW5jZTpcbiAgICAgICAgICAgIG5hbWUgPSBhZ2VudF9pbnN0YW5jZS5uYW1lXG4gICAgICAgICAgICBzdGF0dXMgPSBhZ2VudF9pbnN0YW5jZS5zdGF0dXNcbiAgICAgICAgICAgIGxsbV9tb2RlbCwgZW1iX21vZGVsID0gZ2V0X2FnZW50X21vZGVsX2RldGFpbHMoYWdlbnRfaW5zdGFuY2UpXG4gICAgICAgIGFnZW50X2RldGFpbHNfbGlzdC5hcHBlbmQoQWdlbnREZXRhaWwoXG4gICAgICAgICAgICBhZ2VudF9pZD1hZ2VudF9pZCwgbmFtZT1uYW1lLCBzdGF0dXM9c3RhdHVzLFxuICAgICAgICAgICAgbGxtX21vZGVsPWxsbV9tb2RlbCwgZW1iZWRkaW5nX21vZGVsPWVtYl9tb2RlbFxuICAgICAgICApKVxuICAgIHJldHVybiBBZ2VudExpc3RSZXNwb25zZShhZ2VudHM9YWdlbnRfZGV0YWlsc19saXN0KVxuLi4uXG5cbkByb3V0ZXIucG9zdChcIi97YWdlbnRfaWR9L2dlbmVyYXRlX3Jlc3BvbnNlXCIsIHJlc3BvbnNlX21vZGVsPUdlbmVyYXRlUmVhY3Rpb25SZXNwb25zZSlcbmRlZiBnZW5lcmF0ZV9yZXNwb25zZV9lbmRwb2ludChhZ2VudF9pZDogc3RyLCByZXE6IEdlbmVyYXRlUmVzcG9uc2VSZXEpOlxuICAgIG9ic2VydmF0aW9uID0gcmVxLnByb21wdC5zdHJpcCgpXG4gICAgcHJpbnQoZlwie0JDb2xvcnMuSEVBREVSfURFQlVHOiAvZ2VuZXJhdGVfcmVzcG9uc2UgZm9yIGFnZW50IHtCQ29sb3JzLkJPTER9e2FnZW50X2lkfXtCQ29sb3JzLkVOREN9IHdpdGggJ3tvYnNlcnZhdGlvbls6NTBdfS4uLicgKEs9e3JlcS5rIG9yICdkZWZhdWx0J30pe0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICBpZiBhZ2VudF9pZCBub3QgaW4gYWdlbnRzX2RiIG9yIGFnZW50c19kYlthZ2VudF9pZF0gaXMgTm9uZTpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDQsIGRldGFpbD1mXCJBZ2VudCAne2FnZW50X2lkfScgbm90IGZvdW5kIG9yIGludmFsaWQuXCIpXG4gICAgaWYgbm90IG9ic2VydmF0aW9uOlxuICAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDAsIGRldGFpbD1cIk9ic2VydmF0aW9uIGNhbm5vdCBiZSBlbXB0eS5cIilcblxuICAgIGFnZW50OiBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50ID0gYWdlbnRzX2RiW2FnZW50X2lkXVxuICAgIG9yaWdpbmFsX2sgPSAtMVxuICAgIHJldHJpZXZlciA9IGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyXG4gICAgaWYgaGFzYXR0cihyZXRyaWV2ZXIsICdrJyk6XG4gICAgICAgICBvcmlnaW5hbF9rID0gcmV0cmlldmVyLmtcblxuICAgIGFwaV9yZWFjdGlvbl90eXBlLCBhcGlfY29udGVudCwgb2JzZXJ2YXRpb25fd2FzX2ltcG9ydGFudF9mbGFnID0gXCJVTktOT1dOXCIsIFwiXCIsIEZhbHNlXG4gICAgdHJ5OlxuICAgICAgICBpZiByZXEuayBpcyBub3QgTm9uZSBhbmQgcmVxLmsgPiAwIGFuZCBoYXNhdHRyKHJldHJpZXZlciwgJ2snKTpcbiAgICAgICAgICAgIHJldHJpZXZlci5rID0gcmVxLmtcbiAgICAgICAgXG4gICAgICAgIGFwaV9yZWFjdGlvbl90eXBlLCBhcGlfY29udGVudCwgb2JzZXJ2YXRpb25fd2FzX2ltcG9ydGFudF9mbGFnID0gYWdlbnQuZ2V0X2ludGVycHJldGVkX3JlYWN0aW9uKG9ic2VydmF0aW9uLCBkYXRldGltZS5ub3coKSlcbiAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuT0tHUkVFTn1ERUJVRzogYWdlbnQuZ2V0X2ludGVycHJldGVkX3JlYWN0aW9uIGNvbXBsZXRlZC4gQVBJIFR5cGU6ICd7YXBpX3JlYWN0aW9uX3R5cGV9JywgSW1wb3J0YW50OiB7b2JzZXJ2YXRpb25fd2FzX2ltcG9ydGFudF9mbGFnfXtCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4uLi5cbiAgICBcbiAgICByZXNwb25zZV9wYXlsb2FkX2RvY3M6IExpc3RbRmV0Y2hlZE1lbW9yaWVzRG9jdW1lbnRdID0gW11cbiAgICB0cnk6XG4gICAgICAgIHJlcXVlc3RlZF9rID0gcmV0cmlldmVyLmsgIyBEZWZhdWx0IHRvIHJldHJpZXZlcidzIGtcbiAgICAgICAgaWYgcmVxLmsgaXMgbm90IE5vbmUgYW5kIHJlcS5rID4gMCBhbmQgaGFzYXR0cihyZXRyaWV2ZXIsICdrJyk6XG4gICAgICAgICAgICByZXF1ZXN0ZWRfayA9IHJlcS5rXG4gICAgICAgICAgICByZXRyaWV2ZXIuayA9IHJlcXVlc3RlZF9rXG5cbiAgICAgICAgZG9jc19hbmRfc2NvcmVzOiBMaXN0W1R1cGxlW0RvY3VtZW50LCBmbG9hdF1dID0gW11cbiAgICAgICAgaWYgKGhhc2F0dHIocmV0cmlldmVyLCBcInZlY3RvcnN0b3JlXCIpIGFuZCByZXRyaWV2ZXIudmVjdG9yc3RvcmUgYW5kXG4gICAgICAgICAgICBoYXNhdHRyKHJldHJpZXZlci52ZWN0b3JzdG9yZSwgXCJzaW1pbGFyaXR5X3NlYXJjaF93aXRoX3JlbGV2YW5jZV9zY29yZXNcIikpOlxuICAgICAgICAgICAgZG9jc19hbmRfc2NvcmVzID0gcmV0cmlldmVyLnZlY3RvcnN0b3JlLnNpbWlsYXJpdHlfc2VhcmNoX3dpdGhfcmVsZXZhbmNlX3Njb3JlcyhvYnNlcnZhdGlvbiwgaz1yZXF1ZXN0ZWRfaylcbiAgICAgICAgZWxzZTpcbiAgICAgICAgICAgIGZldGNoZWRfZG9jc19vbmx5OiBMaXN0W0RvY3VtZW50XSA9IGFnZW50Lm1lbW9yeS5mZXRjaF9tZW1vcmllcyhvYnNlcnZhdGlvbiwgbm93PWRhdGV0aW1lLm5vdygpKVxuICAgICAgICAgICAgZG9jc19hbmRfc2NvcmVzID0gWyhkb2MsIDAuMCkgZm9yIGRvYyBpbiBmZXRjaGVkX2RvY3Nfb25seV1cbi4uLlxuXG5Acm91dGVyLmdldChcIi97YWdlbnRfaWR9L3N1bW1hcnlcIiwgcmVzcG9uc2VfbW9kZWw9QWdlbnRTdW1tYXJ5UmVzcG9uc2UpXG5kZWYgZ2V0X3N1bW1hcnlfZW5kcG9pbnQoYWdlbnRfaWQ6IHN0cik6XG4gICAgaWYgYWdlbnRfaWQgbm90IGluIGFnZW50c19kYiBvciBhZ2VudHNfZGJbYWdlbnRfaWRdIGlzIE5vbmU6XG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NDA0LCBkZXRhaWw9ZlwiQWdlbnQgJ3thZ2VudF9pZH0nIG5vdCBmb3VuZCBvciBpbnZhbGlkLlwiKVxuICAgIGFnZW50ID0gYWdlbnRzX2RiW2FnZW50X2lkXVxuICAgIHN1bW1hcnlfdGV4dCA9IFwiRXJyb3IgZ2VuZXJhdGluZyBzdW1tYXJ5LlwiXG4gICAgdHJ5OlxuICAgICAgICBzdW1tYXJ5X3RleHQgPSBhZ2VudC5nZXRfc3VtbWFyeShmb3JjZV9yZWZyZXNoPVRydWUpXG4gICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICBzdW1tYXJ5X3RleHQgPSBmXCJFcnJvciBnZW5lcmF0aW5nIHN1bW1hcnk6IHtlfVwiXG4gICAgcmV0dXJuIEFnZW50U3VtbWFyeVJlc3BvbnNlKGFnZW50X2lkPWFnZW50X2lkLCBzdW1tYXJ5PXN1bW1hcnlfdGV4dClcbi4uLlxuUGF0aDogYWdlbnRfZmFjdG9yeS5weVxuIyBGaWxlOiBhZ2VudF9mYWN0b3J5LnB5XG5pbXBvcnQgdHJhY2ViYWNrXG5mcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWxcblxuaW1wb3J0IGZhaXNzXG5mcm9tIGZhc3RhcGkgaW1wb3J0IEhUVFBFeGNlcHRpb25cbmZyb20gbGFuZ2NoYWluX29wZW5haSBpbXBvcnQgQ2hhdE9wZW5BSSwgT3BlbkFJRW1iZWRkaW5nc1xuZnJvbSBsYW5nY2hhaW5fY29tbXVuaXR5LnZlY3RvcnN0b3JlcyBpbXBvcnQgRkFJU1NcbmZyb20gbGFuZ2NoYWluX2NvbW11bml0eS5kb2NzdG9yZS5pbl9tZW1vcnkgaW1wb3J0IEluTWVtb3J5RG9jc3RvcmVcbmZyb20gbGFuZ2NoYWluLnJldHJpZXZlcnMgaW1wb3J0IFRpbWVXZWlnaHRlZFZlY3RvclN0b3JlUmV0cmlldmVyXG5mcm9tIGxhbmdjaGFpbl9leHBlcmltZW50YWwuZ2VuZXJhdGl2ZV9hZ2VudHMgaW1wb3J0IEdlbmVyYXRpdmVBZ2VudE1lbW9yeVxuZnJvbSBsYW5nY2hhaW5fY29tbXVuaXR5LnZlY3RvcnN0b3Jlcy51dGlscyBpbXBvcnQgRGlzdGFuY2VTdHJhdGVneVxuXG5mcm9tIGN1c3RvbV9hZ2VudCBpbXBvcnQgQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudFxuZnJvbSB1dGlscyBpbXBvcnQgQkNvbG9yc1xuZnJvbSBjb25maWcgaW1wb3J0IERFRkFVTFRfQ0hBVF9NT0RFTCwgREVGQVVMVF9FTUJFRERJTkdfTU9ERUxcblxuXG5kZWYgY3JlYXRlX25ld19hZ2VudF9pbnN0YW5jZShcbiAgICBuYW1lOiBzdHIsXG4gICAgYWdlOiBpbnQsXG4gICAgdHJhaXRzOiBzdHIsXG4gICAgc3RhdHVzOiBzdHIsXG4gICAgc3VtbWFyeV9yZWZyZXNoX3NlY29uZHM6IGludCxcbiAgICByZWZsZWN0aW9uX3RocmVzaG9sZDogaW50LFxuICAgIHZlcmJvc2U6IGJvb2wsXG4gICAgbGxtX21vZGVsX25hbWU6IE9wdGlvbmFsW3N0cl0gPSBOb25lLFxuICAgIGVtYmVkZGluZ19tb2RlbF9uYW1lOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuKSAtPiBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50OlxuICAgIHByaW50KGZcIntCQ29sb3JzLk9LQkxVRX1ERUJVRzogY3JlYXRlX25ld19hZ2VudF9pbnN0YW5jZSBjYWxsZWQgZm9yIGFnZW50ICd7QkNvbG9ycy5CT0xEfXtuYW1lfXtCQ29sb3JzLkVOREN9e0JDb2xvcnMuT0tCTFVFfSd7QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuLi4uXG5cbiAgICBwcmludChmXCJ7QkNvbG9ycy5ESU19REVCVUc6IFNldHRpbmcgdXAgRkFJU1MgaW5kZXggZm9yIGFnZW50ICd7bmFtZX0nIChkaW06IHtkaW19KS4gVXNpbmcgSW5uZXIgUHJvZHVjdCAoZm9yIENvc2luZSkue0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICB0cnk6XG4gICAgICAgIGluZGV4ID0gZmFpc3MuSW5kZXhGbGF0SVAoZGltKVxuICAgICAgICB2ZWN0b3JzdG9yZSA9IEZBSVNTKFxuICAgICAgICAgICAgZW1iZWRkaW5nX2Z1bmN0aW9uPWFnZW50X2VtYmVkZGluZ3MsXG4gICAgICAgICAgICBpbmRleD1pbmRleCxcbiAgICAgICAgICAgIGRvY3N0b3JlPUluTWVtb3J5RG9jc3RvcmUoe30pLFxuICAgICAgICAgICAgaW5kZXhfdG9fZG9jc3RvcmVfaWQ9e30sXG4gICAgICAgICAgICBub3JtYWxpemVfTDI9VHJ1ZSxcbiAgICAgICAgICAgIGRpc3RhbmNlX3N0cmF0ZWd5PURpc3RhbmNlU3RyYXRlZ3kuTUFYX0lOTkVSX1BST0RVQ1RcbiAgICAgICAgKVxuICAgICAgICByZXRyaWV2ZXIgPSBUaW1lV2VpZ2h0ZWRWZWN0b3JTdG9yZVJldHJpZXZlcihcbiAgICAgICAgICAgIHZlY3RvcnN0b3JlPXZlY3RvcnN0b3JlLCBrPTE1LCBkZWNheV9yYXRlPTAuMDFcbiAgICAgICAgKVxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuRkFJTH1FUlJPUl9TVEFDS1RSQUNFOiBGYWlsZWQgZHVyaW5nIEZBSVNTIHNldHVwIGZvciBhZ2VudCAne25hbWV9Jzoge2V9e0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICAgICAgdHJhY2ViYWNrLnByaW50X2V4YygpXG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZlwiRmFpbGVkIGR1cmluZyBGQUlTUyBzZXR1cDoge2V9XCIpXG4uLi5cblBhdGg6IHNjaGVtYXMucHlcbiMgRmlsZTogc2NoZW1hcy5weVxuZnJvbSB0eXBpbmcgaW1wb3J0IE9wdGlvbmFsLCBMaXN0LCBEaWN0LCBBbnlcbmZyb20gcHlkYW50aWMgaW1wb3J0IEJhc2VNb2RlbCwgRmllbGRcblxuY2xhc3MgQ3JlYXRlQWdlbnRSZXEoQmFzZU1vZGVsKTpcbiAgICBuYW1lOiBzdHJcbiAgICBhZ2U6IGludFxuICAgIHRyYWl0czogc3RyXG4gICAgc3RhdHVzOiBzdHJcbiAgICBhZ2VudF9pZDogT3B0aW9uYWxbc3RyXSA9IE5vbmVcbiAgICBzdW1tYXJ5X3JlZnJlc2hfc2Vjb25kczogaW50ID0gRmllbGQoZGVmYXVsdD0zNjAwLCBnZT0wKVxuICAgIHJlZmxlY3Rpb25fdGhyZXNob2xkOiBpbnQgPSBGaWVsZChkZWZhdWx0PTAsIGdlPTApXG4gICAgdmVyYm9zZTogYm9vbCA9IEZhbHNlXG4gICAgbW9kZWxfbmFtZTogT3B0aW9uYWxbc3RyXSA9IE5vbmVcbiAgICBlbWJlZGRpbmdfbW9kZWxfbmFtZTogT3B0aW9uYWxbc3RyXSA9IE5vbmVcblxuY2xhc3MgR2VuZXJhdGVSZXNwb25zZVJlcShCYXNlTW9kZWwpOlxuICAgIHByb21wdDogc3RyXG4gICAgazogT3B0aW9uYWxbaW50XSA9IEZpZWxkKGRlZmF1bHQ9Tm9uZSwgZ3Q9MClcblxuY2xhc3MgR2VuZXJhdGVSZWFjdGlvblJlc3BvbnNlKEJhc2VNb2RlbCk6XG4gICAgYWdlbnRfbmFtZTogc3RyXG4gICAgcmVhY3Rpb25fdHlwZTogc3RyICMgU0FZLCBUSElOSywgRE8sIElHTk9SRSwgVU5LTk9XTlxuICAgIGNvbnRlbnQ6IHN0clxuICAgIG9ic2VydmF0aW9uX3dhc19pbXBvcnRhbnQ6IGJvb2xcblxuY2xhc3MgQWRkTWVtb3J5UmVxKEJhc2VNb2RlbCk6XG4gICAgdGV4dF90b19tZW1vcml6ZTogc3RyXG5cbmNsYXNzIEZldGNoTWVtb3JpZXNSZXEoQmFzZU1vZGVsKTpcbiAgICBvYnNlcnZhdGlvbjogc3RyXG4gICAgazogT3B0aW9uYWxbaW50XSA9IEZpZWxkKGRlZmF1bHQ9Tm9uZSwgZ3Q9MClcblxuY2xhc3MgVXBkYXRlU3RhdHVzUmVxKEJhc2VNb2RlbCk6XG4gICAgbmV3X3N0YXR1czogc3RyXG5cbmNsYXNzIEFnZW50RGV0YWlsKEJhc2VNb2RlbCk6XG4gICAgYWdlbnRfaWQ6IHN0clxuICAgIG5hbWU6IHN0clxuICAgIHN0YXR1czogc3RyXG4gICAgbGxtX21vZGVsOiBzdHJcbiAgICBlbWJlZGRpbmdfbW9kZWw6IHN0clxuXG5jbGFzcyBBZ2VudExpc3RSZXNwb25zZShCYXNlTW9kZWwpOlxuICAgIGFnZW50czogTGlzdFtBZ2VudERldGFpbF1cblxuY2xhc3MgQWdlbnRDcmVhdGlvblJlc3BvbnNlKEJhc2VNb2RlbCk6XG4gICAgYWdlbnRfaWQ6IHN0clxuICAgIG5hbWU6IHN0clxuICAgIGxsbV9tb2RlbF91c2VkOiBzdHJcbiAgICBlbWJlZGRpbmdfbW9kZWxfdXNlZDogc3RyXG5cbmNsYXNzIFNpbXBsZVN0YXR1c1Jlc3BvbnNlKEJhc2VNb2RlbCk6XG4gICAgc3RhdHVzOiBzdHJcbiAgICBtZXNzYWdlOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuXG5jbGFzcyBBZGRlZE1lbW9yeVJlc3BvbnNlKEJhc2VNb2RlbCk6XG4gICAgc3RhdHVzOiBzdHJcbiAgICBhZGRlZF9tZW1vcnk6IHN0clxuXG5jbGFzcyBGZXRjaGVkTWVtb3JpZXNEb2N1bWVudChCYXNlTW9kZWwpOlxuICAgIGNvbnRlbnQ6IHN0clxuICAgIG1ldGFkYXRhOiBEaWN0W3N0ciwgQW55XVxuICAgIHJlbGV2YW5jZV9zY29yZTogZmxvYXRcblxuY2xhc3MgRmV0Y2hlZE1lbW9yaWVzUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBtZW1vcmllczogTGlzdFtGZXRjaGVkTWVtb3JpZXNEb2N1bWVudF1cbi4uLlxuUGF0aDogcHJvbXB0cy5weVxuIyBGaWxlOiBwcm9tcHRzLnB5XG5cbiMgLS0tIEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnQgUHJvbXB0cyAtLS1cblxuREVDSVNJT05fVEVNUExBVEUgPSAoXG4gICAgXCJZb3UgYXJlIHthZ2VudF9uYW1lfS5cXG5cIlxuICAgIFwiWW91ciBjb3JlIGNoYXJhY3RlcmlzdGljcyBhcmU6IHthZ2VudF90cmFpdHN9XFxuXCJcbiAgICBcIkl0IGlzIHtjdXJyZW50X3RpbWV9LlxcblwiXG4gICAgXCJZb3VyIHN0YXR1cyBpczoge2FnZW50X3N0YXR1c31cXG5cIlxuICAgIFwiWW91IG9ic2VydmU6IHtvYnNlcnZhdGlvbn1cXG5cIlxuICAgIFwiUmVsZXZhbnQgcmVjZW50IG1lbW9yaWVzOlxcbnttZW1vcnlfY29udGV4dH1cXG5cXG5cIlxuICAgIFwiQ29uc2lkZXJpbmcgeW91ciBwZXJzb25hbGl0eSAoZXNwZWNpYWxseSB0cmFpdHMgbGlrZSB7YWdlbnRfdHJhaXRzfSksIHRoZSBvYnNlcnZhdGlvbiwgYW5kIHJlY2VudCBtZW1vcmllcywgXCJcbiAgICBcIndoYXQgaXMgdGhlICptb3N0IGxpa2VseSB0eXBlKiBvZiBpbW1lZGlhdGUgcmVhY3Rpb24geW91IHdvdWxkIGhhdmU/IENob29zZSAqb25lKiBmcm9tOiBcIlxuICAgIFwiJ1NBWScgKHNwZWFrIGFsb3VkKSwgJ1RISU5LJyAoaW50ZXJuYWwgdGhvdWdodCBvbmx5KSwgJ0RPJyAocGVyZm9ybSBhIHBoeXNpY2FsIGFjdGlvbiksICdJR05PUkUnIChubyBzaWduaWZpY2FudCByZWFjdGlvbiwgcmVtYWluIGluIGN1cnJlbnQgc3RhdHVzKS5cIlxuICAgIFwiXFxuUmVhY3Rpb24gVHlwZSBDaG9pY2U6XCJcbilcblxuVEhPVUdIVF9URU1QTEFURSA9IChcbiAgICBcIllvdSBhcmUge2FnZW50X25hbWV9LlxcblwiXG4gICAgXCJZb3VyIGNvcmUgY2hhcmFjdGVyaXN0aWNzIGFyZToge2FnZW50X3RyYWl0c31cXG5cIlxuICAgIFwiSXQgaXMge2N1cnJlbnRfdGltZX0uXFxuXCJcbiAgICBcIllvdXIgc3RhdHVzIGlzOiB7YWdlbnRfc3RhdHVzfVxcblwiXG4gICAgXCJZb3Ugb2JzZXJ2ZToge29ic2VydmF0aW9ufVxcblwiXG4gICAgXCJSZWxldmFudCByZWNlbnQgbWVtb3JpZXM6XFxue21lbW9yeV9jb250ZXh0fVxcblwiXG4gICAgXCJSZWxhdGlvbnNoaXAgY29udGV4dDoge3JlbGF0aW9uc2hpcF9jb250ZXh0fVxcblxcblwiXG4gICAgXCJDb25zaWRlcmluZyB5b3VyIHBlcnNvbmFsaXR5IGFuZCB0aGUgc2l0dWF0aW9uLCB3aGF0IGlzIHlvdXIgKmludGVybmFsIHRob3VnaHQqIG9yICphc3Nlc3NtZW50KiByaWdodCBub3cgaW4gcmVzcG9uc2UgdG8gdGhlIG9ic2VydmF0aW9uPyBcIlxuICAgIFwiRGVzY3JpYmUgdGhlIHRob3VnaHQgY29uY2lzZWx5LiBEbyAqbm90KiBkZXNjcmliZSBhY3Rpb25zIG9yIHNwZWVjaC4gRXhhbXBsZTogKEludGVybmFsIHRob3VnaHQpIFRoYXQgc2VlbXMgc3VzcGljaW91cy5cIlxuICAgIFwiXFxuSW50ZXJuYWwgVGhvdWdodDpcIlxuKVxuXG5BQ1RJT05fVEVNUExBVEUgPSAoXG4gICAgXCJZb3UgYXJlIHthZ2VudF9uYW1lfS5cXG5cIlxuICAgIFwiWW91ciBjb3JlIGNoYXJhY3RlcmlzdGljcyBhcmU6IHthZ2VudF90cmFpdHN9XFxuXCJcbiAgICBcIkl0IGlzIHtjdXJyZW50X3RpbWV9LlxcblwiXG4gICAgXCJZb3VyIHN0YXR1cyBpczoge2FnZW50X3N0YXR1c31cXG5cIlxuICAgIFwiWW91IG9ic2VydmU6IHtvYnNlcnZhdGlvbn1cXG5cIlxuICAgIFwiUmVsZXZhbnQgcmVjZW50IG1lbW9yaWVzOlxcbnttZW1vcnlfY29udGV4dH1cXG5cIlxuICAgIFwiUmVsYXRpb25zaGlwIGNvbnRleHQ6IHtyZWxhdGlvbnNoaXBfY29udGV4dH1cXG5cXG5cIlxuICAgIFwiQ29uc2lkZXJpbmcgeW91ciBwZXJzb25hbGl0eSBhbmQgdGhlIHNpdHVhdGlvbiwgd2hhdCAqcGh5c2ljYWwgYWN0aW9uKiBkbyB5b3UgdGFrZSBpbiBpbW1lZGlhdGUgcmVzcG9uc2UgdG8gdGhlIG9ic2VydmF0aW9uPyBcIlxuICAgIFwiRGVzY3JpYmUgdGhlIGFjdGlvbiBjb25jaXNlbHkgYXMgaWYgbmFycmF0aW5nIGl0LiBFeGFtcGxlOiBJIHNoaWZ0IG15IHdlaWdodCB1bmVhc2lseS4gLyBJIGRyYXcgbXkgc3dvcmQuXCJcbiAgICBcIlxcbkFjdGlvbiBUYWtlbjpcIlxuKVxuXG5TVEFUVVNfVVBEQVRFX1RFTVBMQVRFID0gKFxuICAgIFwiWW91IGFyZSB7YWdlbnRfbmFtZX0uXFxuXCJcbiAgICBcIllvdXIgY29yZSBjaGFyYWN0ZXJpc3RpY3MgYXJlOiB7YWdlbnRfdHJhaXRzfVxcblwiXG4gICAgXCJZb3VyIHByZXZpb3VzIHN0YXR1cyB3YXM6IHtwcmV2aW91c19zdGF0dXN9XFxuXCJcbiAgICBcIllvdSBqdXN0IHBlcmZvcm1lZCB0aGUgYWN0aW9uOiB7YWN0aW9uX3Rha2VufVxcblwiXG4gICAgXCJCYXNlZCBvbiB0aGlzIGFjdGlvbiwgd2hhdCBpcyB5b3VyIGNvbmNpc2UsIHVwZGF0ZWQgc3RhdHVzPyBEZXNjcmliZSBpdCBpbiB0aGUgZmlyc3QgcGVyc29uIChlLmcuLCAnU3RhbmRpbmcgYWxlcnQuJywgJ1NpdHRpbmcgYW5kIG9ic2VydmluZy4nKS5cIlxuICAgIFwiXFxuVXBkYXRlZCBTdGF0dXM6XCJcbilcblxuRU5USVRZX0VYVFJBQ1RJT05fVEVNUExBVEUgPSAoXG4gICAgXCJJbiB0aGUgZm9sbG93aW5nIG9ic2VydmF0aW9uLCBpZGVudGlmeSB0aGUgbWFpbiBlbnRpdHkgb3IgcGVyc29uIE9USEVSIFRIQU4ge2FnZW50X25hbWV9IHdobyBpcyBiZWluZyBvYnNlcnZlZC4gXCJcbiAgICBcIklmIHRoZXJlIGFyZSBtdWx0aXBsZSBlbnRpdGllcywgaWRlbnRpZnkgdGhlIG1vc3QgcHJvbWluZW50IG9uZS4gXCJcbiAgICBcIklmIHRoZXJlIGlzIG5vIGVudGl0eSBvdGhlciB0aGFuIHthZ2VudF9uYW1lfSwgcmVzcG9uZCB3aXRoICdubyBvdGhlciBlbnRpdHknLlxcblxcblwiXG4gICAgXCJPYnNlcnZhdGlvbjoge29ic2VydmF0aW9ufVxcblxcblwiXG4gICAgXCJNYWluIGVudGl0eSAobm90IHthZ2VudF9uYW1lfSk6XCJcbilcblxuRU5USVRZX0FDVElPTl9URU1QTEFURSA9IChcbiAgICBcIkJhc2VkIG9uIHRoZSBmb2xsb3dpbmcgb2JzZXJ2YXRpb24sIHdoYXQgaXMge2VudGl0eX0gZG9pbmc/IERlc2NyaWJlIHRoZWlyIGFjdGlvbnMgY29uY2lzZWx5LlxcblxcblwiXG4gICAgXCJPYnNlcnZhdGlvbjoge29ic2VydmF0aW9ufVxcblxcblwiXG4gICAgXCJXaGF0IHtlbnRpdHl9IGlzIGRvaW5nOlwiXG4pXG5cblJFTEFUSU9OU0hJUF9TVU1NQVJZX1RFTVBMQVRFID0gKFxuICAgIFwiQmFzZWQgb24geW91ciBtZW1vcmllcywgd2hhdCBpcyB5b3VyIHJlbGF0aW9uc2hpcCBvciBrbm93bGVkZ2UgYWJvdXQge2VudGl0eV9uYW1lfT9cXG5cIlxuICAgIFwiQ29uc2lkZXI6XFxuXCJcbiAgICBcIjEuIEhhdmUgeW91IG1ldCB7ZW50aXR5X25hbWV9IGJlZm9yZT9cXG5cIlxuICAgIFwiMi4gRG8geW91IGhhdmUgYW55IGhpc3Rvcnkgd2l0aCB7ZW50aXR5X25hbWV9P1xcblwiXG4gICAgXCIzLiBEbyB5b3UgaGF2ZSBhbnkgZmVlbGluZ3Mgb3Igb3BpbmlvbnMgYWJvdXQge2VudGl0eV9uYW1lfT9cXG5cIlxuICAgIFwiNC4gSXMgdGhlcmUgYW55dGhpbmcgbm90YWJsZSBhYm91dCB7ZW50aXR5X25hbWV9P1xcblxcblwiXG4gICAgXCJDb250ZXh0IGZyb20geW91ciBtZW1vcmllczpcXG57cmVsZXZhbnRfbWVtb3JpZXN9XFxuXFxuXCJcbiAgICBcIkN1cnJlbnQgb2JzZXJ2YXRpb246IHtlbnRpdHlfbmFtZX0gaXMge2VudGl0eV9hY3Rpb259XFxuXFxuXCJcbiAgICBcIlJlbGF0aW9uc2hpcCB3aXRoIHtlbnRpdHlfbmFtZX0gKGJlIGNvbmNpc2UsIGlmIG5vIHJlbGF0aW9uc2hpcCBleGlzdHMsIHN0YXRlIHRoYXQgY2xlYXJseSk6XCJcbilcblxuUE9JR05BTkNZX1NDT1JJTkdfRkFMTEJBQ0tfVEVNUExBVEUgPSAoXG4gICAgXCJSYXRlIHRoZSBwb2lnbmFuY3kgb2YgdGhpcyBvYnNlcnZhdGlvbiBvbiBhIHNjYWxlIG9mIDEgdG8gMTAgKGludGVnZXIpOiB7b2JzZXJ2YXRpb259XFxuUmF0aW5nOlwiXG4pXG4uLi5cblBhdGg6IGN1c3RvbV9hZ2VudC5weVxuIyBGaWxlOiBjdXN0b21fYWdlbnQucHlcbmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lXG5mcm9tIHR5cGluZyBpbXBvcnQgVHVwbGUsIE9wdGlvbmFsLCBBbnlcbmltcG9ydCByZVxuXG5mcm9tIGxhbmdjaGFpbl9leHBlcmltZW50YWwuZ2VuZXJhdGl2ZV9hZ2VudHMuZ2VuZXJhdGl2ZV9hZ2VudCBpbXBvcnQgR2VuZXJhdGl2ZUFnZW50XG5mcm9tIGxhbmdjaGFpbi5wcm9tcHRzIGltcG9ydCBQcm9tcHRUZW1wbGF0ZVxuZnJvbSBsYW5nY2hhaW4uY2hhaW5zIGltcG9ydCBMTE1DaGFpblxuXG5mcm9tIHV0aWxzIGltcG9ydCBCQ29sb3JzXG5cbmNsYXNzIEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnQoR2VuZXJhdGl2ZUFnZW50KTpcbiAgICBkZWYgX19pbml0X18oc2VsZiwgKipkYXRhOiBBbnkpOlxuICAgICAgICBzdXBlcigpLl9faW5pdF9fKCoqZGF0YSlcbiAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuT0tHUkVFTn1ERUJVRyAoQWdlbnQge3NlbGYubmFtZX0pOiBJbml0aWFsaXplZCBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50LCBcIlxuICAgICAgICAgICAgICBmXCJ1c2luZyBiYXNlIEdlbmVyYXRpdmVBZ2VudCBsb2dpYy57QkNvbG9ycy5FTkRDfVwiKVxuXG4gICAgZGVmIGdldF9pbnRlcnByZXRlZF9yZWFjdGlvbihzZWxmLCBvYnNlcnZhdGlvbjogc3RyLCBub3c6IE9wdGlvbmFsW2RhdGV0aW1lXSA9IE5vbmUpIC0+IFR1cGxlW3N0ciwgc3RyLCBib29sXTpcbiAgICAgICAgY2FsbF90aW1lID0gbm93IG9yIGRhdGV0aW1lLm5vdygpXG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLkRJTX1ERUJVRyAoQWdlbnQge3NlbGYubmFtZX0pOiBDYWxsaW5nIHBhcmVudCdzIGdlbmVyYXRlX3JlYWN0aW9uIGZvcjogJ3tvYnNlcnZhdGlvbls6NTBdfS4uLid7QkNvbG9ycy5FTkRDfVwiKVxuXG4gICAgICAgIGlzX2RpYWxvZ3VlX2ZsYWcsIHJlc3VsdF9zdHIgPSBzdXBlcigpLmdlbmVyYXRlX3JlYWN0aW9uKG9ic2VydmF0aW9uLCBub3c9Y2FsbF90aW1lKVxuXG4gICAgICAgIGVzdGltYXRlZF9vYnNlcnZhdGlvbl9pbXBvcnRhbmNlID0gRmFsc2VcbiAgICAgICAgdHJ5OlxuICAgICAgICAgICAgaWYgc2VsZi5sbG06XG4gICAgICAgICAgICAgICAgcG9pZ25hbmN5X3Byb21wdF9zdHIgPSAoXG4gICAgICAgICAgICAgICAgICAgIFwiSXMgdGhlIGZvbGxvd2luZyBvYnNlcnZhdGlvbiBtdW5kYW5lIChlLmcuLCBicnVzaGluZyB0ZWV0aCkgb3IgcG9pZ25hbnQgKGUuZy4sIGEgbWFqb3IgbGlmZSBldmVudCk/IFwiXG4gICAgICAgICAgICAgICAgICAgIFwiQW5zd2VyIHdpdGggJ211bmRhbmUnIG9yICdwb2lnbmFudCcuXFxuT2JzZXJ2YXRpb246IHtvYnNlcnZhdGlvbl90ZXh0fVxcbkFuc3dlcjpcIlxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBwcm9tcHQgPSBQcm9tcHRUZW1wbGF0ZS5mcm9tX3RlbXBsYXRlKHBvaWduYW5jeV9wcm9tcHRfc3RyKVxuICAgICAgICAgICAgICAgIGNoYWluID0gTExNQ2hhaW4obGxtPXNlbGYubGxtLCBwcm9tcHQ9cHJvbXB0KVxuICAgICAgICAgICAgICAgIHBvaWduYW5jeV9yZXN1bHQgPSBjaGFpbi5ydW4ob2JzZXJ2YXRpb25fdGV4dD1vYnNlcnZhdGlvbikuc3RyaXAoKS5sb3dlcigpXG4gICAgICAgICAgICAgICAgaWYgXCJwb2lnbmFudFwiIGluIHBvaWduYW5jeV9yZXN1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGVzdGltYXRlZF9vYnNlcnZhdGlvbl9pbXBvcnRhbmNlID0gVHJ1ZVxuICAgICAgICAgICAgICAgIHByaW50KGZcIntCQ29sb3JzLkRJTX1ERUJVRyAoQWdlbnQge3NlbGYubmFtZX0pOiBPYnNlcnZhdGlvbiBwb2lnbmFuY3kgZXN0aW1hdGVkIGFzICd7cG9pZ25hbmN5X3Jlc3VsdH0nLCBBUEkgaW1wb3J0YW50IGZsYWc6IHtlc3RpbWF0ZWRfb2JzZXJ2YXRpb25faW1wb3J0YW5jZX17QkNvbG9ycy5FTkRDfVwiKVxuICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGVfcG9pZ25hbmN5OlxuICAgICAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuV0FSTklOR31XQVJOIChBZ2VudCB7c2VsZi5uYW1lfSk6IENvdWxkIG5vdCBlc3RpbWF0ZSBvYnNlcnZhdGlvbiBwb2lnbmFuY3kgZm9yIEFQSSBmbGFnOiB7ZV9wb2lnbmFuY3l9e0JDb2xvcnMuRU5EQ31cIilcbi4uLlxuUGF0aDogdXRpbHMucHlcbiMgRmlsZTogdXRpbHMucHlcbmNsYXNzIEJDb2xvcnM6XG4gICAgSEVBREVSID0gJ1xcMDMzWzk1bSdcbiAgICBPS0JMVUUgPSAnXFwwMzNbOTRtJ1xuICAgIE9LQ1lBTiA9ICdcXDAzM1s5Nm0nXG4gICAgT0tHUkVFTiA9ICdcXDAzM1s5Mm0nXG4gICAgV0FSTklORyA9ICdcXDAzM1s5M20nXG4gICAgRkFJTCA9ICdcXDAzM1s5MW0nXG4gICAgRU5EQyA9ICdcXDAzM1swbSdcbiAgICBCT0xEID0gJ1xcMDMzWzFtJ1xuICAgIFVOREVSTElORSA9ICdcXDAzM1s0bSdcbiAgICBESU0gPS4uLiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUJId2s2WkpvTFViaW5XYnRzSEJGRVcifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJDOi9Vc2Vycy9Ucm9uL0RvY3VtZW50cy9HaXRIdWIvZmFzdGFwaSIsImZvbGRlclJvb3QiOiJDOi9Vc2Vycy9Ucm9uL0RvY3VtZW50cy9HaXRIdWIvZmFzdGFwaSJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMDhUMTA6NTk6MzcuNDkwWiIsInJlc3BvbnNlX3RleHQiOiJMZXQgbWUgZ2F0aGVyIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHByb2plY3Qgc3RydWN0dXJlIGFuZCBhbnkgYWRkaXRpb25hbCBrZXkgZmlsZXMuXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiNWYzMjI0OWMtMzY3NS00NmI5LWE0M2ItZTRiMDJmMmM0YjQxIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiQmFzZWQgb24gdGhlIGluZm9ybWF0aW9uIEkndmUgZ2F0aGVyZWQsIEkgY2FuIG5vdyBwcm92aWRlIHlvdSB3aXRoIGEgY29tcHJlaGVuc2l2ZSBvdmVydmlldyBvZiB0aGlzIHByb2plY3Q6XG5cbiMjIFByb2plY3QgT3ZlcnZpZXdcblxuVGhpcyBpcyBhIEZhc3RBUEkgYXBwbGljYXRpb24gdGhhdCBpbXBsZW1lbnRzIGFuIFwiQXV0b25vbW91cyBHZW5lcmF0aXZlIEFnZW50IEFQSVwiLiBUaGUgcHJvamVjdCBjcmVhdGVzIGEgd2ViIHNlcnZpY2UgdGhhdCBhbGxvd3MgdXNlcnMgdG8gY3JlYXRlLCBtYW5hZ2UsIGFuZCBpbnRlcmFjdCB3aXRoIEFJIGFnZW50cyBwb3dlcmVkIGJ5IExhbmdDaGFpbiBhbmQgT3BlbkFJJ3MgbW9kZWxzLlxuXG4jIyMgS2V5IEZlYXR1cmVzXG5cbjEuICoqQXV0b25vbW91cyBBZ2VudHMqKjogVGhlIHN5c3RlbSBjcmVhdGVzIEFJIGFnZW50cyB0aGF0IGNhbjpcbiAgIC0gR2VuZXJhdGUgcmVzcG9uc2VzIHRvIG9ic2VydmF0aW9uc1xuICAgLSBNYWludGFpbiBtZW1vcnkgb2YgcGFzdCBpbnRlcmFjdGlvbnNcbiAgIC0gSGF2ZSBkaWZmZXJlbnQgcmVhY3Rpb24gdHlwZXMgKFNBWSwgVEhJTkssIERPLCBJR05PUkUpXG4gICAtIE1haW50YWluIGEgc3RhdHVzIGFuZCBwZXJzb25hbGl0eSB0cmFpdHNcblxuMi4gKipBUEkgRW5kcG9pbnRzKio6IFRoZSBhcHBsaWNhdGlvbiBwcm92aWRlcyBSRVNUZnVsIGVuZHBvaW50cyB0bzpcbiAgIC0gQ3JlYXRlIG5ldyBhZ2VudHNcbiAgIC0gTGlzdCBleGlzdGluZyBhZ2VudHNcbiAgIC0gR2VuZXJhdGUgcmVzcG9uc2VzIGZyb20gYWdlbnRzXG4gICAtIEFkZCBtZW1vcmllcyB0byBhZ2VudHNcbiAgIC0gRmV0Y2ggbWVtb3JpZXMgZnJvbSBhZ2VudHNcbiAgIC0gR2V0IGFnZW50IHN1bW1hcmllc1xuICAgLSBVcGRhdGUgYWdlbnQgc3RhdHVzXG5cbjMuICoqVGVjaG5vbG9neSBTdGFjayoqOlxuICAgLSAqKkZhc3RBUEkqKjogV2ViIGZyYW1ld29yayBmb3IgYnVpbGRpbmcgdGhlIEFQSVxuICAgLSAqKkxhbmdDaGFpbioqOiBGcmFtZXdvcmsgZm9yIHdvcmtpbmcgd2l0aCBsYW5ndWFnZSBtb2RlbHNcbiAgIC0gKipPcGVuQUkqKjogUHJvdmlkZXIgZm9yIHRoZSBsYW5ndWFnZSBtb2RlbHMgYW5kIGVtYmVkZGluZ3NcbiAgIC0gKipGQUlTUyoqOiBWZWN0b3IgZGF0YWJhc2UgZm9yIHN0b3JpbmcgYW5kIHJldHJpZXZpbmcgYWdlbnQgbWVtb3JpZXNcbiAgIC0gKipQeWRhbnRpYyoqOiBGb3IgZGF0YSB2YWxpZGF0aW9uIGFuZCBzY2hlbWEgZGVmaW5pdGlvblxuXG4jIyMgQXJjaGl0ZWN0dXJlXG5cblRoZSBwcm9qZWN0IGZvbGxvd3MgYSBtb2R1bGFyIGFyY2hpdGVjdHVyZTpcblxuMS4gKipNYWluIEFwcGxpY2F0aW9uKiogKGBtYWluLnB5YCk6IEVudHJ5IHBvaW50IHRoYXQgc2V0cyB1cCB0aGUgRmFzdEFQSSBhcHBsaWNhdGlvbiBhbmQgaW5jbHVkZXMgcm91dGVyc1xuMi4gKipSb3V0ZXJzKiogKGByb3V0ZXJzL2FnZW50X3JvdXRlci5weWApOiBEZWZpbmVzIEFQSSBlbmRwb2ludHMgYW5kIHJlcXVlc3QgaGFuZGxpbmdcbjMuICoqQWdlbnQgRmFjdG9yeSoqIChgYWdlbnRfZmFjdG9yeS5weWApOiBDcmVhdGVzIGFnZW50IGluc3RhbmNlcyB3aXRoIGFwcHJvcHJpYXRlIGNvbmZpZ3VyYXRpb25cbjQuICoqQ3VzdG9tIEFnZW50KiogKGBjdXN0b21fYWdlbnQucHlgKTogRXh0ZW5kcyBMYW5nQ2hhaW4ncyBHZW5lcmF0aXZlQWdlbnQgd2l0aCBjdXN0b20gZnVuY3Rpb25hbGl0eVxuNS4gKipTY2hlbWFzKiogKGBzY2hlbWFzLnB5YCk6IERlZmluZXMgZGF0YSBtb2RlbHMgZm9yIHJlcXVlc3RzIGFuZCByZXNwb25zZXNcbjYuICoqUHJvbXB0cyoqIChgcHJvbXB0cy5weWApOiBDb250YWlucyB0ZW1wbGF0ZXMgZm9yIGFnZW50IHByb21wdHNcbjcuICoqQ29uZmlnKiogKGBjb25maWcucHlgKTogQ29uZmlndXJhdGlvbiBzZXR0aW5ncyBhbmQgZW52aXJvbm1lbnQgdmFyaWFibGUgaGFuZGxpbmdcbjguICoqVXRpbHMqKiAoYHV0aWxzLnB5YCk6IFV0aWxpdHkgZnVuY3Rpb25zIGFuZCBjbGFzc2VzXG5cbiMjIyBEZXBsb3ltZW50XG5cblRoZSBwcm9qZWN0IGlzIHNldCB1cCB0byBiZSBkZXBsb3llZCBvbiBSZW5kZXIgKGEgY2xvdWQgcGxhdGZvcm0pOlxuLSBgcmVuZGVyLnlhbWxgIGRlZmluZXMgdGhlIHNlcnZpY2UgY29uZmlndXJhdGlvblxuLSBUaGUgUkVBRE1FIHByb3ZpZGVzIGluc3RydWN0aW9ucyBmb3IgZGVwbG95aW5nIHRvIFJlbmRlclxuLSBUaGUgYXBwbGljYXRpb24gaXMgY29uZmlndXJlZCB0byB1c2UgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZvciBjb25maWd1cmF0aW9uXG5cbiMjIyBLZXkgRGVwZW5kZW5jaWVzXG5cbi0gRmFzdEFQSSBhbmQgaXRzIGRlcGVuZGVuY2llc1xuLSBMYW5nQ2hhaW4gYW5kIGl0cyBleHBlcmltZW50YWwgbW9kdWxlcyAoZm9yIGdlbmVyYXRpdmUgYWdlbnRzKVxuLSBPcGVuQUkncyBBUEkgKHJlcXVpcmVzIGFuIEFQSSBrZXkpXG4tIEZBSVNTIGZvciB2ZWN0b3Igc3RvcmFnZSBhbmQgcmV0cmlldmFsXG4tIFZhcmlvdXMgUHl0aG9uIHV0aWxpdGllc1xuXG4jIyMgUnVubmluZyB0aGUgQXBwbGljYXRpb25cblxuVG8gcnVuIHRoZSBhcHBsaWNhdGlvbiBsb2NhbGx5OlxuMS4gU2V0IHVwIHRoZSByZXF1aXJlZCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgKGVzcGVjaWFsbHkgYE9QRU5BSV9BUElfS0VZYClcbjIuIEluc3RhbGwgZGVwZW5kZW5jaWVzIHdpdGggYHBpcCBpbnN0YWxsIC1yIHJlcXVpcmVtZW50cy50eHRgXG4zLiBSdW4gdGhlIHNlcnZlciB3aXRoIGB1dmljb3JuIG1haW46YXBwIC0tcmVsb2FkYFxuXG5UaGUgYXBwbGljYXRpb24gd2lsbCBzdGFydCBhIHdlYiBzZXJ2ZXIgdGhhdCBleHBvc2VzIHRoZSBBUEkgZW5kcG9pbnRzIGZvciBjcmVhdGluZyBhbmQgaW50ZXJhY3Rpbmcgd2l0aCBhdXRvbm9tb3VzIGFnZW50cy5cblxuIyMjIE5vdGFibGUgRmVhdHVyZXNcblxuMS4gKipNZW1vcnkgTWFuYWdlbWVudCoqOiBBZ2VudHMgc3RvcmUgbWVtb3JpZXMgaW4gYSB2ZWN0b3IgZGF0YWJhc2UgKEZBSVNTKSBhbmQgY2FuIHJldHJpZXZlIHJlbGV2YW50IG1lbW9yaWVzIGJhc2VkIG9uIG9ic2VydmF0aW9uc1xuMi4gKipSZWFjdGlvbiBHZW5lcmF0aW9uKio6IEFnZW50cyBjYW4gZ2VuZXJhdGUgZGlmZmVyZW50IHR5cGVzIG9mIHJlYWN0aW9ucyAoU0FZLCBUSElOSywgRE8sIElHTk9SRSkgYmFzZWQgb24gdGhlaXIgcGVyc29uYWxpdHkgYW5kIG1lbW9yaWVzXG4zLiAqKkVudGl0eSBSZWNvZ25pdGlvbioqOiBUaGUgc3lzdGVtIGNhbiBpZGVudGlmeSBlbnRpdGllcyBpbiBvYnNlcnZhdGlvbnMgYW5kIHRyYWNrIHJlbGF0aW9uc2hpcHMgd2l0aCB0aGVtXG40LiAqKkltcG9ydGFuY2UgRXN0aW1hdGlvbioqOiBUaGUgc3lzdGVtIGVzdGltYXRlcyB0aGUgaW1wb3J0YW5jZSBvZiBvYnNlcnZhdGlvbnMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgc2hvdWxkIGJlIHJlbWVtYmVyZWRcblxuVGhpcyBwcm9qZWN0IGVzc2VudGlhbGx5IGNyZWF0ZXMgYSBmcmFtZXdvcmsgZm9yIGJ1aWxkaW5nIGFuZCBpbnRlcmFjdGluZyB3aXRoIEFJIGFnZW50cyB0aGF0IGhhdmUgbWVtb3J5LCBwZXJzb25hbGl0eSwgYW5kIHRoZSBhYmlsaXR5IHRvIHJlYWN0IHRvIG9ic2VydmF0aW9ucyBpbiBhIHdheSB0aGF0J3MgY29uc2lzdGVudCB3aXRoIHRoZWlyIGRlZmluZWQgY2hhcmFjdGVyaXN0aWNzLlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogbWFpbi5weVxuIyBGaWxlOiBtYWluLnB5XG5mcm9tIGZhc3RhcGkgaW1wb3J0IEZhc3RBUElcblxuZnJvbSB1dGlscyBpbXBvcnQgQkNvbG9ycyAjIEltcG9ydCBmcm9tIG5ldyB1dGlsc1xuZnJvbSBjb25maWcgaW1wb3J0IE9QRU5BSV9BUElfS0VZX1NFVCAjIEltcG9ydCBmcm9tIG5ldyBjb25maWdcbmZyb20gcm91dGVycyBpbXBvcnQgYWdlbnRfcm91dGVyICMgSW1wb3J0IHRoZSBuZXcgcm91dGVyXG4jIFRoZSBnbG9iYWwgYWdlbnRzX2RiIGlzIG5vdyBpbiByb3V0ZXJzLmFnZW50X3JvdXRlclxuXG5hcHAgPSBGYXN0QVBJKHRpdGxlPVwiQXV0b25vbW91cyBHZW5lcmF0aXZlLUFnZW50IEFQSSB2MlwiKSAjIFVwZGF0ZWQgdGl0bGVcblxucHJpbnQoZlwie0JDb2xvcnMuT0tHUkVFTn1ERUJVRzogRmFzdEFQSSBhcHBsaWNhdGlvbiBzdGFydGluZyB1cC4uLiAoVXNpbmcgQXV0b25vbW91cyBBZ2VudHMgLSBSZWZhY3RvcmVkKXtCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG5cbiMgLS0tIEFQSSBLZXkgQ2hlY2sgLS0tXG5pZiBub3QgT1BFTkFJX0FQSV9LRVlfU0VUOlxuICAgIHByaW50KGZcIntCQ29sb3JzLkZBSUx9Q1JJVElDQUxfV0FSTklORzogT1BFTkFJX0FQSV9LRVkgZW52aXJvbm1lbnQgdmFyaWFibGUgaXMgTk9UIFNFVC4gT3BlbkFJIGNhbGxzIGxpa2VseSBmYWlsLntCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG5lbHNlOlxuICAgIHByaW50KGZcIntCQ29sb3JzLk9LR1JFRU59REVCVUc6IE9QRU5BSV9BUElfS0VZIGVudmlyb25tZW50IHZhcmlhYmxlIGlzIGRldGVjdGVkLntCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG5cblxuIyAtLS0gSGVhbHRoIENoZWNrIC0tLVxuQGFwcC5nZXQoXCIvXCIpXG5hc3luYyBkZWYgaGVhbHRoX2NoZWNrKCk6XG4gICAgcHJpbnQoZlwie0JDb2xvcnMuT0tHUkVFTn1ERUJVRzogSGVhbHRoIGNoZWNrICcvJyBlbmRwb2ludCBoaXQue0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICByZXR1cm4ge1wic3RhdHVzXCI6IFwib2tcIiwgXCJtZXNzYWdlXCI6IFwiQXV0b25vbW91cyBBZ2VudCBBUEkgaXMgcnVubmluZy5cIn1cblxuIyAtLS0gSW5jbHVkZSBSb3V0ZXJzIC0tLVxuYXBwLmluY2x1ZGVfcm91dGVyKGFnZW50X3JvdXRlci5yb3V0ZXIpICMgQWRkIHRoZSBhZ2VudCByb3V0ZXNcblxuIyAtLS0gR2xvYmFsIEFnZW50IFN0b3JhZ2UgKG1hbmFnZWQgd2l0aGluIGFnZW50X3JvdXRlci5weSBub3cpIC0tLVxuIyBUaGUgYGFnZW50c19kYmAgZGljdGlvbmFyeSBpcyBub3cgbWFuYWdlZCB3aXRoaW4gYHJvdXRlcnMvYWdlbnRfcm91dGVyLnB5YFxuIyBUaGlzIGtlZXBzIGl0IGNsb3NlciB0byB0aGUgb3BlcmF0aW9ucyB0aGF0IHVzZSBpdC5cbiMgSWYgeW91IG5lZWQgdG8gYWNjZXNzIGl0IGZyb20gYG1haW4ucHlgIGZvciBvdGhlciByZWFzb25zIChlLmcuIHN0YXJ0dXAvc2h1dGRvd24gZXZlbnRzKSxcbiMgeW91IGNvdWxkIGltcG9ydCBpdDogYGZyb20gcm91dGVycy5hZ2VudF9yb3V0ZXIgaW1wb3J0IGFnZW50c19kYmBcbiMgT3IgcGFzcyBgYXBwLnN0YXRlLmFnZW50c19kYmAgYXJvdW5kIGlmIHlvdSBwcmVmZXIgdGhhdCBwYXR0ZXJuLlxuXG5wcmludChmXCJ7QkNvbG9ycy5PS0dSRUVOfURFQlVHOiBGYXN0QVBJIGFwcGxpY2F0aW9uIGZpbmlzaGVkIGxvYWRpbmcuIChVc2luZyBBdXRvbm9tb3VzIEFnZW50cyAtIFJlZmFjdG9yZWQpe0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcblxuIyBUbyBydW46IHV2aWNvcm4gbWFpbjphcHAgLS1yZWxvYWRcbiMgRW5zdXJlIFB5dGhvbidzIGltcG9ydCBzeXN0ZW0gY2FuIGZpbmQgeW91ciBtb2R1bGVzIChlLmcuLCByb3V0ZXJzLmFnZW50X3JvdXRlcilcbiMgSWYgcnVubmluZyBmcm9tIHRoZSBwcm9qZWN0IHJvb3QsIGFuZCBgcm91dGVyc2AgaXMgYSBzdWJkaXJlY3RvcnksIGl0IHNob3VsZCB3b3JrLlxuLi4uXG5QYXRoOiBSRUFETUUubWRcbiMgRGVwbG95IEZhc3RBUEkgb24gUmVuZGVyXG5cblVzZSB0aGlzIHJlcG8gYXMgYSB0ZW1wbGF0ZSB0byBkZXBsb3kgYSBQeXRob24gW0Zhc3RBUEldKGh0dHBzOi8vZmFzdGFwaS50aWFuZ29sby5jb20pIHNlcnZpY2Ugb24gUmVuZGVyLlxuXG5TZWUgaHR0cHM6Ly9yZW5kZXIuY29tL2RvY3MvZGVwbG95LWZhc3RhcGkgb3IgZm9sbG93IHRoZSBzdGVwcyBiZWxvdzpcblxuIyMgTWFudWFsIFN0ZXBzXG5cbjEuIFlvdSBtYXkgdXNlIHRoaXMgcmVwb3NpdG9yeSBkaXJlY3RseSBvciBbY3JlYXRlIHlvdXIgb3duIHJlcG9zaXRvcnkgZnJvbSB0aGlzIHRlbXBsYXRlXShodHRwczovL2dpdGh1Yi5jb20vcmVuZGVyLWV4YW1wbGVzL2Zhc3RhcGkvZ2VuZXJhdGUpIGlmIHlvdSdkIGxpa2UgdG8gY3VzdG9taXplIHRoZSBjb2RlLlxuMi4gQ3JlYXRlIGEgbmV3IFdlYiBTZXJ2aWNlIG9uIFJlbmRlci5cbjMuIFNwZWNpZnkgdGhlIFVSTCB0byB5b3VyIG5ldyByZXBvc2l0b3J5IG9yIHRoaXMgcmVwb3NpdG9yeS5cbjQuIFJlbmRlciB3aWxsIGF1dG9tYXRpY2FsbHkgZGV0ZWN0IHRoYXQgeW91IGFyZSBkZXBsb3lpbmcgYSBQeXRob24gc2VydmljZSBhbmQgdXNlIGBwaXBgIHRvIGRvd25sb2FkIHRoZSBkZXBlbmRlbmNpZXMuXG41LiBTcGVjaWZ5IHRoZSBmb2xsb3dpbmcgYXMgdGhlIFN0YXJ0IENvbW1hbmQuXG5cbiAgICBgYGBzaGVsbFxuICAgIHV2aWNvcm4gbWFpbjphcHAgLS1ob3N0IDAuMC4wLjAgLS1wb3J0ICRQT1JUXG4gICAgYGBgXG5cbjYuIENsaWNrIENyZWF0ZSBXZWIgU2VydmljZS5cblxuT3Igc2ltcGx5IGNsaWNrOlxuXG5bIVtEZXBsb3kgdG8gUmVuZGVyXShodHRwczovL3JlbmRlci5jb20vaW1hZ2VzL2RlcGxveS10by1yZW5kZXItYnV0dG9uLnN2ZyldKGh0dHBzOi8vcmVuZGVyLmNvbS9kZXBsb3k/cmVwbz1odHRwczovL2dpdGh1Yi5jb20vcmVuZGVyLWV4YW1wbGVzL2Zhc3RhcGkpXG5cbiMjIFRoYW5rc1xuXG5UaGFua3MgdG8gW0hhcmlzaF0oaHR0cHM6Ly9oYXJpc2hnYXJnLmNvbSkgZm9yIHRoZSBbaW5zcGlyYXRpb24gdG8gY3JlYXRlIGEgRmFzdEFQSSBxdWlja3N0YXJ0IGZvciBSZW5kZXJdKGh0dHBzOi8vdHdpdHRlci5jb20vaGFyaXNoa2dhcmcvc3RhdHVzLzE0MzUwODQwMTg2NzcwMTA0MzQpIGFuZCBmb3Igc29tZSBzYW1wbGUgY29kZSEuLi5cblBhdGg6IHJlbmRlci55YW1sXG5zZXJ2aWNlczpcbiAgIyBBIERvY2tlciB3ZWIgc2VydmljZVxuICAtIHR5cGU6IHdlYlxuICAgIG5hbWU6IGZhc3RhcGktZXhhbXBsZVxuICAgIHJ1bnRpbWU6IHB5dGhvblxuICAgIHBsYW46IGZyZWVcbiAgICBhdXRvRGVwbG95OiBmYWxzZVxuICAgIGJ1aWxkQ29tbWFuZDogcGlwIGluc3RhbGwgLXIgcmVxdWlyZW1lbnRzLnR4dFxuICAgIHN0YXJ0Q29tbWFuZDogdXZpY29ybiBtYWluOmFwcCAtLWhvc3QgMC4wLjAuMCAtLXBvcnQgJFBPUlRcbi4uLlxuUGF0aDogLmdpdGlnbm9yZVxuIyBCeXRlLWNvbXBpbGVkIC8gb3B0aW1pemVkIC8gRExMIGZpbGVzXG5fX3B5Y2FjaGVfXy9cbioucHlbY29kXVxuKiRweS5jbGFzc1xuXG4jIEMgZXh0ZW5zaW9uc1xuKi5zb1xuXG4jIERpc3RyaWJ1dGlvbiAvIHBhY2thZ2luZ1xuLlB5dGhvblxuYnVpbGQvXG5kZXZlbG9wLWVnZ3MvXG5kaXN0L1xuZG93bmxvYWRzL1xuZWdncy9cbi5lZ2dzL1xubGliL1xubGliNjQvXG5wYXJ0cy9cbnNkaXN0L1xudmFyL1xud2hlZWxzL1xuKi5lZ2ctaW5mby9cbi5pbnN0YWxsZWQuY2ZnXG4qLmVnZ1xuTUFOSUZFU1RcblxuIyBQeUluc3RhbGxlclxuIyAgVXN1YWxseSB0aGVzZSBmaWxlcyBhcmUgd3JpdHRlbiBieSBhIHB5dGhvbiBzY3JpcHQgZnJvbSBhIHRlbXBsYXRlXG4jICBiZWZvcmUgUHlJbnN0YWxsZXIgYnVpbGRzIHRoZSBleGUsIHNvIGFzIHRvIGluamVjdCBkYXRlL290aGVyIGluZm9zIGludG8gaXQuXG4qLm1hbmlmZXN0XG4qLnNwZWNcblxuIyBJbnN0YWxsZXIgbG9nc1xucGlwLWxvZy50eHRcbnBpcC1kZWxldGUtdGhpcy1kaXJlY3RvcnkudHh0XG5cbiMgVW5pdCB0ZXN0IC8gY292ZXJhZ2UgcmVwb3J0c1xuaHRtbGNvdi9cbi50b3gvXG4uY292ZXJhZ2Vcbi5jb3ZlcmFnZS4qXG4uY2FjaGVcbm5vc2V0ZXN0cy54bWxcbmNvdmVyYWdlLnhtbFxuKi5jb3ZlclxuLmh5cG90aGVzaXMvXG4ucHl0ZXN0X2NhY2hlL1xuXG4jIFRyYW5zbGF0aW9uc1xuKi5tb1xuKi5wb3RcblxuIyBEamFuZ28gc3R1ZmY6XG4qLmxvZ1xubG9jYWxfc2V0dGluZ3MucHlcbmRiLnNxbGl0ZTNcblxuIyBGbGFzayBzdHVmZjpcbmluc3RhbmNlL1xuLndlYmFzc2V0cy1jYWNoZVxuXG4jIFNjcmFweSBzdHVmZjpcbi5zY3JhcHlcblxuIyBTcGhpbnggZG9jdW1lbnRhdGlvblxuZG9jcy9fYnVpbGQvXG5cbiMgUHlCdWlsZGVyXG50YXJnZXQvXG5cbiMgSnVweXRlciBOb3RlYm9va1xuLmlweW5iX2NoZWNrcG9pbnRzXG5cbiMgcHllbnZcbi5weXRob24tdmVyc2lvblxucHl2ZW52LmNmZ1xuXG4jIGNlbGVyeSBiZWF0IHNjaGVkdWxlIGZpbGVcbmNlbGVyeWJlYXQtc2NoZWR1bGVcblxuIyBTYWdlTWF0aCBwYXJzZWQgZmlsZXNcbiouc2FnZS5weVxuXG4jIEVudmlyb25tZW50c1xuLmVudlxuLnZlbnZcbmVudi9cbnZlbnYvXG5FTlYvXG5lbnYuYmFrL1xudmVudi5iYWsvXG5cbiMgU3B5ZGVyIHByb2plY3Qgc2V0dGluZ3Ncbi5zcHlkZXJwcm9qZWN0XG4uc3B5cHJvamVjdFxuXG4jIFJvcGUgcHJvamVjdCBzZXR0aW5nc1xuLnJvcGVwcm9qZWN0XG5cbiMgbWtkb2NzIGRvY3VtZW50YXRpb25cbi9zaXRlXG5cbiMgbXlweVxuLm15cHlfY2FjaGUvXG5cbiMgTWFjIE9TXG4uRFNfU3RvcmVcbi4uLlxuUGF0aDogYWdlbnRfZmFjdG9yeS5weVxuIyBGaWxlOiBhZ2VudF9mYWN0b3J5LnB5XG5pbXBvcnQgdHJhY2ViYWNrXG5mcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWxcblxuaW1wb3J0IGZhaXNzXG5mcm9tIGZhc3RhcGkgaW1wb3J0IEhUVFBFeGNlcHRpb25cbmZyb20gbGFuZ2NoYWluX29wZW5haSBpbXBvcnQgQ2hhdE9wZW5BSSwgT3BlbkFJRW1iZWRkaW5nc1xuZnJvbSBsYW5nY2hhaW5fY29tbXVuaXR5LnZlY3RvcnN0b3JlcyBpbXBvcnQgRkFJU1NcbmZyb20gbGFuZ2NoYWluX2NvbW11bml0eS5kb2NzdG9yZS5pbl9tZW1vcnkgaW1wb3J0IEluTWVtb3J5RG9jc3RvcmVcbmZyb20gbGFuZ2NoYWluLnJldHJpZXZlcnMgaW1wb3J0IFRpbWVXZWlnaHRlZFZlY3RvclN0b3JlUmV0cmlldmVyXG5mcm9tIGxhbmdjaGFpbl9leHBlcmltZW50YWwuZ2VuZXJhdGl2ZV9hZ2VudHMgaW1wb3J0IEdlbmVyYXRpdmVBZ2VudE1lbW9yeVxuZnJvbSBsYW5nY2hhaW5fY29tbXVuaXR5LnZlY3RvcnN0b3Jlcy51dGlscyBpbXBvcnQgRGlzdGFuY2VTdHJhdGVneVxuXG5mcm9tIGN1c3RvbV9hZ2VudCBpbXBvcnQgQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudFxuZnJvbSB1dGlscyBpbXBvcnQgQkNvbG9yc1xuZnJvbSBjb25maWcgaW1wb3J0IERFRkFVTFRfQ0hBVF9NT0RFTCwgREVGQVVMVF9FTUJFRERJTkdfTU9ERUxcblxuXG5kZWYgY3JlYXRlX25ld19hZ2VudF9pbnN0YW5jZShcbiAgICBuYW1lOiBzdHIsXG4gICAgYWdlOiBpbnQsXG4gICAgdHJhaXRzOiBzdHIsXG4gICAgc3RhdHVzOiBzdHIsXG4gICAgc3VtbWFyeV9yZWZyZXNoX3NlY29uZHM6IGludCxcbiAgICByZWZsZWN0aW9uX3RocmVzaG9sZDogaW50LFxuICAgIHZlcmJvc2U6IGJvb2wsXG4gICAgbGxtX21vZGVsX25hbWU6IE9wdGlvbmFsW3N0cl0gPSBOb25lLFxuICAgIGVtYmVkZGluZ19tb2RlbF9uYW1lOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuKSAtPiBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50OlxuICAgIHByaW50KGZcIntCQ29sb3JzLk9LQkxVRX1ERUJVRzogY3JlYXRlX25ld19hZ2VudF9pbnN0YW5jZSBjYWxsZWQgZm9yIGFnZW50ICd7QkNvbG9ycy5CT0xEfXtuYW1lfXtCQ29sb3JzLkVOREN9e0JDb2xvcnMuT0tCTFVFfSd7QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuLi4uXG5cbiAgICBlZmZlY3RpdmVfZW1iZWRkaW5nX21vZGVsID0gZW1iZWRkaW5nX21vZGVsX25hbWUgaWYgZW1iZWRkaW5nX21vZGVsX25hbWUgYW5kIGVtYmVkZGluZ19tb2RlbF9uYW1lLnN0cmlwKCkgZWxzZSBERUZBVUxUX0VNQkVERElOR19NT0RFTFxuICAgIGRpbSA9IDBcbiAgICB0cnk6XG4gICAgICAgIGFnZW50X2VtYmVkZGluZ3MgPSBPcGVuQUlFbWJlZGRpbmdzKG1vZGVsPWVmZmVjdGl2ZV9lbWJlZGRpbmdfbW9kZWwpXG4gICAgICAgIHByb2JlX2Zvcl9kaW0gPSBhZ2VudF9lbWJlZGRpbmdzLmVtYmVkX3F1ZXJ5KFwiZ2V0X2RpbV9wcm9iZV9mb3JfYWdlbnRcIilcbiAgICAgICAgZGltID0gbGVuKHByb2JlX2Zvcl9kaW0pXG4gICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5GQUlMfUVSUk9SX1NUQUNLVFJBQ0U6IEZhaWxlZCB0byBpbml0aWFsaXplIG9yIHRlc3QgT3BlbkFJRW1iZWRkaW5ncyBmb3IgYWdlbnQgJ3tuYW1lfScgd2l0aCBtb2RlbCAne2VmZmVjdGl2ZV9lbWJlZGRpbmdfbW9kZWx9Jzoge2V9e0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICAgICAgdHJhY2ViYWNrLnByaW50X2V4YygpXG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZlwiRmFpbGVkIHRvIGluaXRpYWxpemUvdGVzdCBlbWJlZGRpbmdzIHdpdGggbW9kZWwgJ3tlZmZlY3RpdmVfZW1iZWRkaW5nX21vZGVsfSc6IHtlfVwiKVxuXG4gICAgcHJpbnQoZlwie0JDb2xvcnMuRElNfURFQlVHOiBTZXR0aW5nIHVwIEZBSVNTIGluZGV4IGZvciBhZ2VudCAne25hbWV9JyAoZGltOiB7ZGltfSkuIFVzaW5nIElubmVyIFByb2R1Y3QgKGZvciBDb3NpbmUpLntCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgdHJ5OlxuICAgICAgICBpbmRleCA9IGZhaXNzLkluZGV4RmxhdElQKGRpbSlcbiAgICAgICAgdmVjdG9yc3RvcmUgPSBGQUlTUyhcbiAgICAgICAgICAgIGVtYmVkZGluZ19mdW5jdGlvbj1hZ2VudF9lbWJlZGRpbmdzLFxuICAgICAgICAgICAgaW5kZXg9aW5kZXgsXG4gICAgICAgICAgICBkb2NzdG9yZT1Jbk1lbW9yeURvY3N0b3JlKHt9KSxcbiAgICAgICAgICAgIGluZGV4X3RvX2RvY3N0b3JlX2lkPXt9LFxuICAgICAgICAgICAgbm9ybWFsaXplX0wyPVRydWUsXG4gICAgICAgICAgICBkaXN0YW5jZV9zdHJhdGVneT1EaXN0YW5jZVN0cmF0ZWd5Lk1BWF9JTk5FUl9QUk9EVUNUXG4gICAgICAgIClcbiAgICAgICAgcmV0cmlldmVyID0gVGltZVdlaWdodGVkVmVjdG9yU3RvcmVSZXRyaWV2ZXIoXG4gICAgICAgICAgICB2ZWN0b3JzdG9yZT12ZWN0b3JzdG9yZSwgaz0xNSwgZGVjYXlfcmF0ZT0wLjAxXG4gICAgICAgIClcbiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLkZBSUx9RVJST1JfU1RBQ0tUUkFDRTogRmFpbGVkIGR1cmluZyBGQUlTUyBzZXR1cCBmb3IgYWdlbnQgJ3tuYW1lfSc6IHtlfXtCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgICAgIHRyYWNlYmFjay5wcmludF9leGMoKVxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTUwMCwgZGV0YWlsPWZcIkZhaWxlZCBkdXJpbmcgRkFJU1Mgc2V0dXA6IHtlfVwiKVxuLi4uXG5QYXRoOiByZXF1aXJlbWVudHMudHh0XG4jIGNvcmUgd2ViIGZyYW1ld29ya1xuZmFzdGFwaVthbGxdXG5cbiMgTGFuZ0NoYWluIHByaW1pdGl2ZXNcbmxhbmdjaGFpbn49MC4yICAgICAgICAgICMgY29yZVxubGFuZ2NoYWluLWV4cGVyaW1lbnRhbH49MC4yICAjIGNvbnRhaW5zIGdlbmVyYXRpdmVfYWdlbnRzXG5sYW5nY2hhaW4tY29tbXVuaXR5fj0wLjJcbmxhbmdjaGFpbi1vcGVuYWl+PTAuMSAgIyBob3VzZXMgQ2hhdE9wZW5BSSAmIE9wZW5BSUVtYmVkZGluZ3NcblxuIyBMTE0gKyBlbWJlZGRpbmdzIChwaWNrIHRoZSBwcm92aWRlciB5b3XigJlsbCByZWFsbHkgdXNlKVxub3BlbmFpPj0xLjI1LjBcbnRpa3Rva2VuPj0wLjYuMFxuXG4jIHNpbXBsZSBpbuKAkXByb2Nlc3MgdmVjdG9yIHN0b3JlIGZvciBhZ2VudCBtZW1vcnlcbmZhaXNzLWNwdT49MS44LjBcbi4uLlxuUGF0aDogcm91dGVycy9hZ2VudF9yb3V0ZXIucHlcbiMgRmlsZTogcm91dGVycy9hZ2VudF9yb3V0ZXIucHlcbmltcG9ydCB0cmFjZWJhY2tcbmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lXG5mcm9tIHR5cGluZyBpbXBvcnQgRGljdCwgTGlzdCwgQW55LCBUdXBsZVxuZnJvbSB1dWlkIGltcG9ydCB1dWlkNFxuaW1wb3J0IG51bXB5IGFzIG5wXG5cbmZyb20gZmFzdGFwaSBpbXBvcnQgQVBJUm91dGVyLCBIVFRQRXhjZXB0aW9uXG5mcm9tIGxhbmdjaGFpbl9jb3JlLmRvY3VtZW50cyBpbXBvcnQgRG9jdW1lbnQgIyBSZXF1aXJlZCBmb3IgZmV0Y2hfbWVtb3JpZXMgdHlwZSBoaW50XG5cbmZyb20gY3VzdG9tX2FnZW50IGltcG9ydCBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50XG5mcm9tIGFnZW50X2ZhY3RvcnkgaW1wb3J0IGNyZWF0ZV9uZXdfYWdlbnRfaW5zdGFuY2VcbmZyb20gc2NoZW1hcyBpbXBvcnQgKFxuICAgIENyZWF0ZUFnZW50UmVxLCBHZW5lcmF0ZVJlc3BvbnNlUmVxLCBHZW5lcmF0ZVJlYWN0aW9uUmVzcG9uc2UsIEFkZE1lbW9yeVJlcSxcbiAgICBGZXRjaE1lbW9yaWVzUmVxLCBVcGRhdGVTdGF0dXNSZXEsIEFnZW50TGlzdFJlc3BvbnNlLCBBZ2VudERldGFpbCxcbiAgICBBZ2VudENyZWF0aW9uUmVzcG9uc2UsIEFkZGVkTWVtb3J5UmVzcG9uc2UsIEZldGNoZWRNZW1vcmllc1Jlc3BvbnNlLFxuICAgIEZldGNoZWRNZW1vcmllc0RvY3VtZW50LCBBZ2VudFN1bW1hcnlSZXNwb25zZSwgRGVsZXRlZEFnZW50UmVzcG9uc2VcbilcbmZyb20gdXRpbHMgaW1wb3J0IEJDb2xvcnNcblxucm91dGVyID0gQVBJUm91dGVyKFxuICAgIHByZWZpeD1cIi9hZ2VudHNcIixcbiAgICB0YWdzPVtcImFnZW50c1wiXVxuKVxuXG5hZ2VudHNfZGI6IERpY3Rbc3RyLCBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50XSA9IHt9XG5cblxuZGVmIGdldF9hZ2VudF9tb2RlbF9kZXRhaWxzKGFnZW50OiBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50KSAtPiBUdXBsZVtzdHIsIHN0cl06XG4gICAgbGxtX21vZGVsX3VzZWQgPSBcInVua25vd25cIlxuICAgIGVtYmVkZGluZ19tb2RlbF91c2VkID0gXCJ1bmtub3duXCJcbiAgICBpZiBhZ2VudDpcbiAgICAgICAgaWYgaGFzYXR0cihhZ2VudCwgJ2xsbScpIGFuZCBhZ2VudC5sbG0gYW5kIGhhc2F0dHIoYWdlbnQubGxtLCAnbW9kZWxfbmFtZScpOlxuICAgICAgICAgICAgbGxtX21vZGVsX3VzZWQgPSBhZ2VudC5sbG0ubW9kZWxfbmFtZVxuICAgICAgICBpZiAoaGFzYXR0cihhZ2VudCwgJ21lbW9yeScpIGFuZCBhZ2VudC5tZW1vcnkgYW5kXG4gICAgICAgICAgICBoYXNhdHRyKGFnZW50Lm1lbW9yeSwgJ21lbW9yeV9yZXRyaWV2ZXInKSBhbmQgYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXIgYW5kXG4gICAgICAgICAgICBoYXNhdHRyKGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyLCAndmVjdG9yc3RvcmUnKSBhbmQgYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXIudmVjdG9yc3RvcmUgYW5kXG4gICAgICAgICAgICBoYXNhdHRyKGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyLnZlY3RvcnN0b3JlLCAnZW1iZWRkaW5nX2Z1bmN0aW9uJykgYW5kXG4gICAgICAgICAgICBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlci52ZWN0b3JzdG9yZS5lbWJlZGRpbmdfZnVuY3Rpb24gYW5kXG4gICAgICAgICAgICBoYXNhdHRyKGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyLnZlY3RvcnN0b3JlLmVtYmVkZGluZ19mdW5jdGlvbiwgJ21vZGVsJykpOlxuICAgICAgICAgICAgZW1iZWRkaW5nX21vZGVsX3VzZWQgPSBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlci52ZWN0b3JzdG9yZS5lbWJlZGRpbmdfZnVuY3Rpb24ubW9kZWxcbiAgICByZXR1cm4gbGxtX21vZGVsX3VzZWQsIGVtYmVkZGluZ19tb2RlbF91c2VkXG5cblxuQHJvdXRlci5wb3N0KFwiXCIsIHN0YXR1c19jb2RlPTIwMSwgcmVzcG9uc2VfbW9kZWw9QWdlbnRDcmVhdGlvblJlc3BvbnNlKVxuZGVmIGNyZWF0ZV9hZ2VudF9lbmRwb2ludChyZXE6IENyZWF0ZUFnZW50UmVxKTpcbiAgICBwcmludChmXCJ7QkNvbG9ycy5IRUFERVJ9REVCVUc6IC9hZ2VudHMgUE9TVCByZXF1ZXN0IHJlY2VpdmVkOiB7cmVxLm1vZGVsX2R1bXBfanNvbihleGNsdWRlX25vbmU9VHJ1ZSl9e0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICBhaWQgPSByZXEuYWdlbnRfaWQgb3Igc3RyKHV1aWQ0KCkpXG4gICAgaWYgYWlkIGluIGFnZW50c19kYjpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDAsIGRldGFpbD1mXCJBZ2VudCB3aXRoIGFnZW50X2lkICd7YWlkfScgYWxyZWFkeSBleGlzdHMuXCIpXG4gICAgdHJ5OlxuICAgICAgICBjdXJyZW50X2FnZW50X2luc3RhbmNlID0gY3JlYXRlX25ld19hZ2VudF9pbnN0YW5jZShcbiAgICAgICAgICAgIG5hbWU9cmVxLm5hbWUsIGFnZT1yZXEuYWdlLCB0cmFpdHM9cmVxLnRyYWl0cywgc3RhdHVzPXJlcS5zdGF0dXMsXG4gICAgICAgICAgICBzdW1tYXJ5X3JlZnJlc2hfc2Vjb25kcz1yZXEuc3VtbWFyeV9yZWZyZXNoX3NlY29uZHMsXG4gICAgICAgICAgICByZWZsZWN0aW9uX3RocmVzaG9sZD1yZXEucmVmbGVjdGlvbl90aHJlc2hvbGQsIHZlcmJvc2U9cmVxLnZlcmJvc2UsXG4gICAgICAgICAgICBsbG1fbW9kZWxfbmFtZT1yZXEubW9kZWxfbmFtZSwgZW1iZWRkaW5nX21vZGVsX25hbWU9cmVxLmVtYmVkZGluZ19tb2RlbF9uYW1lXG4gICAgICAgIClcbi4uLlxuXG5Acm91dGVyLmdldChcIlwiLCByZXNwb25zZV9tb2RlbD1BZ2VudExpc3RSZXNwb25zZSlcbmRlZiBsaXN0X2FnZW50c19lbmRwb2ludCgpOlxuICAgIGFnZW50X2RldGFpbHNfbGlzdCA9IFtdXG4gICAgZm9yIGFnZW50X2lkLCBhZ2VudF9pbnN0YW5jZSBpbiBhZ2VudHNfZGIuaXRlbXMoKTpcbiAgICAgICAgbmFtZSwgc3RhdHVzLCBsbG1fbW9kZWwsIGVtYl9tb2RlbCA9IFwiVW5rbm93blwiLCBcIlVua25vd25cIiwgXCJ1bmtub3duXCIsIFwidW5rbm93blwiXG4gICAgICAgIGlmIGFnZW50X2luc3RhbmNlOlxuICAgICAgICAgICAgbmFtZSA9IGFnZW50X2luc3RhbmNlLm5hbWVcbiAgICAgICAgICAgIHN0YXR1cyA9IGFnZW50X2luc3RhbmNlLnN0YXR1c1xuICAgICAgICAgICAgbGxtX21vZGVsLCBlbWJfbW9kZWwgPSBnZXRfYWdlbnRfbW9kZWxfZGV0YWlscyhhZ2VudF9pbnN0YW5jZSlcbiAgICAgICAgYWdlbnRfZGV0YWlsc19saXN0LmFwcGVuZChBZ2VudERldGFpbChcbiAgICAgICAgICAgIGFnZW50X2lkPWFnZW50X2lkLCBuYW1lPW5hbWUsIHN0YXR1cz1zdGF0dXMsXG4gICAgICAgICAgICBsbG1fbW9kZWw9bGxtX21vZGVsLCBlbWJlZGRpbmdfbW9kZWw9ZW1iX21vZGVsXG4gICAgICAgICkpXG4gICAgcmV0dXJuIEFnZW50TGlzdFJlc3BvbnNlKGFnZW50cz1hZ2VudF9kZXRhaWxzX2xpc3QpXG4uLi5cblxuQHJvdXRlci5wb3N0KFwiL3thZ2VudF9pZH0vZ2VuZXJhdGVfcmVzcG9uc2VcIiwgcmVzcG9uc2VfbW9kZWw9R2VuZXJhdGVSZWFjdGlvblJlc3BvbnNlKVxuZGVmIGdlbmVyYXRlX3Jlc3BvbnNlX2VuZHBvaW50KGFnZW50X2lkOiBzdHIsIHJlcTogR2VuZXJhdGVSZXNwb25zZVJlcSk6XG4gICAgb2JzZXJ2YXRpb24gPSByZXEucHJvbXB0LnN0cmlwKClcbiAgICBwcmludChmXCJ7QkNvbG9ycy5IRUFERVJ9REVCVUc6IC9nZW5lcmF0ZV9yZXNwb25zZSBmb3IgYWdlbnQge0JDb2xvcnMuQk9MRH17YWdlbnRfaWR9e0JDb2xvcnMuRU5EQ30gd2l0aCAne29ic2VydmF0aW9uWzo1MF19Li4uJyAoSz17cmVxLmsgb3IgJ2RlZmF1bHQnfSl7QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgIGlmIGFnZW50X2lkIG5vdCBpbiBhZ2VudHNfZGIgb3IgYWdlbnRzX2RiW2FnZW50X2lkXSBpcyBOb25lOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwNCwgZGV0YWlsPWZcIkFnZW50ICd7YWdlbnRfaWR9JyBub3QgZm91bmQgb3IgaW52YWxpZC5cIilcbiAgICBpZiBub3Qgb2JzZXJ2YXRpb246XG4gICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwMCwgZGV0YWlsPVwiT2JzZXJ2YXRpb24gY2Fubm90IGJlIGVtcHR5LlwiKVxuLi4uXG4gICAgXG4gICAgcmVzcG9uc2VfcGF5bG9hZF9kb2NzOiBMaXN0W0ZldGNoZWRNZW1vcmllc0RvY3VtZW50XSA9IFtdXG4gICAgdHJ5OlxuICAgICAgICByZXF1ZXN0ZWRfayA9IHJldHJpZXZlci5rICMgRGVmYXVsdCB0byByZXRyaWV2ZXIncyBrXG4gICAgICAgIGlmIHJlcS5rIGlzIG5vdCBOb25lIGFuZCByZXEuayA+IDAgYW5kIGhhc2F0dHIocmV0cmlldmVyLCAnaycpOlxuICAgICAgICAgICAgcmVxdWVzdGVkX2sgPSByZXEua1xuICAgICAgICAgICAgcmV0cmlldmVyLmsgPSByZXF1ZXN0ZWRfa1xuXG4gICAgICAgIGRvY3NfYW5kX3Njb3JlczogTGlzdFtUdXBsZVtEb2N1bWVudCwgZmxvYXRdXSA9IFtdXG4gICAgICAgIGlmIChoYXNhdHRyKHJldHJpZXZlciwgXCJ2ZWN0b3JzdG9yZVwiKSBhbmQgcmV0cmlldmVyLnZlY3RvcnN0b3JlIGFuZFxuICAgICAgICAgICAgaGFzYXR0cihyZXRyaWV2ZXIudmVjdG9yc3RvcmUsIFwic2ltaWxhcml0eV9zZWFyY2hfd2l0aF9yZWxldmFuY2Vfc2NvcmVzXCIpKTpcbiAgICAgICAgICAgIGRvY3NfYW5kX3Njb3JlcyA9IHJldHJpZXZlci52ZWN0b3JzdG9yZS5zaW1pbGFyaXR5X3NlYXJjaF93aXRoX3JlbGV2YW5jZV9zY29yZXMob2JzZXJ2YXRpb24sIGs9cmVxdWVzdGVkX2spXG4gICAgICAgIGVsc2U6XG4gICAgICAgICAgICBmZXRjaGVkX2RvY3Nfb25seTogTGlzdFtEb2N1bWVudF0gPSBhZ2VudC5tZW1vcnkuZmV0Y2hfbWVtb3JpZXMob2JzZXJ2YXRpb24sIG5vdz1kYXRldGltZS5ub3coKSlcbiAgICAgICAgICAgIGRvY3NfYW5kX3Njb3JlcyA9IFsoZG9jLCAwLjApIGZvciBkb2MgaW4gZmV0Y2hlZF9kb2NzX29ubHldXG4uLi5cblxuQHJvdXRlci5nZXQoXCIve2FnZW50X2lkfS9zdW1tYXJ5XCIsIHJlc3BvbnNlX21vZGVsPUFnZW50U3VtbWFyeVJlc3BvbnNlKVxuZGVmIGdldF9zdW1tYXJ5X2VuZHBvaW50KGFnZW50X2lkOiBzdHIpOlxuICAgIGlmIGFnZW50X2lkIG5vdCBpbiBhZ2VudHNfZGIgb3IgYWdlbnRzX2RiW2FnZW50X2lkXSBpcyBOb25lOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwNCwgZGV0YWlsPWZcIkFnZW50ICd7YWdlbnRfaWR9JyBub3QgZm91bmQgb3IgaW52YWxpZC5cIilcbiAgICBhZ2VudCA9IGFnZW50c19kYlthZ2VudF9pZF1cbiAgICBzdW1tYXJ5X3RleHQgPSBcIkVycm9yIGdlbmVyYXRpbmcgc3VtbWFyeS5cIlxuICAgIHRyeTpcbiAgICAgICAgc3VtbWFyeV90ZXh0ID0gYWdlbnQuZ2V0X3N1bW1hcnkoZm9yY2VfcmVmcmVzaD1UcnVlKVxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgc3VtbWFyeV90ZXh0ID0gZlwiRXJyb3IgZ2VuZXJhdGluZyBzdW1tYXJ5OiB7ZX1cIlxuICAgIHJldHVybiBBZ2VudFN1bW1hcnlSZXNwb25zZShhZ2VudF9pZD1hZ2VudF9pZCwgc3VtbWFyeT1zdW1tYXJ5X3RleHQpXG4uLi5cblBhdGg6IGNvbmZpZy5weVxuIyBGaWxlOiBjb25maWcucHlcbmltcG9ydCBvc1xuXG5ERUZBVUxUX0NIQVRfTU9ERUwgPSBcImdwdC00by1taW5pXCJcbkRFRkFVTFRfRU1CRURESU5HX01PREVMID0gXCJ0ZXh0LWVtYmVkZGluZy0zLXNtYWxsXCJcblxuT1BFTkFJX0FQSV9LRVlfU0VUID0gYm9vbChvcy5nZXRlbnYoXCJPUEVOQUlfQVBJX0tFWVwiKSlcbi4uLlxuUGF0aDogc2NoZW1hcy5weVxuIyBGaWxlOiBzY2hlbWFzLnB5XG5mcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwsIExpc3QsIERpY3QsIEFueVxuZnJvbSBweWRhbnRpYyBpbXBvcnQgQmFzZU1vZGVsLCBGaWVsZFxuXG5jbGFzcyBDcmVhdGVBZ2VudFJlcShCYXNlTW9kZWwpOlxuICAgIG5hbWU6IHN0clxuICAgIGFnZTogaW50XG4gICAgdHJhaXRzOiBzdHJcbiAgICBzdGF0dXM6IHN0clxuICAgIGFnZW50X2lkOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuICAgIHN1bW1hcnlfcmVmcmVzaF9zZWNvbmRzOiBpbnQgPSBGaWVsZChkZWZhdWx0PTM2MDAsIGdlPTApXG4gICAgcmVmbGVjdGlvbl90aHJlc2hvbGQ6IGludCA9IEZpZWxkKGRlZmF1bHQ9MCwgZ2U9MClcbiAgICB2ZXJib3NlOiBib29sID0gRmFsc2VcbiAgICBtb2RlbF9uYW1lOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuICAgIGVtYmVkZGluZ19tb2RlbF9uYW1lOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuXG5jbGFzcyBHZW5lcmF0ZVJlc3BvbnNlUmVxKEJhc2VNb2RlbCk6XG4gICAgcHJvbXB0OiBzdHJcbiAgICBrOiBPcHRpb25hbFtpbnRdID0gRmllbGQoZGVmYXVsdD1Ob25lLCBndD0wKVxuXG5jbGFzcyBHZW5lcmF0ZVJlYWN0aW9uUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBhZ2VudF9uYW1lOiBzdHJcbiAgICByZWFjdGlvbl90eXBlOiBzdHIgIyBTQVksIFRISU5LLCBETywgSUdOT1JFLCBVTktOT1dOXG4gICAgY29udGVudDogc3RyXG4gICAgb2JzZXJ2YXRpb25fd2FzX2ltcG9ydGFudDogYm9vbFxuXG5jbGFzcyBBZGRNZW1vcnlSZXEoQmFzZU1vZGVsKTpcbiAgICB0ZXh0X3RvX21lbW9yaXplOiBzdHJcblxuY2xhc3MgRmV0Y2hNZW1vcmllc1JlcShCYXNlTW9kZWwpOlxuICAgIG9ic2VydmF0aW9uOiBzdHJcbiAgICBrOiBPcHRpb25hbFtpbnRdID0gRmllbGQoZGVmYXVsdD1Ob25lLCBndD0wKVxuXG5jbGFzcyBVcGRhdGVTdGF0dXNSZXEoQmFzZU1vZGVsKTpcbiAgICBuZXdfc3RhdHVzOiBzdHJcblxuY2xhc3MgQWdlbnREZXRhaWwoQmFzZU1vZGVsKTpcbiAgICBhZ2VudF9pZDogc3RyXG4gICAgbmFtZTogc3RyXG4gICAgc3RhdHVzOiBzdHJcbiAgICBsbG1fbW9kZWw6IHN0clxuICAgIGVtYmVkZGluZ19tb2RlbDogc3RyXG5cbmNsYXNzIEFnZW50TGlzdFJlc3BvbnNlKEJhc2VNb2RlbCk6XG4gICAgYWdlbnRzOiBMaXN0W0FnZW50RGV0YWlsXVxuXG5jbGFzcyBBZ2VudENyZWF0aW9uUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBhZ2VudF9pZDogc3RyXG4gICAgbmFtZTogc3RyXG4gICAgbGxtX21vZGVsX3VzZWQ6IHN0clxuICAgIGVtYmVkZGluZ19tb2RlbF91c2VkOiBzdHJcblxuY2xhc3MgU2ltcGxlU3RhdHVzUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBzdGF0dXM6IHN0clxuICAgIG1lc3NhZ2U6IE9wdGlvbmFsW3N0cl0gPSBOb25lXG5cbmNsYXNzIEFkZGVkTWVtb3J5UmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBzdGF0dXM6IHN0clxuICAgIGFkZGVkX21lbW9yeTogc3RyXG5cbmNsYXNzIEZldGNoZWRNZW1vcmllc0RvY3VtZW50KEJhc2VNb2RlbCk6XG4gICAgY29udGVudDogc3RyXG4gICAgbWV0YWRhdGE6IERpY3Rbc3RyLCBBbnldXG4gICAgcmVsZXZhbmNlX3Njb3JlOiBmbG9hdFxuXG5jbGFzcyBGZXRjaGVkTWVtb3JpZXNSZXNwb25zZShCYXNlTW9kZWwpOlxuICAgIG1lbW9yaWVzOiBMaXN0W0ZldGNoZWRNZW1vcmllc0RvY3VtZW50XVxuLi4uXG5QYXRoOiBjdXN0b21fYWdlbnQucHlcbiMgRmlsZTogY3VzdG9tX2FnZW50LnB5XG5mcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZVxuZnJvbSB0eXBpbmcgaW1wb3J0IFR1cGxlLCBPcHRpb25hbCwgQW55XG5pbXBvcnQgcmVcblxuZnJvbSBsYW5nY2hhaW5fZXhwZXJpbWVudGFsLmdlbmVyYXRpdmVfYWdlbnRzLmdlbmVyYXRpdmVfYWdlbnQgaW1wb3J0IEdlbmVyYXRpdmVBZ2VudFxuZnJvbSBsYW5nY2hhaW4ucHJvbXB0cyBpbXBvcnQgUHJvbXB0VGVtcGxhdGVcbmZyb20gbGFuZ2NoYWluLmNoYWlucyBpbXBvcnQgTExNQ2hhaW5cblxuZnJvbSB1dGlscyBpbXBvcnQgQkNvbG9yc1xuXG5jbGFzcyBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50KEdlbmVyYXRpdmVBZ2VudCk6XG4gICAgZGVmIF9faW5pdF9fKHNlbGYsICoqZGF0YTogQW55KTpcbiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygqKmRhdGEpXG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLk9LR1JFRU59REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogSW5pdGlhbGl6ZWQgQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudCwgXCJcbiAgICAgICAgICAgICAgZlwidXNpbmcgYmFzZSBHZW5lcmF0aXZlQWdlbnQgbG9naWMue0JDb2xvcnMuRU5EQ31cIilcblxuICAgIGRlZiBnZXRfaW50ZXJwcmV0ZWRfcmVhY3Rpb24oc2VsZiwgb2JzZXJ2YXRpb246IHN0ciwgbm93OiBPcHRpb25hbFtkYXRldGltZV0gPSBOb25lKSAtPiBUdXBsZVtzdHIsIHN0ciwgYm9vbF06XG4gICAgICAgIGNhbGxfdGltZSA9IG5vdyBvciBkYXRldGltZS5ub3coKVxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5ESU19REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogQ2FsbGluZyBwYXJlbnQncyBnZW5lcmF0ZV9yZWFjdGlvbiBmb3I6ICd7b2JzZXJ2YXRpb25bOjUwXX0uLi4ne0JDb2xvcnMuRU5EQ31cIilcblxuICAgICAgICBpc19kaWFsb2d1ZV9mbGFnLCByZXN1bHRfc3RyID0gc3VwZXIoKS5nZW5lcmF0ZV9yZWFjdGlvbihvYnNlcnZhdGlvbiwgbm93PWNhbGxfdGltZSlcblxuICAgICAgICBlc3RpbWF0ZWRfb2JzZXJ2YXRpb25faW1wb3J0YW5jZSA9IEZhbHNlXG4gICAgICAgIHRyeTpcbiAgICAgICAgICAgIGlmIHNlbGYubGxtOlxuICAgICAgICAgICAgICAgIHBvaWduYW5jeV9wcm9tcHRfc3RyID0gKFxuICAgICAgICAgICAgICAgICAgICBcIklzIHRoZSBmb2xsb3dpbmcgb2JzZXJ2YXRpb24gbXVuZGFuZSAoZS5nLiwgYnJ1c2hpbmcgdGVldGgpIG9yIHBvaWduYW50IChlLmcuLCBhIG1ham9yIGxpZmUgZXZlbnQpPyBcIlxuICAgICAgICAgICAgICAgICAgICBcIkFuc3dlciB3aXRoICdtdW5kYW5lJyBvciAncG9pZ25hbnQnLlxcbk9ic2VydmF0aW9uOiB7b2JzZXJ2YXRpb25fdGV4dH1cXG5BbnN3ZXI6XCJcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgcHJvbXB0ID0gUHJvbXB0VGVtcGxhdGUuZnJvbV90ZW1wbGF0ZShwb2lnbmFuY3lfcHJvbXB0X3N0cilcbiAgICAgICAgICAgICAgICBjaGFpbiA9IExMTUNoYWluKGxsbT1zZWxmLmxsbSwgcHJvbXB0PXByb21wdClcbiAgICAgICAgICAgICAgICBwb2lnbmFuY3lfcmVzdWx0ID0gY2hhaW4ucnVuKG9ic2VydmF0aW9uX3RleHQ9b2JzZXJ2YXRpb24pLnN0cmlwKCkubG93ZXIoKVxuICAgICAgICAgICAgICAgIGlmIFwicG9pZ25hbnRcIiBpbiBwb2lnbmFuY3lfcmVzdWx0OlxuICAgICAgICAgICAgICAgICAgICBlc3RpbWF0ZWRfb2JzZXJ2YXRpb25faW1wb3J0YW5jZSA9IFRydWVcbiAgICAgICAgICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5ESU19REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogT2JzZXJ2YXRpb24gcG9pZ25hbmN5IGVzdGltYXRlZCBhcyAne3BvaWduYW5jeV9yZXN1bHR9JywgQVBJIGltcG9ydGFudCBmbGFnOiB7ZXN0aW1hdGVkX29ic2VydmF0aW9uX2ltcG9ydGFuY2V9e0JDb2xvcnMuRU5EQ31cIilcbiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlX3BvaWduYW5jeTpcbiAgICAgICAgICAgIHByaW50KGZcIntCQ29sb3JzLldBUk5JTkd9V0FSTiAoQWdlbnQge3NlbGYubmFtZX0pOiBDb3VsZCBub3QgZXN0aW1hdGUgb2JzZXJ2YXRpb24gcG9pZ25hbmN5IGZvciBBUEkgZmxhZzoge2VfcG9pZ25hbmN5fXtCQ29sb3JzLkVOREN9XCIpXG4uLi5cblBhdGg6IHV0aWxzLnB5XG4jIEZpbGU6IHV0aWxzLnB5XG5jbGFzcyBCQ29sb3JzOlxuICAgIEhFQURFUiA9ICdcXDAzM1s5NW0nXG4gICAgT0tCTFVFID0gJ1xcMDMzWzk0bSdcbiAgICBPS0NZQU4gPSAnXFwwMzNbOTZtJ1xuICAgIE9LR1JFRU4gPSAnXFwwMzNbOTJtJ1xuICAgIFdBUk5JTkcgPSAnXFwwMzNbOTNtJ1xuICAgIEZBSUwgPSAnXFwwMzNbOTFtJ1xuICAgIEVOREMgPSAnXFwwMzNbMG0nXG4gICAgQk9MRCA9ICdcXDAzM1sxbSdcbiAgICBVTkRFUkxJTkUgPSAnXFwwMzNbNG0nXG4gICAgRElNID0gJ1xcMDMzWzJtJ1xuICAgIElNUE9SVEFOQ0VfSElHSCA9IE9LR1JFRU5cbiAgICBJTVBPUlRBTkNFX01FRElVTSA9IFdBUk5JTkdcbiAgICBJTVBPUlRBTkNFX0xPVyA9IEZBSUxcbiAgICBNRVRBREFUQV9LRVkgPSBPS0NZQU5cbiAgICBNRVRBREFUQV9WQUxVRSA9IE9LQkxVRVxuICAgIENPTlRFTlRfQ09MT1IgPSBFTkRDXG4gICAgU0VQQVJBVE9SID0gRElNXG4uLi5cblBhdGg6IHByb21wdHMucHlcbiMgRmlsZTogcHJvbXB0cy5weVxuXG4jIC0tLSBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50IFByb21wdHMgLS0tXG5cbkRFQ0lTSU9OX1RFTVBMQVRFID0gKFxuICAgIFwiWW91IGFyZSB7YWdlbnRfbmFtZX0uXFxuXCJcbiAgICBcIllvdXIgY29yZSBjaGFyYWN0ZXJpc3RpY3MgYXJlOiB7YWdlbnRfdHJhaXRzfVxcblwiXG4gICAgXCJJdCBpcyB7Y3VycmVudF90aW1lfS5cXG5cIlxuICAgIFwiWW91ciBzdGF0dXMgaXM6IHthZ2VudF9zdGF0dXN9XFxuXCJcbiAgICBcIllvdSBvYnNlcnZlOiB7b2JzZXJ2YXRpb259XFxuXCJcbiAgICBcIlJlbGV2YW50IHJlY2VudCBtZW1vcmllczpcXG57bWVtb3J5X2NvbnRleHR9XFxuXFxuXCJcbiAgICBcIkNvbnNpZGVyaW5nIHlvdXIgcGVyc29uYWxpdHkgKGVzcGVjaWFsbHkgdHJhaXRzIGxpa2Uge2FnZW50X3RyYWl0c30pLCB0aGUgb2JzZXJ2YXRpb24sIGFuZCByZWNlbnQgbWVtb3JpZXMsIFwiXG4gICAgXCJ3aGF0IGlzIHRoZSAqbW9zdCBsaWtlbHkgdHlwZSogb2YgaW1tZWRpYXRlIHJlYWN0aW9uIHlvdSB3b3VsZCBoYXZlPyBDaG9vc2UgKm9uZSogZnJvbTogXCJcbiAgICBcIidTQVknIChzcGVhayBhbG91ZCksICdUSElOSycgKGludGVybmFsIHRob3VnaHQgb25seSksICdETycgKHBlcmZvcm0gYSBwaHlzaWNhbCBhY3Rpb24pLCAnSUdOT1JFJyAobm8gc2lnbmlmaWNhbnQgcmVhY3Rpb24sIHJlbWFpbiBpbiBjdXJyZW50IHN0YXR1cykuXCJcbiAgICBcIlxcblJlYWN0aW9uIFR5cGUgQ2hvaWNlOlwiXG4pXG4uLi5cblxuQUNUSU9OX1RFTVBMQVRFID0gKFxuICAgIFwiWW91IGFyZSB7YWdlbnRfbmFtZX0uXFxuXCJcbiAgICBcIllvdXIgY29yZSBjaGFyYWN0ZXJpc3RpY3MgYXJlOiB7YWdlbnRfdHJhaXRzfVxcblwiXG4gICAgXCJJdCBpcyB7Y3VycmVudF90aW1lfS5cXG5cIlxuICAgIFwiWW91ciBzdGF0dXMgaXM6IHthZ2VudF9zdGF0dXN9XFxuXCJcbiAgICBcIllvdSBvYnNlcnZlOiB7b2JzZXJ2YXRpb259XFxuXCJcbiAgICBcIlJlbGV2YW50IHJlY2VudCBtZW1vcmllczpcXG57bWVtb3J5X2NvbnRleHR9XFxuXCJcbiAgICBcIlJlbGF0aW9uc2hpcCBjb250ZXh0OiB7cmVsYXRpb25zaGlwX2NvbnRleHR9XFxuXFxuXCJcbiAgICBcIkNvbnNpZGVyaW5nIHlvdXIgcGVyc29uYWxpdHkgYW5kIHRoZSBzaXR1YXRpb24sIHdoYXQgKnBoeXNpY2FsIGFjdGlvbiogZG8geW91IHRha2UgaW4gaW1tZWRpYXRlIHJlc3BvbnNlIHRvIHRoZSBvYnNlcnZhdGlvbj8gXCJcbiAgICBcIkRlc2NyaWJlIHRoZSBhY3Rpb24gY29uY2lzZWx5IGFzIGlmIG5hcnJhdGluZyBpdC4gRXhhbXBsZTogSSBzaGlmdCBteSB3ZWlnaHQgdW5lYXNpbHkuIC8gSSBkcmF3IG15IHN3b3JkLlwiXG4gICAgXCJcXG5BY3Rpb24gVGFrZW46XCJcbilcbi4uLlxuXG5FTlRJVFlfQUNUSU9OX1RFTVBMQVRFID0gKFxuICAgIFwiQmFzZWQgb24gdGhlIGZvbGxvd2luZyBvYnNlcnZhdGlvbiwgd2hhdCBpcyB7ZW50aXR5fSBkb2luZz8gRGVzY3JpYmUgdGhlaXIgYWN0aW9ucyBjb25jaXNlbHkuXFxuXFxuXCJcbiAgICBcIk9ic2VydmF0aW9uOiB7b2JzZXJ2YXRpb259XFxuXFxuXCJcbiAgICBcIldoYXQge2VudGl0eX0gaXMgZG9pbmc6XCJcbilcblxuUkVMQVRJT05TSElQX1NVTU1BUllfVEVNUExBVEUgPSAoXG4gICAgXCJCYXNlZCBvbiB5b3VyIG1lbW9yaWVzLCB3aGF0IGlzIHlvdXIgcmVsYXRpb25zaGlwIG9yIGtub3dsZWRnZSBhYm91dCB7ZW50aXR5X25hbWV9P1xcblwiXG4gICAgXCJDb25zaWRlcjpcXG5cIlxuICAgIFwiMS4gSGF2ZSB5b3UgbWV0IHtlbnRpdHlfbmFtZX0gYmVmb3JlP1xcblwiXG4gICAgXCIyLiBEbyB5b3UgaGF2ZSBhbnkgaGlzdG9yeSB3aXRoIHtlbnRpdHlfbmFtZX0/XFxuXCJcbiAgICBcIjMuIERvIHlvdSBoYXZlIGFueSBmZWVsaW5ncyBvciBvcGluaW9ucyBhYm91dCB7ZW50aXR5X25hbWV9P1xcblwiXG4gICAgXCI0LiBJcyB0aGVyZSBhbnl0aGluZyBub3RhYmxlIGFib3V0IHtlbnRpdHlfbmFtZX0/XFxuXFxuXCJcbiAgICBcIkNvbnRleHQgZnJvbSB5b3VyIG1lbW9yaWVzOlxcbntyZWxldmFudF9tZW1vcmllc31cXG5cXG5cIlxuICAgIFwiQ3VycmVudCBvYnNlcnZhdGlvbjoge2VudGl0eV9uYW1lfSBpcyB7ZW50aXR5X2FjdGlvbn1cXG5cXG5cIlxuICAgIFwiUmVsYXRpb25zaGlwIHdpdGgge2VudGl0eV9uYW1lfSAoYmUgY29uY2lzZSwgaWYgbm8gcmVsYXRpb25zaGlwIGV4aXN0cywgc3RhdGUgdGhhdCBjbGVhcmx5KTpcIlxuKVxuLi4uXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFSWENRTFVzUW9Yb1BZQVJTYTJpcHJGIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiQzovVXNlcnMvVHJvbi9Eb2N1bWVudHMvR2l0SHViL2Zhc3RhcGkiLCJmb2xkZXJSb290IjoiQzovVXNlcnMvVHJvbi9Eb2N1bWVudHMvR2l0SHViL2Zhc3RhcGkifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTA4VDEwOjU5OjQ0LjcyMloiLCJyZXNwb25zZV90ZXh0IjoiQmFzZWQgb24gdGhlIGluZm9ybWF0aW9uIEkndmUgZ2F0aGVyZWQsIEkgY2FuIG5vdyBwcm92aWRlIHlvdSB3aXRoIGEgY29tcHJlaGVuc2l2ZSBvdmVydmlldyBvZiB0aGlzIHByb2plY3Q6XG5cbiMjIFByb2plY3QgT3ZlcnZpZXdcblxuVGhpcyBpcyBhIEZhc3RBUEkgYXBwbGljYXRpb24gdGhhdCBpbXBsZW1lbnRzIGFuIFwiQXV0b25vbW91cyBHZW5lcmF0aXZlIEFnZW50IEFQSVwiLiBUaGUgcHJvamVjdCBjcmVhdGVzIGEgd2ViIHNlcnZpY2UgdGhhdCBhbGxvd3MgdXNlcnMgdG8gY3JlYXRlLCBtYW5hZ2UsIGFuZCBpbnRlcmFjdCB3aXRoIEFJIGFnZW50cyBwb3dlcmVkIGJ5IExhbmdDaGFpbiBhbmQgT3BlbkFJJ3MgbW9kZWxzLlxuXG4jIyMgS2V5IEZlYXR1cmVzXG5cbjEuICoqQXV0b25vbW91cyBBZ2VudHMqKjogVGhlIHN5c3RlbSBjcmVhdGVzIEFJIGFnZW50cyB0aGF0IGNhbjpcbiAgIC0gR2VuZXJhdGUgcmVzcG9uc2VzIHRvIG9ic2VydmF0aW9uc1xuICAgLSBNYWludGFpbiBtZW1vcnkgb2YgcGFzdCBpbnRlcmFjdGlvbnNcbiAgIC0gSGF2ZSBkaWZmZXJlbnQgcmVhY3Rpb24gdHlwZXMgKFNBWSwgVEhJTkssIERPLCBJR05PUkUpXG4gICAtIE1haW50YWluIGEgc3RhdHVzIGFuZCBwZXJzb25hbGl0eSB0cmFpdHNcblxuMi4gKipBUEkgRW5kcG9pbnRzKio6IFRoZSBhcHBsaWNhdGlvbiBwcm92aWRlcyBSRVNUZnVsIGVuZHBvaW50cyB0bzpcbiAgIC0gQ3JlYXRlIG5ldyBhZ2VudHNcbiAgIC0gTGlzdCBleGlzdGluZyBhZ2VudHNcbiAgIC0gR2VuZXJhdGUgcmVzcG9uc2VzIGZyb20gYWdlbnRzXG4gICAtIEFkZCBtZW1vcmllcyB0byBhZ2VudHNcbiAgIC0gRmV0Y2ggbWVtb3JpZXMgZnJvbSBhZ2VudHNcbiAgIC0gR2V0IGFnZW50IHN1bW1hcmllc1xuICAgLSBVcGRhdGUgYWdlbnQgc3RhdHVzXG5cbjMuICoqVGVjaG5vbG9neSBTdGFjayoqOlxuICAgLSAqKkZhc3RBUEkqKjogV2ViIGZyYW1ld29yayBmb3IgYnVpbGRpbmcgdGhlIEFQSVxuICAgLSAqKkxhbmdDaGFpbioqOiBGcmFtZXdvcmsgZm9yIHdvcmtpbmcgd2l0aCBsYW5ndWFnZSBtb2RlbHNcbiAgIC0gKipPcGVuQUkqKjogUHJvdmlkZXIgZm9yIHRoZSBsYW5ndWFnZSBtb2RlbHMgYW5kIGVtYmVkZGluZ3NcbiAgIC0gKipGQUlTUyoqOiBWZWN0b3IgZGF0YWJhc2UgZm9yIHN0b3JpbmcgYW5kIHJldHJpZXZpbmcgYWdlbnQgbWVtb3JpZXNcbiAgIC0gKipQeWRhbnRpYyoqOiBGb3IgZGF0YSB2YWxpZGF0aW9uIGFuZCBzY2hlbWEgZGVmaW5pdGlvblxuXG4jIyMgQXJjaGl0ZWN0dXJlXG5cblRoZSBwcm9qZWN0IGZvbGxvd3MgYSBtb2R1bGFyIGFyY2hpdGVjdHVyZTpcblxuMS4gKipNYWluIEFwcGxpY2F0aW9uKiogKGBtYWluLnB5YCk6IEVudHJ5IHBvaW50IHRoYXQgc2V0cyB1cCB0aGUgRmFzdEFQSSBhcHBsaWNhdGlvbiBhbmQgaW5jbHVkZXMgcm91dGVyc1xuMi4gKipSb3V0ZXJzKiogKGByb3V0ZXJzL2FnZW50X3JvdXRlci5weWApOiBEZWZpbmVzIEFQSSBlbmRwb2ludHMgYW5kIHJlcXVlc3QgaGFuZGxpbmdcbjMuICoqQWdlbnQgRmFjdG9yeSoqIChgYWdlbnRfZmFjdG9yeS5weWApOiBDcmVhdGVzIGFnZW50IGluc3RhbmNlcyB3aXRoIGFwcHJvcHJpYXRlIGNvbmZpZ3VyYXRpb25cbjQuICoqQ3VzdG9tIEFnZW50KiogKGBjdXN0b21fYWdlbnQucHlgKTogRXh0ZW5kcyBMYW5nQ2hhaW4ncyBHZW5lcmF0aXZlQWdlbnQgd2l0aCBjdXN0b20gZnVuY3Rpb25hbGl0eVxuNS4gKipTY2hlbWFzKiogKGBzY2hlbWFzLnB5YCk6IERlZmluZXMgZGF0YSBtb2RlbHMgZm9yIHJlcXVlc3RzIGFuZCByZXNwb25zZXNcbjYuICoqUHJvbXB0cyoqIChgcHJvbXB0cy5weWApOiBDb250YWlucyB0ZW1wbGF0ZXMgZm9yIGFnZW50IHByb21wdHNcbjcuICoqQ29uZmlnKiogKGBjb25maWcucHlgKTogQ29uZmlndXJhdGlvbiBzZXR0aW5ncyBhbmQgZW52aXJvbm1lbnQgdmFyaWFibGUgaGFuZGxpbmdcbjguICoqVXRpbHMqKiAoYHV0aWxzLnB5YCk6IFV0aWxpdHkgZnVuY3Rpb25zIGFuZCBjbGFzc2VzXG5cbiMjIyBEZXBsb3ltZW50XG5cblRoZSBwcm9qZWN0IGlzIHNldCB1cCB0byBiZSBkZXBsb3llZCBvbiBSZW5kZXIgKGEgY2xvdWQgcGxhdGZvcm0pOlxuLSBgcmVuZGVyLnlhbWxgIGRlZmluZXMgdGhlIHNlcnZpY2UgY29uZmlndXJhdGlvblxuLSBUaGUgUkVBRE1FIHByb3ZpZGVzIGluc3RydWN0aW9ucyBmb3IgZGVwbG95aW5nIHRvIFJlbmRlclxuLSBUaGUgYXBwbGljYXRpb24gaXMgY29uZmlndXJlZCB0byB1c2UgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZvciBjb25maWd1cmF0aW9uXG5cbiMjIyBLZXkgRGVwZW5kZW5jaWVzXG5cbi0gRmFzdEFQSSBhbmQgaXRzIGRlcGVuZGVuY2llc1xuLSBMYW5nQ2hhaW4gYW5kIGl0cyBleHBlcmltZW50YWwgbW9kdWxlcyAoZm9yIGdlbmVyYXRpdmUgYWdlbnRzKVxuLSBPcGVuQUkncyBBUEkgKHJlcXVpcmVzIGFuIEFQSSBrZXkpXG4tIEZBSVNTIGZvciB2ZWN0b3Igc3RvcmFnZSBhbmQgcmV0cmlldmFsXG4tIFZhcmlvdXMgUHl0aG9uIHV0aWxpdGllc1xuXG4jIyMgUnVubmluZyB0aGUgQXBwbGljYXRpb25cblxuVG8gcnVuIHRoZSBhcHBsaWNhdGlvbiBsb2NhbGx5OlxuMS4gU2V0IHVwIHRoZSByZXF1aXJlZCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgKGVzcGVjaWFsbHkgYE9QRU5BSV9BUElfS0VZYClcbjIuIEluc3RhbGwgZGVwZW5kZW5jaWVzIHdpdGggYHBpcCBpbnN0YWxsIC1yIHJlcXVpcmVtZW50cy50eHRgXG4zLiBSdW4gdGhlIHNlcnZlciB3aXRoIGB1dmljb3JuIG1haW46YXBwIC0tcmVsb2FkYFxuXG5UaGUgYXBwbGljYXRpb24gd2lsbCBzdGFydCBhIHdlYiBzZXJ2ZXIgdGhhdCBleHBvc2VzIHRoZSBBUEkgZW5kcG9pbnRzIGZvciBjcmVhdGluZyBhbmQgaW50ZXJhY3Rpbmcgd2l0aCBhdXRvbm9tb3VzIGFnZW50cy5cblxuIyMjIE5vdGFibGUgRmVhdHVyZXNcblxuMS4gKipNZW1vcnkgTWFuYWdlbWVudCoqOiBBZ2VudHMgc3RvcmUgbWVtb3JpZXMgaW4gYSB2ZWN0b3IgZGF0YWJhc2UgKEZBSVNTKSBhbmQgY2FuIHJldHJpZXZlIHJlbGV2YW50IG1lbW9yaWVzIGJhc2VkIG9uIG9ic2VydmF0aW9uc1xuMi4gKipSZWFjdGlvbiBHZW5lcmF0aW9uKio6IEFnZW50cyBjYW4gZ2VuZXJhdGUgZGlmZmVyZW50IHR5cGVzIG9mIHJlYWN0aW9ucyAoU0FZLCBUSElOSywgRE8sIElHTk9SRSkgYmFzZWQgb24gdGhlaXIgcGVyc29uYWxpdHkgYW5kIG1lbW9yaWVzXG4zLiAqKkVudGl0eSBSZWNvZ25pdGlvbioqOiBUaGUgc3lzdGVtIGNhbiBpZGVudGlmeSBlbnRpdGllcyBpbiBvYnNlcnZhdGlvbnMgYW5kIHRyYWNrIHJlbGF0aW9uc2hpcHMgd2l0aCB0aGVtXG40LiAqKkltcG9ydGFuY2UgRXN0aW1hdGlvbioqOiBUaGUgc3lzdGVtIGVzdGltYXRlcyB0aGUgaW1wb3J0YW5jZSBvZiBvYnNlcnZhdGlvbnMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgc2hvdWxkIGJlIHJlbWVtYmVyZWRcblxuVGhpcyBwcm9qZWN0IGVzc2VudGlhbGx5IGNyZWF0ZXMgYSBmcmFtZXdvcmsgZm9yIGJ1aWxkaW5nIGFuZCBpbnRlcmFjdGluZyB3aXRoIEFJIGFnZW50cyB0aGF0IGhhdmUgbWVtb3J5LCBwZXJzb25hbGl0eSwgYW5kIHRoZSBhYmlsaXR5IHRvIHJlYWN0IHRvIG9ic2VydmF0aW9ucyBpbiBhIHdheSB0aGF0J3MgY29uc2lzdGVudCB3aXRoIHRoZWlyIGRlZmluZWQgY2hhcmFjdGVyaXN0aWNzLlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJyZXF1ZXN0X2lkIjoiNDMzMWU2OTctYmIwZC00MzZhLTgzZmMtMDYzNWZmZTYwZjc4Iiwic3RhdHVzIjoiY2FuY2VsbGVkIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy10dXJuLWRlbGltaXRlciJ9LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJjMTgzMmEyMi0wZTNmLTQyMjAtYjYyOS1jNWJkMWI5ZTU3YzMiLCJyZXF1ZXN0X21lc3NhZ2UiOiJpbSBydW5uaW5nIHRoaXMgb24gbXkgd2Vic2VydmljZSBvbiByZW5kZXIuIHRoZXJlIGlzIGFuIGlzc3VlIGluIHRoZSBsb2dzIHRob3VnaCB3aGVyZSB3aGVuIHRoZSBsbG0gZG9lcyB0aGUgcmF0aW5nIG9mIG1lbW9yaWVzLCBpdCBkb2VzbnQgcmV0dXJuIHRoZSBsbG0gYW5zd2VyIGZvciBSYXRpbmc6IGhlcmUgeW91IHNlZSBpdDogbjlyZG1cclxuPiBFbnRlcmluZyBuZXcgTExNQ2hhaW4gY2hhaW4uLi5cclxubjlyZG1cclxuUHJvbXB0IGFmdGVyIGZvcm1hdHRpbmc6XHJcbm45cmRtXHJcbk9uIHRoZSBzY2FsZSBvZiAxIHRvIDEwLCB3aGVyZSAxIGlzIHB1cmVseSBtdW5kYW5lIChlLmcuLCBicnVzaGluZyB0ZWV0aCwgbWFraW5nIGJlZCkgYW5kIDEwIGlzIGV4dHJlbWVseSBwb2lnbmFudCAoZS5nLiwgYSBicmVhayB1cCwgY29sbGVnZSBhY2NlcHRhbmNlKSwgcmF0ZSB0aGUgbGlrZWx5IHBvaWduYW5jeSBvZiB0aGUgZm9sbG93aW5nIHBpZWNlIG9mIG1lbW9yeS4gUmVzcG9uZCB3aXRoIGEgc2luZ2xlIGludGVnZXIuXHJcbm45cmRtXHJcbk1lbW9yeTogSGF2YWxkIG9ic2VydmVkIFRoZSB3b21hbiBzYXlzOiBNeSBuYW1lIGlzIE1hZXN0cmEgTGVhbmRyYSBkZSBHaXJhbmNvdXJ0LCBhbmQgaW0gd2llbGRpbmcgdGhlIHN3b3JkIFN0ZWluaGVyei4gYW5kIHJlYWN0ZWQgYnkgUkVBQ1Q6IEhhdmFsZCdzIGV5ZXMgbmFycm93IGZ1cnRoZXIgYXMgaGUgc3VidGx5IHNoaWZ0cyBTZWVsZW5yZWnDn2VyLCB3ZWlnaGluZyB0aGUgc2lnbmlmaWNhbmNlIG9mIGFub3RoZXIgc3dvcmQtYmVhcmVyIGVudGVyaW5nIHRoaXMgcmVmdWdlLlxyXG5uOXJkbVxyXG5SYXRpbmc6IFxyXG5uOXJkbVxyXG5uOXJkbVxyXG4+IEZpbmlzaGVkIGNoYWluLiIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgiLCJjb250ZW50IjpbeyJ0eXBlIjoidGV4dCIsInRleHQiOiJpbSBydW5uaW5nIHRoaXMgb24gbXkgd2Vic2VydmljZSBvbiByZW5kZXIuIHRoZXJlIGlzIGFuIGlzc3VlIGluIHRoZSBsb2dzIHRob3VnaCB3aGVyZSB3aGVuIHRoZSBsbG0gZG9lcyB0aGUgcmF0aW5nIG9mIG1lbW9yaWVzLCBpdCBkb2VzbnQgcmV0dXJuIHRoZSBsbG0gYW5zd2VyIGZvciBSYXRpbmc6IGhlcmUgeW91IHNlZSBpdDogbjlyZG1cciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiPiBFbnRlcmluZyBuZXcgTExNQ2hhaW4gY2hhaW4uLi5cciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoibjlyZG1cciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiUHJvbXB0IGFmdGVyIGZvcm1hdHRpbmc6XHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Im45cmRtXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ik9uIHRoZSBzY2FsZSBvZiAxIHRvIDEwLCB3aGVyZSAxIGlzIHB1cmVseSBtdW5kYW5lIChlLmcuLCBicnVzaGluZyB0ZWV0aCwgbWFraW5nIGJlZCkgYW5kIDEwIGlzIGV4dHJlbWVseSBwb2lnbmFudCAoZS5nLiwgYSBicmVhayB1cCwgY29sbGVnZSBhY2NlcHRhbmNlKSwgcmF0ZSB0aGUgbGlrZWx5IHBvaWduYW5jeSBvZiB0aGUgZm9sbG93aW5nIHBpZWNlIG9mIG1lbW9yeS4gUmVzcG9uZCB3aXRoIGEgc2luZ2xlIGludGVnZXIuXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Im45cmRtXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ik1lbW9yeTogSGF2YWxkIG9ic2VydmVkIFRoZSB3b21hbiBzYXlzOiBNeSBuYW1lIGlzIE1hZXN0cmEgTGVhbmRyYSBkZSBHaXJhbmNvdXJ0LCBhbmQgaW0gd2llbGRpbmcgdGhlIHN3b3JkIFN0ZWluaGVyei4gYW5kIHJlYWN0ZWQgYnkgUkVBQ1Q6IEhhdmFsZCdzIGV5ZXMgbmFycm93IGZ1cnRoZXIgYXMgaGUgc3VidGx5IHNoaWZ0cyBTZWVsZW5yZWnDn2VyLCB3ZWlnaGluZyB0aGUgc2lnbmlmaWNhbmNlIG9mIGFub3RoZXIgc3dvcmQtYmVhcmVyIGVudGVyaW5nIHRoaXMgcmVmdWdlLlxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJuOXJkbVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJSYXRpbmc6IFxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJuOXJkbVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJuOXJkbVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiI+IEZpbmlzaGVkIGNoYWluLiJ9XX1dfSwibWVudGlvbmVkX2l0ZW1zIjpbXSwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxSDVveHZkeTJoakJ0M1lYS2RaNlBhVCIsInRvb2xfbmFtZSI6ImNvZGViYXNlLXJldHJpZXZhbCIsImlucHV0X2pzb24iOiJ7XCJpbmZvcm1hdGlvbl9yZXF1ZXN0XCI6IFwiRmluZCBjb2RlIHJlbGF0ZWQgdG8gbWVtb3J5IHJhdGluZywgcG9pZ25hbmN5IHNjb3JpbmcsIG9yIGFueSBmdW5jdGlvbnMgdGhhdCBldmFsdWF0ZSBtZW1vcnkgaW1wb3J0YW5jZS4gTG9vayBmb3IgY29kZSB0aGF0IHVzZXMgXFxcIlJhdGluZzpcXFwiIGluIHByb21wdHMgb3IgcHJvY2Vzc2VzIExMTSByZXNwb25zZXMgZm9yIG1lbW9yeSBzY29yaW5nLlwifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6Ikkgc2VlIHRoZSBpc3N1ZSBpbiB5b3VyIGxvZ3MuIEl0IGxvb2tzIGxpa2UgdGhlIExMTSBpcyBub3QgcmV0dXJuaW5nIGEgcmF0aW5nIHZhbHVlIHdoZW4gYXNrZWQgdG8gcmF0ZSB0aGUgcG9pZ25hbmN5IG9mIG1lbW9yaWVzLiBUaGlzIGlzIGhhcHBlbmluZyBpbiB0aGUgbWVtb3J5IHNjb3JpbmcgZnVuY3Rpb25hbGl0eSB3aGVyZSB0aGUgc3lzdGVtIGFza3MgdGhlIExMTSB0byByYXRlIGEgbWVtb3J5IG9uIGEgc2NhbGUgb2YgMS0xMCwgYnV0IHRoZSByZXNwb25zZSBpcyBlbXB0eSBhZnRlciBcIlJhdGluZzpcIi5cblxuTGV0IG1lIGludmVzdGlnYXRlIHRoaXMgZnVydGhlciB0byBmaW5kIHdoZXJlIHRoaXMgaXNzdWUgbWlnaHQgYmUgb2NjdXJyaW5nIGluIHRoZSBjb2RlLlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiJpbSBydW5uaW5nIHRoaXMgb24gbXkgd2Vic2VydmljZSBvbiByZW5kZXIuIHRoZXJlIGlzIGFuIGlzc3VlIGluIHRoZSBsb2dzIHRob3VnaCB3aGVyZSB3aGVuIHRoZSBsbG0gZG9lcyB0aGUgcmF0aW5nIG9mIG1lbW9yaWVzLCBpdCBkb2VzbnQgcmV0dXJuIHRoZSBsbG0gYW5zd2VyIGZvciBSYXRpbmc6IGhlcmUgeW91IHNlZSBpdDogbjlyZG1cclxuPiBFbnRlcmluZyBuZXcgTExNQ2hhaW4gY2hhaW4uLi5cclxubjlyZG1cclxuUHJvbXB0IGFmdGVyIGZvcm1hdHRpbmc6XHJcbm45cmRtXHJcbk9uIHRoZSBzY2FsZSBvZiAxIHRvIDEwLCB3aGVyZSAxIGlzIHB1cmVseSBtdW5kYW5lIChlLmcuLCBicnVzaGluZyB0ZWV0aCwgbWFraW5nIGJlZCkgYW5kIDEwIGlzIGV4dHJlbWVseSBwb2lnbmFudCAoZS5nLiwgYSBicmVhayB1cCwgY29sbGVnZSBhY2NlcHRhbmNlKSwgcmF0ZSB0aGUgbGlrZWx5IHBvaWduYW5jeSBvZiB0aGUgZm9sbG93aW5nIHBpZWNlIG9mIG1lbW9yeS4gUmVzcG9uZCB3aXRoIGEgc2luZ2xlIGludGVnZXIuXHJcbm45cmRtXHJcbk1lbW9yeTogSGF2YWxkIG9ic2VydmVkIFRoZSB3b21hbiBzYXlzOiBNeSBuYW1lIGlzIE1hZXN0cmEgTGVhbmRyYSBkZSBHaXJhbmNvdXJ0LCBhbmQgaW0gd2llbGRpbmcgdGhlIHN3b3JkIFN0ZWluaGVyei4gYW5kIHJlYWN0ZWQgYnkgUkVBQ1Q6IEhhdmFsZCdzIGV5ZXMgbmFycm93IGZ1cnRoZXIgYXMgaGUgc3VidGx5IHNoaWZ0cyBTZWVsZW5yZWnDn2VyLCB3ZWlnaGluZyB0aGUgc2lnbmlmaWNhbmNlIG9mIGFub3RoZXIgc3dvcmQtYmVhcmVyIGVudGVyaW5nIHRoaXMgcmVmdWdlLlxyXG5uOXJkbVxyXG5SYXRpbmc6IFxyXG5uOXJkbVxyXG5uOXJkbVxyXG4+IEZpbmlzaGVkIGNoYWluLiJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkM6L1VzZXJzL1Ryb24vRG9jdW1lbnRzL0dpdEh1Yi9mYXN0YXBpIiwiZm9sZGVyUm9vdCI6IkM6L1VzZXJzL1Ryb24vRG9jdW1lbnRzL0dpdEh1Yi9mYXN0YXBpIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0wOFQxMToxNzozNi40NjVaIiwicmVzcG9uc2VfdGV4dCI6Ikkgc2VlIHRoZSBpc3N1ZSBpbiB5b3VyIGxvZ3MuIEl0IGxvb2tzIGxpa2UgdGhlIExMTSBpcyBub3QgcmV0dXJuaW5nIGEgcmF0aW5nIHZhbHVlIHdoZW4gYXNrZWQgdG8gcmF0ZSB0aGUgcG9pZ25hbmN5IG9mIG1lbW9yaWVzLiBUaGlzIGlzIGhhcHBlbmluZyBpbiB0aGUgbWVtb3J5IHNjb3JpbmcgZnVuY3Rpb25hbGl0eSB3aGVyZSB0aGUgc3lzdGVtIGFza3MgdGhlIExMTSB0byByYXRlIGEgbWVtb3J5IG9uIGEgc2NhbGUgb2YgMS0xMCwgYnV0IHRoZSByZXNwb25zZSBpcyBlbXB0eSBhZnRlciBcIlJhdGluZzpcIi5cblxuTGV0IG1lIGludmVzdGlnYXRlIHRoaXMgZnVydGhlciB0byBmaW5kIHdoZXJlIHRoaXMgaXNzdWUgbWlnaHQgYmUgb2NjdXJyaW5nIGluIHRoZSBjb2RlLlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjIyZDFiMDMyLTQ5ODAtNGE0NS1iZmZkLWRiODAyYTIwNTEzMiIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUJQaVBiclZ6ZEs1Z3dMQTIxZnNwMVgiLCJ0b29sX25hbWUiOiJ3ZWItc2VhcmNoIiwiaW5wdXRfanNvbiI6IntcInF1ZXJ5XCI6IFwibGFuZ2NoYWluX2V4cGVyaW1lbnRhbCBnZW5lcmF0aXZlX2FnZW50cyBtZW1vcnkgc2NvcmluZyBpbXBsZW1lbnRhdGlvblwifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6Ik5vdyBJIG5lZWQgdG8gbG9vayBhdCB0aGUgTGFuZ0NoYWluIGltcGxlbWVudGF0aW9uIHRvIHVuZGVyc3RhbmQgaG93IHRoZSBtZW1vcnkgc2NvcmluZyB3b3JrcyBpbiB0aGUgZ2VuZXJhdGl2ZSBhZ2VudHMgbW9kdWxlLlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogY3VzdG9tX2FnZW50LnB5XG4jIEZpbGU6IGN1c3RvbV9hZ2VudC5weVxuZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWVcbmZyb20gdHlwaW5nIGltcG9ydCBUdXBsZSwgT3B0aW9uYWwsIEFueVxuaW1wb3J0IHJlXG5cbmZyb20gbGFuZ2NoYWluX2V4cGVyaW1lbnRhbC5nZW5lcmF0aXZlX2FnZW50cy5nZW5lcmF0aXZlX2FnZW50IGltcG9ydCBHZW5lcmF0aXZlQWdlbnRcbmZyb20gbGFuZ2NoYWluLnByb21wdHMgaW1wb3J0IFByb21wdFRlbXBsYXRlXG5mcm9tIGxhbmdjaGFpbi5jaGFpbnMgaW1wb3J0IExMTUNoYWluXG5cbmZyb20gdXRpbHMgaW1wb3J0IEJDb2xvcnNcblxuY2xhc3MgQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudChHZW5lcmF0aXZlQWdlbnQpOlxuICAgIGRlZiBfX2luaXRfXyhzZWxmLCAqKmRhdGE6IEFueSk6XG4gICAgICAgIHN1cGVyKCkuX19pbml0X18oKipkYXRhKVxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5PS0dSRUVOfURFQlVHIChBZ2VudCB7c2VsZi5uYW1lfSk6IEluaXRpYWxpemVkIEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnQsIFwiXG4gICAgICAgICAgICAgIGZcInVzaW5nIGJhc2UgR2VuZXJhdGl2ZUFnZW50IGxvZ2ljLntCQ29sb3JzLkVOREN9XCIpXG5cbiAgICBkZWYgZ2V0X2ludGVycHJldGVkX3JlYWN0aW9uKHNlbGYsIG9ic2VydmF0aW9uOiBzdHIsIG5vdzogT3B0aW9uYWxbZGF0ZXRpbWVdID0gTm9uZSkgLT4gVHVwbGVbc3RyLCBzdHIsIGJvb2xdOlxuICAgICAgICBjYWxsX3RpbWUgPSBub3cgb3IgZGF0ZXRpbWUubm93KClcbiAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuRElNfURFQlVHIChBZ2VudCB7c2VsZi5uYW1lfSk6IENhbGxpbmcgcGFyZW50J3MgZ2VuZXJhdGVfcmVhY3Rpb24gZm9yOiAne29ic2VydmF0aW9uWzo1MF19Li4uJ3tCQ29sb3JzLkVOREN9XCIpXG5cbiAgICAgICAgaXNfZGlhbG9ndWVfZmxhZywgcmVzdWx0X3N0ciA9IHN1cGVyKCkuZ2VuZXJhdGVfcmVhY3Rpb24ob2JzZXJ2YXRpb24sIG5vdz1jYWxsX3RpbWUpXG5cbiAgICAgICAgZXN0aW1hdGVkX29ic2VydmF0aW9uX2ltcG9ydGFuY2UgPSBGYWxzZVxuICAgICAgICB0cnk6XG4gICAgICAgICAgICBpZiBzZWxmLmxsbTpcbiAgICAgICAgICAgICAgICBwb2lnbmFuY3lfcHJvbXB0X3N0ciA9IChcbiAgICAgICAgICAgICAgICAgICAgXCJJcyB0aGUgZm9sbG93aW5nIG9ic2VydmF0aW9uIG11bmRhbmUgKGUuZy4sIGJydXNoaW5nIHRlZXRoKSBvciBwb2lnbmFudCAoZS5nLiwgYSBtYWpvciBsaWZlIGV2ZW50KT8gXCJcbiAgICAgICAgICAgICAgICAgICAgXCJBbnN3ZXIgd2l0aCAnbXVuZGFuZScgb3IgJ3BvaWduYW50Jy5cXG5PYnNlcnZhdGlvbjoge29ic2VydmF0aW9uX3RleHR9XFxuQW5zd2VyOlwiXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIHByb21wdCA9IFByb21wdFRlbXBsYXRlLmZyb21fdGVtcGxhdGUocG9pZ25hbmN5X3Byb21wdF9zdHIpXG4gICAgICAgICAgICAgICAgY2hhaW4gPSBMTE1DaGFpbihsbG09c2VsZi5sbG0sIHByb21wdD1wcm9tcHQpXG4gICAgICAgICAgICAgICAgcG9pZ25hbmN5X3Jlc3VsdCA9IGNoYWluLnJ1bihvYnNlcnZhdGlvbl90ZXh0PW9ic2VydmF0aW9uKS5zdHJpcCgpLmxvd2VyKClcbiAgICAgICAgICAgICAgICBpZiBcInBvaWduYW50XCIgaW4gcG9pZ25hbmN5X3Jlc3VsdDpcbiAgICAgICAgICAgICAgICAgICAgZXN0aW1hdGVkX29ic2VydmF0aW9uX2ltcG9ydGFuY2UgPSBUcnVlXG4gICAgICAgICAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuRElNfURFQlVHIChBZ2VudCB7c2VsZi5uYW1lfSk6IE9ic2VydmF0aW9uIHBvaWduYW5jeSBlc3RpbWF0ZWQgYXMgJ3twb2lnbmFuY3lfcmVzdWx0fScsIEFQSSBpbXBvcnRhbnQgZmxhZzoge2VzdGltYXRlZF9vYnNlcnZhdGlvbl9pbXBvcnRhbmNlfXtCQ29sb3JzLkVOREN9XCIpXG4gICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZV9wb2lnbmFuY3k6XG4gICAgICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5XQVJOSU5HfVdBUk4gKEFnZW50IHtzZWxmLm5hbWV9KTogQ291bGQgbm90IGVzdGltYXRlIG9ic2VydmF0aW9uIHBvaWduYW5jeSBmb3IgQVBJIGZsYWc6IHtlX3BvaWduYW5jeX17QkNvbG9ycy5FTkRDfVwiKVxuXG4gICAgICAgIGNvbnRlbnQgPSBzZWxmLl9jbGVhbl9yZXNwb25zZShyZXN1bHRfc3RyKVxuXG4gICAgICAgIGlmIGlzX2RpYWxvZ3VlX2ZsYWc6XG4gICAgICAgICAgICBhY3R1YWxfZGlhbG9ndWUgPSBjb250ZW50W2xlbihcInNhaWQgXCIpOl0uc3RyaXAoKSBpZiBjb250ZW50Lmxvd2VyKCkuc3RhcnRzd2l0aChcInNhaWQgXCIpIGVsc2UgY29udGVudFxuICAgICAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuT0tCTFVFfURFQlVHIChBZ2VudCB7c2VsZi5uYW1lfSk6IEludGVycHJldGVkIGFzIFNBWSwgQ29udGVudDogJ3thY3R1YWxfZGlhbG9ndWV9J3tCQ29sb3JzLkVOREN9XCIpXG4gICAgICAgICAgICByZXR1cm4gXCJTQVlcIiwgYWN0dWFsX2RpYWxvZ3VlLCBlc3RpbWF0ZWRfb2JzZXJ2YXRpb25faW1wb3J0YW5jZVxuICAgICAgICBlbHNlOlxuICAgICAgICAgICAgaWYgbm90IGNvbnRlbnQuc3RyaXAoKSBvciBjb250ZW50Lmxvd2VyKCkgPT0gXCJub25lXCI6XG4gICAgICAgICAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuRElNfURFQlVHIChBZ2VudCB7c2VsZi5uYW1lfSk6IEludGVycHJldGVkIGFzIElHTk9SRS57QkNvbG9ycy5FTkRDfVwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBcIklHTk9SRVwiLCBcIlwiLCBlc3RpbWF0ZWRfb2JzZXJ2YXRpb25faW1wb3J0YW5jZVxuICAgICAgICAgICAgZWxzZTpcbiAgICAgICAgICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5PS0dSRUVOfURFQlVHIChBZ2VudCB7c2VsZi5uYW1lfSk6IEludGVycHJldGVkIGFzIERPIChyZWFjdGlvbiksIENvbnRlbnQ6ICd7Y29udGVudH0ne0JDb2xvcnMuRU5EQ31cIilcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJET1wiLCBjb250ZW50LCBlc3RpbWF0ZWRfb2JzZXJ2YXRpb25faW1wb3J0YW5jZVxuLi4uXG5QYXRoOiByb3V0ZXJzL2FnZW50X3JvdXRlci5weVxuIyBGaWxlOiByb3V0ZXJzL2FnZW50X3JvdXRlci5weVxuaW1wb3J0IHRyYWNlYmFja1xuZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWVcbmZyb20gdHlwaW5nIGltcG9ydCBEaWN0LCBMaXN0LCBBbnksIFR1cGxlXG5mcm9tIHV1aWQgaW1wb3J0IHV1aWQ0XG5pbXBvcnQgbnVtcHkgYXMgbnBcblxuZnJvbSBmYXN0YXBpIGltcG9ydCBBUElSb3V0ZXIsIEhUVFBFeGNlcHRpb25cbmZyb20gbGFuZ2NoYWluX2NvcmUuZG9jdW1lbnRzIGltcG9ydCBEb2N1bWVudCAjIFJlcXVpcmVkIGZvciBmZXRjaF9tZW1vcmllcyB0eXBlIGhpbnRcblxuZnJvbSBjdXN0b21fYWdlbnQgaW1wb3J0IEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnRcbmZyb20gYWdlbnRfZmFjdG9yeSBpbXBvcnQgY3JlYXRlX25ld19hZ2VudF9pbnN0YW5jZVxuZnJvbSBzY2hlbWFzIGltcG9ydCAoXG4gICAgQ3JlYXRlQWdlbnRSZXEsIEdlbmVyYXRlUmVzcG9uc2VSZXEsIEdlbmVyYXRlUmVhY3Rpb25SZXNwb25zZSwgQWRkTWVtb3J5UmVxLFxuICAgIEZldGNoTWVtb3JpZXNSZXEsIFVwZGF0ZVN0YXR1c1JlcSwgQWdlbnRMaXN0UmVzcG9uc2UsIEFnZW50RGV0YWlsLFxuICAgIEFnZW50Q3JlYXRpb25SZXNwb25zZSwgQWRkZWRNZW1vcnlSZXNwb25zZSwgRmV0Y2hlZE1lbW9yaWVzUmVzcG9uc2UsXG4gICAgRmV0Y2hlZE1lbW9yaWVzRG9jdW1lbnQsIEFnZW50U3VtbWFyeVJlc3BvbnNlLCBEZWxldGVkQWdlbnRSZXNwb25zZVxuKVxuLi4uXG5cblxuZGVmIGdldF9hZ2VudF9tb2RlbF9kZXRhaWxzKGFnZW50OiBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50KSAtPiBUdXBsZVtzdHIsIHN0cl06XG4gICAgbGxtX21vZGVsX3VzZWQgPSBcInVua25vd25cIlxuICAgIGVtYmVkZGluZ19tb2RlbF91c2VkID0gXCJ1bmtub3duXCJcbiAgICBpZiBhZ2VudDpcbiAgICAgICAgaWYgaGFzYXR0cihhZ2VudCwgJ2xsbScpIGFuZCBhZ2VudC5sbG0gYW5kIGhhc2F0dHIoYWdlbnQubGxtLCAnbW9kZWxfbmFtZScpOlxuICAgICAgICAgICAgbGxtX21vZGVsX3VzZWQgPSBhZ2VudC5sbG0ubW9kZWxfbmFtZVxuICAgICAgICBpZiAoaGFzYXR0cihhZ2VudCwgJ21lbW9yeScpIGFuZCBhZ2VudC5tZW1vcnkgYW5kXG4gICAgICAgICAgICBoYXNhdHRyKGFnZW50Lm1lbW9yeSwgJ21lbW9yeV9yZXRyaWV2ZXInKSBhbmQgYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXIgYW5kXG4gICAgICAgICAgICBoYXNhdHRyKGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyLCAndmVjdG9yc3RvcmUnKSBhbmQgYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXIudmVjdG9yc3RvcmUgYW5kXG4gICAgICAgICAgICBoYXNhdHRyKGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyLnZlY3RvcnN0b3JlLCAnZW1iZWRkaW5nX2Z1bmN0aW9uJykgYW5kXG4gICAgICAgICAgICBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlci52ZWN0b3JzdG9yZS5lbWJlZGRpbmdfZnVuY3Rpb24gYW5kXG4gICAgICAgICAgICBoYXNhdHRyKGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyLnZlY3RvcnN0b3JlLmVtYmVkZGluZ19mdW5jdGlvbiwgJ21vZGVsJykpOlxuICAgICAgICAgICAgZW1iZWRkaW5nX21vZGVsX3VzZWQgPSBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlci52ZWN0b3JzdG9yZS5lbWJlZGRpbmdfZnVuY3Rpb24ubW9kZWxcbiAgICByZXR1cm4gbGxtX21vZGVsX3VzZWQsIGVtYmVkZGluZ19tb2RlbF91c2VkXG5cblxuQHJvdXRlci5wb3N0KFwiXCIsIHN0YXR1c19jb2RlPTIwMSwgcmVzcG9uc2VfbW9kZWw9QWdlbnRDcmVhdGlvblJlc3BvbnNlKVxuZGVmIGNyZWF0ZV9hZ2VudF9lbmRwb2ludChyZXE6IENyZWF0ZUFnZW50UmVxKTpcbiAgICBwcmludChmXCJ7QkNvbG9ycy5IRUFERVJ9REVCVUc6IC9hZ2VudHMgUE9TVCByZXF1ZXN0IHJlY2VpdmVkOiB7cmVxLm1vZGVsX2R1bXBfanNvbihleGNsdWRlX25vbmU9VHJ1ZSl9e0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICBhaWQgPSByZXEuYWdlbnRfaWQgb3Igc3RyKHV1aWQ0KCkpXG4gICAgaWYgYWlkIGluIGFnZW50c19kYjpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDAsIGRldGFpbD1mXCJBZ2VudCB3aXRoIGFnZW50X2lkICd7YWlkfScgYWxyZWFkeSBleGlzdHMuXCIpXG4gICAgdHJ5OlxuICAgICAgICBjdXJyZW50X2FnZW50X2luc3RhbmNlID0gY3JlYXRlX25ld19hZ2VudF9pbnN0YW5jZShcbiAgICAgICAgICAgIG5hbWU9cmVxLm5hbWUsIGFnZT1yZXEuYWdlLCB0cmFpdHM9cmVxLnRyYWl0cywgc3RhdHVzPXJlcS5zdGF0dXMsXG4gICAgICAgICAgICBzdW1tYXJ5X3JlZnJlc2hfc2Vjb25kcz1yZXEuc3VtbWFyeV9yZWZyZXNoX3NlY29uZHMsXG4gICAgICAgICAgICByZWZsZWN0aW9uX3RocmVzaG9sZD1yZXEucmVmbGVjdGlvbl90aHJlc2hvbGQsIHZlcmJvc2U9cmVxLnZlcmJvc2UsXG4gICAgICAgICAgICBsbG1fbW9kZWxfbmFtZT1yZXEubW9kZWxfbmFtZSwgZW1iZWRkaW5nX21vZGVsX25hbWU9cmVxLmVtYmVkZGluZ19tb2RlbF9uYW1lXG4gICAgICAgIClcbi4uLlxuXG4gICAgYWdlbnQ6IEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnQgPSBhZ2VudHNfZGJbYWdlbnRfaWRdXG4gICAgb3JpZ2luYWxfayA9IC0xXG4gICAgcmV0cmlldmVyID0gYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXJcbiAgICBpZiBoYXNhdHRyKHJldHJpZXZlciwgJ2snKTpcbiAgICAgICAgIG9yaWdpbmFsX2sgPSByZXRyaWV2ZXIua1xuXG4gICAgYXBpX3JlYWN0aW9uX3R5cGUsIGFwaV9jb250ZW50LCBvYnNlcnZhdGlvbl93YXNfaW1wb3J0YW50X2ZsYWcgPSBcIlVOS05PV05cIiwgXCJcIiwgRmFsc2VcbiAgICB0cnk6XG4gICAgICAgIGlmIHJlcS5rIGlzIG5vdCBOb25lIGFuZCByZXEuayA+IDAgYW5kIGhhc2F0dHIocmV0cmlldmVyLCAnaycpOlxuICAgICAgICAgICAgcmV0cmlldmVyLmsgPSByZXEua1xuICAgICAgICBcbiAgICAgICAgYXBpX3JlYWN0aW9uX3R5cGUsIGFwaV9jb250ZW50LCBvYnNlcnZhdGlvbl93YXNfaW1wb3J0YW50X2ZsYWcgPSBhZ2VudC5nZXRfaW50ZXJwcmV0ZWRfcmVhY3Rpb24ob2JzZXJ2YXRpb24sIGRhdGV0aW1lLm5vdygpKVxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5PS0dSRUVOfURFQlVHOiBhZ2VudC5nZXRfaW50ZXJwcmV0ZWRfcmVhY3Rpb24gY29tcGxldGVkLiBBUEkgVHlwZTogJ3thcGlfcmVhY3Rpb25fdHlwZX0nLCBJbXBvcnRhbnQ6IHtvYnNlcnZhdGlvbl93YXNfaW1wb3J0YW50X2ZsYWd9e0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbi4uLlxuXG5Acm91dGVyLnBvc3QoXCIve2FnZW50X2lkfS9hZGRfbWVtb3J5XCIsIHJlc3BvbnNlX21vZGVsPUFkZGVkTWVtb3J5UmVzcG9uc2UpXG5kZWYgYWRkX21lbW9yeV9lbmRwb2ludChhZ2VudF9pZDogc3RyLCByZXE6IEFkZE1lbW9yeVJlcSk6XG4gICAgaWYgYWdlbnRfaWQgbm90IGluIGFnZW50c19kYiBvciBhZ2VudHNfZGJbYWdlbnRfaWRdIGlzIE5vbmU6XG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NDA0LCBkZXRhaWw9ZlwiQWdlbnQgJ3thZ2VudF9pZH0nIG5vdCBmb3VuZCBvciBpbnZhbGlkLlwiKVxuICAgIHRleHRfdG9fYWRkID0gcmVxLnRleHRfdG9fbWVtb3JpemUuc3RyaXAoKVxuICAgIGlmIG5vdCB0ZXh0X3RvX2FkZDpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDAsIGRldGFpbD1cIk1lbW9yeSB0ZXh0IG1heSBub3QgYmUgZW1wdHkuXCIpXG4gICAgYWdlbnQgPSBhZ2VudHNfZGJbYWdlbnRfaWRdXG4gICAgdHJ5OlxuICAgICAgICBpZiBub3QgYWdlbnQubWVtb3J5OlxuICAgICAgICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZlwiQWdlbnQge2FnZW50X2lkfSBtZW1vcnkgbm90IGluaXRpYWxpemVkLlwiKVxuICAgICAgICBhZ2VudC5tZW1vcnkuYWRkX21lbW9yeSh0ZXh0X3RvX2FkZCwgbm93PWRhdGV0aW1lLm5vdygpKVxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJFcnJvciBhZGRpbmcgbWVtb3J5OiB7ZX1cIilcbiAgICByZXR1cm4gQWRkZWRNZW1vcnlSZXNwb25zZShzdGF0dXM9XCJzdWNjZXNzXCIsIGFkZGVkX21lbW9yeT10ZXh0X3RvX2FkZClcblxuQHJvdXRlci5wb3N0KFwiL3thZ2VudF9pZH0vZmV0Y2hfbWVtb3JpZXNcIiwgcmVzcG9uc2VfbW9kZWw9RmV0Y2hlZE1lbW9yaWVzUmVzcG9uc2UpXG5kZWYgZmV0Y2hfbWVtb3JpZXNfZW5kcG9pbnQoYWdlbnRfaWQ6IHN0ciwgcmVxOiBGZXRjaE1lbW9yaWVzUmVxKTpcbiAgICBpZiBhZ2VudF9pZCBub3QgaW4gYWdlbnRzX2RiIG9yIGFnZW50c19kYlthZ2VudF9pZF0gaXMgTm9uZTpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDQsIGRldGFpbD1mXCJBZ2VudCAne2FnZW50X2lkfScgbm90IGZvdW5kIG9yIGludmFsaWQuXCIpXG4gICAgb2JzZXJ2YXRpb24gPSByZXEub2JzZXJ2YXRpb24uc3RyaXAoKVxuICAgIGlmIG5vdCBvYnNlcnZhdGlvbjpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDAsIGRldGFpbD1cIk9ic2VydmF0aW9uIHRleHQgbWF5IG5vdCBiZSBlbXB0eSBmb3IgZmV0Y2hpbmcgbWVtb3JpZXMuXCIpXG5cbiAgICBhZ2VudCA9IGFnZW50c19kYlthZ2VudF9pZF1cbiAgICBpZiBub3QgYWdlbnQubWVtb3J5IG9yIG5vdCBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlcjpcbiAgICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZlwiQWdlbnQge2FnZW50X2lkfSBtZW1vcnkvcmV0cmlldmVyIG5vdCBpbml0aWFsaXplZC5cIilcblxuICAgIG9yaWdpbmFsX2ssIHJldHJpZXZlciA9IC0xLCBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlclxuICAgIGlmIGhhc2F0dHIocmV0cmlldmVyLCAnaycpOiBvcmlnaW5hbF9rID0gcmV0cmlldmVyLmtcbiAgICBcbiAgICByZXNwb25zZV9wYXlsb2FkX2RvY3M6IExpc3RbRmV0Y2hlZE1lbW9yaWVzRG9jdW1lbnRdID0gW11cbiAgICB0cnk6XG4gICAgICAgIHJlcXVlc3RlZF9rID0gcmV0cmlldmVyLmsgIyBEZWZhdWx0IHRvIHJldHJpZXZlcidzIGtcbiAgICAgICAgaWYgcmVxLmsgaXMgbm90IE5vbmUgYW5kIHJlcS5rID4gMCBhbmQgaGFzYXR0cihyZXRyaWV2ZXIsICdrJyk6XG4gICAgICAgICAgICByZXF1ZXN0ZWRfayA9IHJlcS5rXG4gICAgICAgICAgICByZXRyaWV2ZXIuayA9IHJlcXVlc3RlZF9rXG5cbiAgICAgICAgZG9jc19hbmRfc2NvcmVzOiBMaXN0W1R1cGxlW0RvY3VtZW50LCBmbG9hdF1dID0gW11cbiAgICAgICAgaWYgKGhhc2F0dHIocmV0cmlldmVyLCBcInZlY3RvcnN0b3JlXCIpIGFuZCByZXRyaWV2ZXIudmVjdG9yc3RvcmUgYW5kXG4gICAgICAgICAgICBoYXNhdHRyKHJldHJpZXZlci52ZWN0b3JzdG9yZSwgXCJzaW1pbGFyaXR5X3NlYXJjaF93aXRoX3JlbGV2YW5jZV9zY29yZXNcIikpOlxuICAgICAgICAgICAgZG9jc19hbmRfc2NvcmVzID0gcmV0cmlldmVyLnZlY3RvcnN0b3JlLnNpbWlsYXJpdHlfc2VhcmNoX3dpdGhfcmVsZXZhbmNlX3Njb3JlcyhvYnNlcnZhdGlvbiwgaz1yZXF1ZXN0ZWRfaylcbiAgICAgICAgZWxzZTpcbiAgICAgICAgICAgIGZldGNoZWRfZG9jc19vbmx5OiBMaXN0W0RvY3VtZW50XSA9IGFnZW50Lm1lbW9yeS5mZXRjaF9tZW1vcmllcyhvYnNlcnZhdGlvbiwgbm93PWRhdGV0aW1lLm5vdygpKVxuICAgICAgICAgICAgZG9jc19hbmRfc2NvcmVzID0gWyhkb2MsIDAuMCkgZm9yIGRvYyBpbiBmZXRjaGVkX2RvY3Nfb25seV1cblxuICAgICAgICBmb3IgZG9jLCBzY29yZSBpbiBkb2NzX2FuZF9zY29yZXM6XG4gICAgICAgICAgICBzZXJpYWxpemFibGVfbWV0YWRhdGEgPSB7XG4gICAgICAgICAgICAgICAgazogdi5pc29mb3JtYXQoKSBpZiBpc2luc3RhbmNlKHYsIGRhdGV0aW1lKSBlbHNlXG4gICAgICAgICAgICAgICAgICAgdi50b2xpc3QoKSBpZiBpc2luc3RhbmNlKHYsIG5wLm5kYXJyYXkpIGVsc2VcbiAgICAgICAgICAgICAgICAgICBmbG9hdCh2KSBpZiBpc2luc3RhbmNlKHYsIChucC5mbG9hdDMyLCBucC5mbG9hdDY0KSkgZWxzZVxuICAgICAgICAgICAgICAgICAgIGludCh2KSBpZiBpc2luc3RhbmNlKHYsIChucC5pbnQzMiwgbnAuaW50NjQpKSBlbHNlIHZcbiAgICAgICAgICAgICAgICBmb3IgaywgdiBpbiBkb2MubWV0YWRhdGEuaXRlbXMoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzcG9uc2VfcGF5bG9hZF9kb2NzLmFwcGVuZChGZXRjaGVkTWVtb3JpZXNEb2N1bWVudChcbiAgICAgICAgICAgICAgICBjb250ZW50PWRvYy5wYWdlX2NvbnRlbnQsIG1ldGFkYXRhPXNlcmlhbGl6YWJsZV9tZXRhZGF0YSwgcmVsZXZhbmNlX3Njb3JlPXNjb3JlXG4gICAgICAgICAgICApKVxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJFcnJvciBmZXRjaGluZyBtZW1vcmllczoge2V9XCIpXG4gICAgZmluYWxseTpcbiAgICAgICAgaWYgb3JpZ2luYWxfayAhPSAtMSBhbmQgaGFzYXR0cihyZXRyaWV2ZXIsICdrJyk6XG4gICAgICAgICAgICAgcmV0cmlldmVyLmsgPSBvcmlnaW5hbF9rXG4gICAgcmV0dXJuIEZldGNoZWRNZW1vcmllc1Jlc3BvbnNlKG1lbW9yaWVzPXJlc3BvbnNlX3BheWxvYWRfZG9jcylcbi4uLlxuUGF0aDogcHJvbXB0cy5weVxuIyBGaWxlOiBwcm9tcHRzLnB5XG5cbiMgLS0tIEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnQgUHJvbXB0cyAtLS1cblxuREVDSVNJT05fVEVNUExBVEUgPSAoXG4gICAgXCJZb3UgYXJlIHthZ2VudF9uYW1lfS5cXG5cIlxuICAgIFwiWW91ciBjb3JlIGNoYXJhY3RlcmlzdGljcyBhcmU6IHthZ2VudF90cmFpdHN9XFxuXCJcbiAgICBcIkl0IGlzIHtjdXJyZW50X3RpbWV9LlxcblwiXG4gICAgXCJZb3VyIHN0YXR1cyBpczoge2FnZW50X3N0YXR1c31cXG5cIlxuICAgIFwiWW91IG9ic2VydmU6IHtvYnNlcnZhdGlvbn1cXG5cIlxuICAgIFwiUmVsZXZhbnQgcmVjZW50IG1lbW9yaWVzOlxcbnttZW1vcnlfY29udGV4dH1cXG5cXG5cIlxuICAgIFwiQ29uc2lkZXJpbmcgeW91ciBwZXJzb25hbGl0eSAoZXNwZWNpYWxseSB0cmFpdHMgbGlrZSB7YWdlbnRfdHJhaXRzfSksIHRoZSBvYnNlcnZhdGlvbiwgYW5kIHJlY2VudCBtZW1vcmllcywgXCJcbiAgICBcIndoYXQgaXMgdGhlICptb3N0IGxpa2VseSB0eXBlKiBvZiBpbW1lZGlhdGUgcmVhY3Rpb24geW91IHdvdWxkIGhhdmU/IENob29zZSAqb25lKiBmcm9tOiBcIlxuICAgIFwiJ1NBWScgKHNwZWFrIGFsb3VkKSwgJ1RISU5LJyAoaW50ZXJuYWwgdGhvdWdodCBvbmx5KSwgJ0RPJyAocGVyZm9ybSBhIHBoeXNpY2FsIGFjdGlvbiksICdJR05PUkUnIChubyBzaWduaWZpY2FudCByZWFjdGlvbiwgcmVtYWluIGluIGN1cnJlbnQgc3RhdHVzKS5cIlxuICAgIFwiXFxuUmVhY3Rpb24gVHlwZSBDaG9pY2U6XCJcbilcblxuVEhPVUdIVF9URU1QTEFURSA9IChcbiAgICBcIllvdSBhcmUge2FnZW50X25hbWV9LlxcblwiXG4gICAgXCJZb3VyIGNvcmUgY2hhcmFjdGVyaXN0aWNzIGFyZToge2FnZW50X3RyYWl0c31cXG5cIlxuICAgIFwiSXQgaXMge2N1cnJlbnRfdGltZX0uXFxuXCJcbiAgICBcIllvdXIgc3RhdHVzIGlzOiB7YWdlbnRfc3RhdHVzfVxcblwiXG4gICAgXCJZb3Ugb2JzZXJ2ZToge29ic2VydmF0aW9ufVxcblwiXG4gICAgXCJSZWxldmFudCByZWNlbnQgbWVtb3JpZXM6XFxue21lbW9yeV9jb250ZXh0fVxcblwiXG4gICAgXCJSZWxhdGlvbnNoaXAgY29udGV4dDoge3JlbGF0aW9uc2hpcF9jb250ZXh0fVxcblxcblwiXG4gICAgXCJDb25zaWRlcmluZyB5b3VyIHBlcnNvbmFsaXR5IGFuZCB0aGUgc2l0dWF0aW9uLCB3aGF0IGlzIHlvdXIgKmludGVybmFsIHRob3VnaHQqIG9yICphc3Nlc3NtZW50KiByaWdodCBub3cgaW4gcmVzcG9uc2UgdG8gdGhlIG9ic2VydmF0aW9uPyBcIlxuICAgIFwiRGVzY3JpYmUgdGhlIHRob3VnaHQgY29uY2lzZWx5LiBEbyAqbm90KiBkZXNjcmliZSBhY3Rpb25zIG9yIHNwZWVjaC4gRXhhbXBsZTogKEludGVybmFsIHRob3VnaHQpIFRoYXQgc2VlbXMgc3VzcGljaW91cy5cIlxuICAgIFwiXFxuSW50ZXJuYWwgVGhvdWdodDpcIlxuKVxuLi4uXG5cblNUQVRVU19VUERBVEVfVEVNUExBVEUgPSAoXG4gICAgXCJZb3UgYXJlIHthZ2VudF9uYW1lfS5cXG5cIlxuICAgIFwiWW91ciBjb3JlIGNoYXJhY3RlcmlzdGljcyBhcmU6IHthZ2VudF90cmFpdHN9XFxuXCJcbiAgICBcIllvdXIgcHJldmlvdXMgc3RhdHVzIHdhczoge3ByZXZpb3VzX3N0YXR1c31cXG5cIlxuICAgIFwiWW91IGp1c3QgcGVyZm9ybWVkIHRoZSBhY3Rpb246IHthY3Rpb25fdGFrZW59XFxuXCJcbiAgICBcIkJhc2VkIG9uIHRoaXMgYWN0aW9uLCB3aGF0IGlzIHlvdXIgY29uY2lzZSwgdXBkYXRlZCBzdGF0dXM/IERlc2NyaWJlIGl0IGluIHRoZSBmaXJzdCBwZXJzb24gKGUuZy4sICdTdGFuZGluZyBhbGVydC4nLCAnU2l0dGluZyBhbmQgb2JzZXJ2aW5nLicpLlwiXG4gICAgXCJcXG5VcGRhdGVkIFN0YXR1czpcIlxuKVxuXG5FTlRJVFlfRVhUUkFDVElPTl9URU1QTEFURSA9IChcbiAgICBcIkluIHRoZSBmb2xsb3dpbmcgb2JzZXJ2YXRpb24sIGlkZW50aWZ5IHRoZSBtYWluIGVudGl0eSBvciBwZXJzb24gT1RIRVIgVEhBTiB7YWdlbnRfbmFtZX0gd2hvIGlzIGJlaW5nIG9ic2VydmVkLiBcIlxuICAgIFwiSWYgdGhlcmUgYXJlIG11bHRpcGxlIGVudGl0aWVzLCBpZGVudGlmeSB0aGUgbW9zdCBwcm9taW5lbnQgb25lLiBcIlxuICAgIFwiSWYgdGhlcmUgaXMgbm8gZW50aXR5IG90aGVyIHRoYW4ge2FnZW50X25hbWV9LCByZXNwb25kIHdpdGggJ25vIG90aGVyIGVudGl0eScuXFxuXFxuXCJcbiAgICBcIk9ic2VydmF0aW9uOiB7b2JzZXJ2YXRpb259XFxuXFxuXCJcbiAgICBcIk1haW4gZW50aXR5IChub3Qge2FnZW50X25hbWV9KTpcIlxuKVxuXG5FTlRJVFlfQUNUSU9OX1RFTVBMQVRFID0gKFxuICAgIFwiQmFzZWQgb24gdGhlIGZvbGxvd2luZyBvYnNlcnZhdGlvbiwgd2hhdCBpcyB7ZW50aXR5fSBkb2luZz8gRGVzY3JpYmUgdGhlaXIgYWN0aW9ucyBjb25jaXNlbHkuXFxuXFxuXCJcbiAgICBcIk9ic2VydmF0aW9uOiB7b2JzZXJ2YXRpb259XFxuXFxuXCJcbiAgICBcIldoYXQge2VudGl0eX0gaXMgZG9pbmc6XCJcbilcblxuUkVMQVRJT05TSElQX1NVTU1BUllfVEVNUExBVEUgPSAoXG4gICAgXCJCYXNlZCBvbiB5b3VyIG1lbW9yaWVzLCB3aGF0IGlzIHlvdXIgcmVsYXRpb25zaGlwIG9yIGtub3dsZWRnZSBhYm91dCB7ZW50aXR5X25hbWV9P1xcblwiXG4gICAgXCJDb25zaWRlcjpcXG5cIlxuICAgIFwiMS4gSGF2ZSB5b3UgbWV0IHtlbnRpdHlfbmFtZX0gYmVmb3JlP1xcblwiXG4gICAgXCIyLiBEbyB5b3UgaGF2ZSBhbnkgaGlzdG9yeSB3aXRoIHtlbnRpdHlfbmFtZX0/XFxuXCJcbiAgICBcIjMuIERvIHlvdSBoYXZlIGFueSBmZWVsaW5ncyBvciBvcGluaW9ucyBhYm91dCB7ZW50aXR5X25hbWV9P1xcblwiXG4gICAgXCI0LiBJcyB0aGVyZSBhbnl0aGluZyBub3RhYmxlIGFib3V0IHtlbnRpdHlfbmFtZX0/XFxuXFxuXCJcbiAgICBcIkNvbnRleHQgZnJvbSB5b3VyIG1lbW9yaWVzOlxcbntyZWxldmFudF9tZW1vcmllc31cXG5cXG5cIlxuICAgIFwiQ3VycmVudCBvYnNlcnZhdGlvbjoge2VudGl0eV9uYW1lfSBpcyB7ZW50aXR5X2FjdGlvbn1cXG5cXG5cIlxuICAgIFwiUmVsYXRpb25zaGlwIHdpdGgge2VudGl0eV9uYW1lfSAoYmUgY29uY2lzZSwgaWYgbm8gcmVsYXRpb25zaGlwIGV4aXN0cywgc3RhdGUgdGhhdCBjbGVhcmx5KTpcIlxuKVxuXG5QT0lHTkFOQ1lfU0NPUklOR19GQUxMQkFDS19URU1QTEFURSA9IChcbiAgICBcIlJhdGUgdGhlIHBvaWduYW5jeSBvZiB0aGlzIG9ic2VydmF0aW9uIG9uIGEgc2NhbGUgb2YgMSB0byAxMCAoaW50ZWdlcik6IHtvYnNlcnZhdGlvbn1cXG5SYXRpbmc6XCJcbilcbi4uLlxuUGF0aDogcmVxdWlyZW1lbnRzLnR4dFxuIyBjb3JlIHdlYiBmcmFtZXdvcmtcbmZhc3RhcGlbYWxsXVxuXG4jIExhbmdDaGFpbiBwcmltaXRpdmVzXG5sYW5nY2hhaW5+PTAuMiAgICAgICAgICAjIGNvcmVcbmxhbmdjaGFpbi1leHBlcmltZW50YWx+PTAuMiAgIyBjb250YWlucyBnZW5lcmF0aXZlX2FnZW50c1xubGFuZ2NoYWluLWNvbW11bml0eX49MC4yXG5sYW5nY2hhaW4tb3BlbmFpfj0wLjEgICMgaG91c2VzIENoYXRPcGVuQUkgJiBPcGVuQUlFbWJlZGRpbmdzXG5cbiMgTExNICsgZW1iZWRkaW5ncyAocGljayB0aGUgcHJvdmlkZXIgeW914oCZbGwgcmVhbGx5IHVzZSlcbm9wZW5haT49MS4yNS4wXG50aWt0b2tlbj49MC42LjBcblxuIyBzaW1wbGUgaW7igJFwcm9jZXNzIHZlY3RvciBzdG9yZSBmb3IgYWdlbnQgbWVtb3J5XG5mYWlzcy1jcHU+PTEuOC4wXG4uLi5cblBhdGg6IGFnZW50X2ZhY3RvcnkucHlcbiMgRmlsZTogYWdlbnRfZmFjdG9yeS5weVxuaW1wb3J0IHRyYWNlYmFja1xuZnJvbSB0eXBpbmcgaW1wb3J0IE9wdGlvbmFsXG5cbmltcG9ydCBmYWlzc1xuZnJvbSBmYXN0YXBpIGltcG9ydCBIVFRQRXhjZXB0aW9uXG5mcm9tIGxhbmdjaGFpbl9vcGVuYWkgaW1wb3J0IENoYXRPcGVuQUksIE9wZW5BSUVtYmVkZGluZ3NcbmZyb20gbGFuZ2NoYWluX2NvbW11bml0eS52ZWN0b3JzdG9yZXMgaW1wb3J0IEZBSVNTXG5mcm9tIGxhbmdjaGFpbl9jb21tdW5pdHkuZG9jc3RvcmUuaW5fbWVtb3J5IGltcG9ydCBJbk1lbW9yeURvY3N0b3JlXG5mcm9tIGxhbmdjaGFpbi5yZXRyaWV2ZXJzIGltcG9ydCBUaW1lV2VpZ2h0ZWRWZWN0b3JTdG9yZVJldHJpZXZlclxuZnJvbSBsYW5nY2hhaW5fZXhwZXJpbWVudGFsLmdlbmVyYXRpdmVfYWdlbnRzIGltcG9ydCBHZW5lcmF0aXZlQWdlbnRNZW1vcnlcbmZyb20gbGFuZ2NoYWluX2NvbW11bml0eS52ZWN0b3JzdG9yZXMudXRpbHMgaW1wb3J0IERpc3RhbmNlU3RyYXRlZ3lcblxuZnJvbSBjdXN0b21fYWdlbnQgaW1wb3J0IEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnRcbmZyb20gdXRpbHMgaW1wb3J0IEJDb2xvcnNcbmZyb20gY29uZmlnIGltcG9ydCBERUZBVUxUX0NIQVRfTU9ERUwsIERFRkFVTFRfRU1CRURESU5HX01PREVMXG5cblxuZGVmIGNyZWF0ZV9uZXdfYWdlbnRfaW5zdGFuY2UoXG4gICAgbmFtZTogc3RyLFxuICAgIGFnZTogaW50LFxuICAgIHRyYWl0czogc3RyLFxuICAgIHN0YXR1czogc3RyLFxuICAgIHN1bW1hcnlfcmVmcmVzaF9zZWNvbmRzOiBpbnQsXG4gICAgcmVmbGVjdGlvbl90aHJlc2hvbGQ6IGludCxcbiAgICB2ZXJib3NlOiBib29sLFxuICAgIGxsbV9tb2RlbF9uYW1lOiBPcHRpb25hbFtzdHJdID0gTm9uZSxcbiAgICBlbWJlZGRpbmdfbW9kZWxfbmFtZTogT3B0aW9uYWxbc3RyXSA9IE5vbmVcbikgLT4gQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudDpcbiAgICBwcmludChmXCJ7QkNvbG9ycy5PS0JMVUV9REVCVUc6IGNyZWF0ZV9uZXdfYWdlbnRfaW5zdGFuY2UgY2FsbGVkIGZvciBhZ2VudCAne0JDb2xvcnMuQk9MRH17bmFtZX17QkNvbG9ycy5FTkRDfXtCQ29sb3JzLk9LQkxVRX0ne0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcblxuICAgIGVmZmVjdGl2ZV9sbG1fbW9kZWwgPSBsbG1fbW9kZWxfbmFtZSBpZiBsbG1fbW9kZWxfbmFtZSBhbmQgbGxtX21vZGVsX25hbWUuc3RyaXAoKSBlbHNlIERFRkFVTFRfQ0hBVF9NT0RFTFxuICAgIHRyeTpcbiAgICAgICAgYWdlbnRfbGxtID0gQ2hhdE9wZW5BSShtb2RlbF9uYW1lPWVmZmVjdGl2ZV9sbG1fbW9kZWwsIHRlbXBlcmF0dXJlPTAuNylcbiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLkZBSUx9RVJST1JfU1RBQ0tUUkFDRTogRmFpbGVkIHRvIGluaXRpYWxpemUgTExNIGZvciBhZ2VudCAne25hbWV9JyB3aXRoIG1vZGVsICd7ZWZmZWN0aXZlX2xsbV9tb2RlbH0nOiB7ZX17QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKClcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJGYWlsZWQgdG8gaW5pdGlhbGl6ZSBMTE0gd2l0aCBtb2RlbCAne2VmZmVjdGl2ZV9sbG1fbW9kZWx9Jzoge2V9XCIpXG5cbiAgICBlZmZlY3RpdmVfZW1iZWRkaW5nX21vZGVsID0gZW1iZWRkaW5nX21vZGVsX25hbWUgaWYgZW1iZWRkaW5nX21vZGVsX25hbWUgYW5kIGVtYmVkZGluZ19tb2RlbF9uYW1lLnN0cmlwKCkgZWxzZSBERUZBVUxUX0VNQkVERElOR19NT0RFTFxuICAgIGRpbSA9IDBcbiAgICB0cnk6XG4gICAgICAgIGFnZW50X2VtYmVkZGluZ3MgPSBPcGVuQUlFbWJlZGRpbmdzKG1vZGVsPWVmZmVjdGl2ZV9lbWJlZGRpbmdfbW9kZWwpXG4gICAgICAgIHByb2JlX2Zvcl9kaW0gPSBhZ2VudF9lbWJlZGRpbmdzLmVtYmVkX3F1ZXJ5KFwiZ2V0X2RpbV9wcm9iZV9mb3JfYWdlbnRcIilcbiAgICAgICAgZGltID0gbGVuKHByb2JlX2Zvcl9kaW0pXG4gICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5GQUlMfUVSUk9SX1NUQUNLVFJBQ0U6IEZhaWxlZCB0byBpbml0aWFsaXplIG9yIHRlc3QgT3BlbkFJRW1iZWRkaW5ncyBmb3IgYWdlbnQgJ3tuYW1lfScgd2l0aCBtb2RlbCAne2VmZmVjdGl2ZV9lbWJlZGRpbmdfbW9kZWx9Jzoge2V9e0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICAgICAgdHJhY2ViYWNrLnByaW50X2V4YygpXG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZlwiRmFpbGVkIHRvIGluaXRpYWxpemUvdGVzdCBlbWJlZGRpbmdzIHdpdGggbW9kZWwgJ3tlZmZlY3RpdmVfZW1iZWRkaW5nX21vZGVsfSc6IHtlfVwiKVxuXG4gICAgcHJpbnQoZlwie0JDb2xvcnMuRElNfURFQlVHOiBTZXR0aW5nIHVwIEZBSVNTIGluZGV4IGZvciBhZ2VudCAne25hbWV9JyAoZGltOiB7ZGltfSkuIFVzaW5nIElubmVyIFByb2R1Y3QgKGZvciBDb3NpbmUpLntCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgdHJ5OlxuICAgICAgICBpbmRleCA9IGZhaXNzLkluZGV4RmxhdElQKGRpbSlcbiAgICAgICAgdmVjdG9yc3RvcmUgPSBGQUlTUyhcbiAgICAgICAgICAgIGVtYmVkZGluZ19mdW5jdGlvbj1hZ2VudF9lbWJlZGRpbmdzLFxuICAgICAgICAgICAgaW5kZXg9aW5kZXgsXG4gICAgICAgICAgICBkb2NzdG9yZT1Jbk1lbW9yeURvY3N0b3JlKHt9KSxcbiAgICAgICAgICAgIGluZGV4X3RvX2RvY3N0b3JlX2lkPXt9LFxuICAgICAgICAgICAgbm9ybWFsaXplX0wyPVRydWUsXG4gICAgICAgICAgICBkaXN0YW5jZV9zdHJhdGVneT1EaXN0YW5jZVN0cmF0ZWd5Lk1BWF9JTk5FUl9QUk9EVUNUXG4gICAgICAgIClcbiAgICAgICAgcmV0cmlldmVyID0gVGltZVdlaWdodGVkVmVjdG9yU3RvcmVSZXRyaWV2ZXIoXG4gICAgICAgICAgICB2ZWN0b3JzdG9yZT12ZWN0b3JzdG9yZSwgaz0xNSwgZGVjYXlfcmF0ZT0wLjAxXG4gICAgICAgIClcbiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLkZBSUx9RVJST1JfU1RBQ0tUUkFDRTogRmFpbGVkIGR1cmluZyBGQUlTUyBzZXR1cCBmb3IgYWdlbnQgJ3tuYW1lfSc6IHtlfXtCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgICAgIHRyYWNlYmFjay5wcmludF9leGMoKVxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTUwMCwgZGV0YWlsPWZcIkZhaWxlZCBkdXJpbmcgRkFJU1Mgc2V0dXA6IHtlfVwiKVxuXG4gICAgcHJpbnQoZlwie0JDb2xvcnMuRElNfURFQlVHOiBTZXR0aW5nIHVwIEdlbmVyYXRpdmVBZ2VudE1lbW9yeSBmb3IgYWdlbnQgJ3tuYW1lfScuLi57QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgIHRyeTpcbiAgICAgICAgYWN0dWFsX3JlZmxlY3RfZm9yX21lbW9yeSA9IGZsb2F0KHJlZmxlY3Rpb25fdGhyZXNob2xkKSBpZiByZWZsZWN0aW9uX3RocmVzaG9sZCA+IDAgZWxzZSBOb25lXG4gICAgICAgIG1lbW9yeV9pbnN0YW5jZSA9IEdlbmVyYXRpdmVBZ2VudE1lbW9yeShcbiAgICAgICAgICAgIGxsbT1hZ2VudF9sbG0sXG4gICAgICAgICAgICBtZW1vcnlfcmV0cmlldmVyPXJldHJpZXZlcixcbiAgICAgICAgICAgIHJlZmxlY3Rpb25fdGhyZXNob2xkPWFjdHVhbF9yZWZsZWN0X2Zvcl9tZW1vcnksXG4gICAgICAgICAgICB2ZXJib3NlPXZlcmJvc2UsXG4gICAgICAgIClcbiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLkZBSUx9RVJST1JfU1RBQ0tUUkFDRTogRmFpbGVkIGR1cmluZyBHZW5lcmF0aXZlQWdlbnRNZW1vcnkgc2V0dXAgZm9yIGFnZW50ICd7bmFtZX0nOiB7ZX17QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKClcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJGYWlsZWQgZHVyaW5nIEdlbmVyYXRpdmVBZ2VudE1lbW9yeSBzZXR1cDoge2V9XCIpXG5cbiAgICBwcmludChmXCJ7QkNvbG9ycy5ESU19REVCVUc6IEluaXRpYWxpemluZyBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50ICd7bmFtZX0nLi4ue0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICB0cnk6XG4gICAgICAgIGFnZW50ID0gQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudChcbiAgICAgICAgICAgIG5hbWU9bmFtZSxcbiAgICAgICAgICAgIGFnZT1hZ2UsXG4gICAgICAgICAgICB0cmFpdHM9dHJhaXRzLFxuICAgICAgICAgICAgc3RhdHVzPXN0YXR1cyxcbiAgICAgICAgICAgIG1lbW9yeT1tZW1vcnlfaW5zdGFuY2UsXG4gICAgICAgICAgICBsbG09YWdlbnRfbGxtLFxuICAgICAgICAgICAgc3VtbWFyeV9yZWZyZXNoX3NlY29uZHM9c3VtbWFyeV9yZWZyZXNoX3NlY29uZHMsXG4gICAgICAgICAgICB2ZXJib3NlPXZlcmJvc2UsXG4gICAgICAgIClcbiAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuT0tHUkVFTn1ERUJVRzogQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudCAne25hbWV9JyBpbml0aWFsaXplZCBzdWNjZXNzZnVsbHkue0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICAgICAgcmV0dXJuIGFnZW50XG4gICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5GQUlMfUVSUk9SX1NUQUNLVFJBQ0U6IEZhaWxlZCBkdXJpbmcgQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudCBpbml0aWFsaXphdGlvbiBmb3IgYWdlbnQgJ3tuYW1lfSc6IHtlfXtCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgICAgIHRyYWNlYmFjay5wcmludF9leGMoKVxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTUwMCwgZGV0YWlsPWZcIkZhaWxlZCBkdXJpbmcgQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudCBpbml0aWFsaXphdGlvbjoge2V9XCIpXG4uLi5cblBhdGg6IHNjaGVtYXMucHlcbiMgRmlsZTogc2NoZW1hcy5weVxuZnJvbSB0eXBpbmcgaW1wb3J0IE9wdGlvbmFsLCBMaXN0LCBEaWN0LCBBbnlcbmZyb20gcHlkYW50aWMgaW1wb3J0IEJhc2VNb2RlbCwgRmllbGRcblxuY2xhc3MgQ3JlYXRlQWdlbnRSZXEoQmFzZU1vZGVsKTpcbiAgICBuYW1lOiBzdHJcbiAgICBhZ2U6IGludFxuICAgIHRyYWl0czogc3RyXG4gICAgc3RhdHVzOiBzdHJcbiAgICBhZ2VudF9pZDogT3B0aW9uYWxbc3RyXSA9IE5vbmVcbiAgICBzdW1tYXJ5X3JlZnJlc2hfc2Vjb25kczogaW50ID0gRmllbGQoZGVmYXVsdD0zNjAwLCBnZT0wKVxuICAgIHJlZmxlY3Rpb25fdGhyZXNob2xkOiBpbnQgPSBGaWVsZChkZWZhdWx0PTAsIGdlPTApXG4gICAgdmVyYm9zZTogYm9vbCA9IEZhbHNlXG4gICAgbW9kZWxfbmFtZTogT3B0aW9uYWxbc3RyXSA9IE5vbmVcbiAgICBlbWJlZGRpbmdfbW9kZWxfbmFtZTogT3B0aW9uYWxbc3RyXSA9IE5vbmVcblxuY2xhc3MgR2VuZXJhdGVSZXNwb25zZVJlcShCYXNlTW9kZWwpOlxuICAgIHByb21wdDogc3RyXG4gICAgazogT3B0aW9uYWxbaW50XSA9IEZpZWxkKGRlZmF1bHQ9Tm9uZSwgZ3Q9MClcblxuY2xhc3MgR2VuZXJhdGVSZWFjdGlvblJlc3BvbnNlKEJhc2VNb2RlbCk6XG4gICAgYWdlbnRfbmFtZTogc3RyXG4gICAgcmVhY3Rpb25fdHlwZTogc3RyICMgU0FZLCBUSElOSywgRE8sIElHTk9SRSwgVU5LTk9XTlxuICAgIGNvbnRlbnQ6IHN0clxuICAgIG9ic2VydmF0aW9uX3dhc19pbXBvcnRhbnQ6IGJvb2xcblxuY2xhc3MgQWRkTWVtb3J5UmVxKEJhc2VNb2RlbCk6XG4gICAgdGV4dF90b19tZW1vcml6ZTogc3RyXG5cbmNsYXNzIEZldGNoTWVtb3JpZXNSZXEoQmFzZU1vZGVsKTpcbiAgICBvYnNlcnZhdGlvbjogc3RyXG4gICAgazogT3B0aW9uYWxbaW50XSA9IEZpZWxkKGRlZmF1bHQ9Tm9uZSwgZ3Q9MClcblxuY2xhc3MgVXBkYXRlU3RhdHVzUmVxKEJhc2VNb2RlbCk6XG4gICAgbmV3X3N0YXR1czogc3RyXG5cbmNsYXNzIEFnZW50RGV0YWlsKEJhc2VNb2RlbCk6XG4gICAgYWdlbnRfaWQ6IHN0clxuICAgIG5hbWU6IHN0clxuICAgIHN0YXR1czogc3RyXG4gICAgbGxtX21vZGVsOiBzdHJcbiAgICBlbWJlZGRpbmdfbW9kZWw6IHN0clxuXG5jbGFzcyBBZ2VudExpc3RSZXNwb25zZShCYXNlTW9kZWwpOlxuICAgIGFnZW50czogTGlzdFtBZ2VudERldGFpbF1cblxuY2xhc3MgQWdlbnRDcmVhdGlvblJlc3BvbnNlKEJhc2VNb2RlbCk6XG4gICAgYWdlbnRfaWQ6IHN0clxuICAgIG5hbWU6IHN0clxuICAgIGxsbV9tb2RlbF91c2VkOiBzdHJcbiAgICBlbWJlZGRpbmdfbW9kZWxfdXNlZDogc3RyXG5cbmNsYXNzIFNpbXBsZVN0YXR1c1Jlc3BvbnNlKEJhc2VNb2RlbCk6XG4gICAgc3RhdHVzOiBzdHJcbiAgICBtZXNzYWdlOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuXG5jbGFzcyBBZGRlZE1lbW9yeVJlc3BvbnNlKEJhc2VNb2RlbCk6XG4gICAgc3RhdHVzOiBzdHJcbiAgICBhZGRlZF9tZW1vcnk6IHN0clxuXG5jbGFzcyBGZXRjaGVkTWVtb3JpZXNEb2N1bWVudChCYXNlTW9kZWwpOlxuICAgIGNvbnRlbnQ6IHN0clxuICAgIG1ldGFkYXRhOiBEaWN0W3N0ciwgQW55XVxuICAgIHJlbGV2YW5jZV9zY29yZTogZmxvYXRcblxuY2xhc3MgRmV0Y2hlZE1lbW9yaWVzUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBtZW1vcmllczogTGlzdFtGZXRjaGVkTWVtb3JpZXNEb2N1bWVudF1cbi4uLlxuUGF0aDogY29uZmlnLnB5XG4jIEZpbGU6IGNvbmZpZy5weVxuaW1wb3J0IG9zXG5cbkRFRkFVTFRfQ0hBVF9NT0RFTCA9IFwiZ3B0LTRvLW1pbmlcIlxuREVGQVVMVF9FTUJFRERJTkdfTU9ERUwgPSBcInRleHQtZW1iZWRkaW5nLTMtc21hbGxcIlxuXG5PUEVOQUlfQVBJX0tFWV9TRVQgPSBib29sKG9zLmdldGVudihcIk9QRU5BSV9BUElfS0VZXCIpKVxuLi4uXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFINW94dmR5MmhqQnQzWVhLZFo2UGFUIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiQzovVXNlcnMvVHJvbi9Eb2N1bWVudHMvR2l0SHViL2Zhc3RhcGkiLCJmb2xkZXJSb290IjoiQzovVXNlcnMvVHJvbi9Eb2N1bWVudHMvR2l0SHViL2Zhc3RhcGkifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTA4VDExOjE3OjQ3LjY0M1oiLCJyZXNwb25zZV90ZXh0IjoiTm93IEkgbmVlZCB0byBsb29rIGF0IHRoZSBMYW5nQ2hhaW4gaW1wbGVtZW50YXRpb24gdG8gdW5kZXJzdGFuZCBob3cgdGhlIG1lbW9yeSBzY29yaW5nIHdvcmtzIGluIHRoZSBnZW5lcmF0aXZlIGFnZW50cyBtb2R1bGUuXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiZmE2MjZmMTItYWZhYy00ZTE0LWJkNGYtMmEzM2Q5NzhkZTJkIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxQnRtdkY2cFROY2NrYVRnekN1em03ZCIsInRvb2xfbmFtZSI6IndlYi1mZXRjaCIsImlucHV0X2pzb24iOiJ7XCJ1cmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vbGFuZ2NoYWluLWFpL2xhbmdjaGFpbi9ibG9iL21hc3Rlci9saWJzL2V4cGVyaW1lbnRhbC9sYW5nY2hhaW5fZXhwZXJpbWVudGFsL2dlbmVyYXRpdmVfYWdlbnRzL21lbW9yeS5weVwifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkxldCBtZSBsb29rIGF0IHRoZSBMYW5nQ2hhaW4gZXhwZXJpbWVudGFsIGdlbmVyYXRpdmUgYWdlbnRzIGNvZGUgZGlyZWN0bHkgdG8gdW5kZXJzdGFuZCBob3cgbWVtb3J5IHNjb3Jpbmcgd29ya3MuXG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiItIFtBIERlZXAgRGl2ZSBJbnRvIExhbmdDaGFpbidzIEdlbmVyYXRpdmUgQWdlbnRzIHwgYmxvZ19wb3N0cyAuLi5dKGh0dHBzOi8vd2FuZGIuYWkvdmluY2VudHR1L2Jsb2dfcG9zdHMvcmVwb3J0cy9BLURlZXAtRGl2ZS1JbnRvLUxhbmdDaGFpbi1zLUdlbmVyYXRpdmUtQWdlbnRzLS1WbWxsZHpvMU16TXdOakkzKVxuICBTZXAgNywgMjAyMyAuLi4gLi4uIExhbmdDaGFpbidzIGltcGxlbWVudGF0aW9uIG9mIGdlbmVyYXRpdmUgYWdlbnRzIC4uLiBhZGRfbWVtb3J5OiBHaXZlbiBhIHN0cmluZyBtZW1vcnlfY29udGVudCBhbmQgYSBkYXRldGltZSBub3csIGZpcnN0LCBzY29yZSB0aGUgbWVtb3J5J3PCoC4uLlxuXG4tIFtsYW5nY2hhaW5fZXhwZXJpbWVudGFsIDAuMC42NSDigJQgTGFuZ0NoYWluIDAuMi4xN10oaHR0cHM6Ly9hcGkucHl0aG9uLmxhbmdjaGFpbi5jb20vZW4vbGF0ZXN0L2V4cGVyaW1lbnRhbF9hcGlfcmVmZXJlbmNlLmh0bWwpXG4gIEFnZW50IGFzIGEgY2hhcmFjdGVyIHdpdGggbWVtb3J5IGFuZCBpbm5hdGUgY2hhcmFjdGVyaXN0aWNzLiBnZW5lcmF0aXZlX2FnZW50cy5tZW1vcnkuR2VuZXJhdGl2ZUFnZW50TWVtb3J5LiBNZW1vcnkgZm9yIHRoZSBnZW5lcmF0aXZlIGFnZW50LlxuXG4tIFtsYW5nY2hhaW4tZXhwZXJpbWVudGFsOiAwLjMuNXJjMSDigJQgTGFuZ0NoYWluIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vcHl0aG9uLmxhbmdjaGFpbi5jb20vYXBpX3JlZmVyZW5jZS9leHBlcmltZW50YWwvaW5kZXguaHRtbClcbiAgQ2F1c2FsIHByb2dyYW0tYWlkZWQgbGFuZ3VhZ2UgKENQQUwpIGNoYWluIGltcGxlbWVudGF0aW9uLiAuLi4gQWdlbnQgYXMgYSBjaGFyYWN0ZXIgd2l0aCBtZW1vcnkgYW5kIGlubmF0ZSBjaGFyYWN0ZXJpc3RpY3MuIGdlbmVyYXRpdmVfYWdlbnRzLm1lbW9yeS5cblxuLSBbSW1wbGVtZW50aW5nIEdlbmVyYXRpdmUgQWdlbnQgV2l0aCBMb2NhbCBMTE0sIEd1aWRhbmNlLCBhbmQgLi4uXShodHRwczovL21lZGl1bS5jb20vYmV0dGVyLXByb2dyYW1taW5nL2ltcGxlbWVudC1nZW5lcmF0aXZlLWFnZW50LXdpdGgtbG9jYWwtbGxtLWd1aWRhbmNlLWFuZC1sYW5nY2hhaW4tZnVsbC1mZWF0dXJlcy1mYTU3NjU1ZjNkZTEpXG4gIEp1biAyLCAyMDIzIC4uLiBTbywgdGhlcmUgYXJlIHR3byBtYWluIHBhcnRzIG9mIGdlbmVyYXRpdmUgYWdlbnRzOiBtZW1vcnkgYW5kIGxvZ2ljYWwgY29tcG9uZW50cyAoUGxhbm5pbmcsIFJlZmxlY3Rpb24sIFJlYWN0aW5nLCBldGMuKS4gTWVtb3J5IGlzIHRoZSBvbmXCoC4uLlxuXG4tIFtBdXRvbm9tb3VzIEFnZW50cyAmIEFnZW50IFNpbXVsYXRpb25zXShodHRwczovL2Jsb2cubGFuZ2NoYWluLmRldi9hZ2VudHMtcm91bmQvKVxuICBBcHIgMTgsIDIwMjMgLi4uIFNwZWNpZmljYWxseSwgcHJvamVjdHMgbGlrZSBBdXRvR1BULCBCYWJ5QUdJLCBDQU1FTCwgYW5kIEdlbmVyYXRpdmUgQWdlbnRzIGhhdmUgcG9wcGVkIHVwLiAuLi4gTGFuZ0NoYWluIE1lbW9yeSBJbXBsZW1lbnRhdGlvbi4gV2hhdCBpcyBub3ZlbMKgLi4uIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxQlBpUGJyVnpkSzVnd0xBMjFmc3AxWCJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkM6L1VzZXJzL1Ryb24vRG9jdW1lbnRzL0dpdEh1Yi9mYXN0YXBpIiwiZm9sZGVyUm9vdCI6IkM6L1VzZXJzL1Ryb24vRG9jdW1lbnRzL0dpdEh1Yi9mYXN0YXBpIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0wOFQxMToxNzo1Mi41NjNaIiwicmVzcG9uc2VfdGV4dCI6IkxldCBtZSBsb29rIGF0IHRoZSBMYW5nQ2hhaW4gZXhwZXJpbWVudGFsIGdlbmVyYXRpdmUgYWdlbnRzIGNvZGUgZGlyZWN0bHkgdG8gdW5kZXJzdGFuZCBob3cgbWVtb3J5IHNjb3Jpbmcgd29ya3MuXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiNDI1ODlhZGQtYWJjYy00Y2I2LWFiMzEtYmJkOWU3YzIzY2ZjIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxU2txYlFCdEJFWENISEtZdGRLTHN5MyIsInRvb2xfbmFtZSI6IndlYi1zZWFyY2giLCJpbnB1dF9qc29uIjoie1wicXVlcnlcIjogXCJsYW5nY2hhaW5fZXhwZXJpbWVudGFsIGdlbmVyYXRpdmVfYWdlbnRzIG1lbW9yeS5weSBzY29yZV9tZW1vcnlfaW1wb3J0YW5jZVwifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkxldCBtZSB0cnkgYSBkaWZmZXJlbnQgYXBwcm9hY2ggdG8gZmluZCB0aGUgbWVtb3J5IHNjb3JpbmcgaW1wbGVtZW50YXRpb24uXG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiIgICAgICAgICAgICAgICAgICAgRmlsZSBub3QgZm91bmQgwrcgR2l0SHViICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXG5bU2tpcCB0byBjb250ZW50XSgjc3RhcnQtb2YtY29udGVudCkgICBcblxuTmF2aWdhdGlvbiBNZW51XG4tLS0tLS0tLS0tLS0tLS1cblxuVG9nZ2xlIG5hdmlnYXRpb25cblxuW10oLylcblxuW1NpZ24gaW5dKC9sb2dpbj9yZXR1cm5fdG89aHR0cHMlM0ElMkYlMkZnaXRodWIuY29tJTJGbGFuZ2NoYWluLWFpJTJGbGFuZ2NoYWluJTJGYmxvYiUyRm1hc3RlciUyRmxpYnMlMkZleHBlcmltZW50YWwlMkZsYW5nY2hhaW5fZXhwZXJpbWVudGFsJTJGZ2VuZXJhdGl2ZV9hZ2VudHMlMkZtZW1vcnkucHkpXG5cbiogICBQcm9kdWN0XG4gICAgXG4gICAgKiAgIFtcbiAgICAgICAgXG4gICAgICAgIEdpdEh1YiBDb3BpbG90XG4gICAgICAgIFxuICAgICAgICBXcml0ZSBiZXR0ZXIgY29kZSB3aXRoIEFJXG4gICAgICAgIFxuICAgICAgICBdKGh0dHBzOi8vZ2l0aHViLmNvbS9mZWF0dXJlcy9jb3BpbG90KVxuICAgICogICBbXG4gICAgICAgIFxuICAgICAgICBHaXRIdWIgQWR2YW5jZWQgU2VjdXJpdHlcbiAgICAgICAgXG4gICAgICAgIEZpbmQgYW5kIGZpeCB2dWxuZXJhYmlsaXRpZXNcbiAgICAgICAgXG4gICAgICAgIF0oaHR0cHM6Ly9naXRodWIuY29tL3NlY3VyaXR5L2FkdmFuY2VkLXNlY3VyaXR5KVxuICAgICogICBbXG4gICAgICAgIFxuICAgICAgICBBY3Rpb25zXG4gICAgICAgIFxuICAgICAgICBBdXRvbWF0ZSBhbnkgd29ya2Zsb3dcbiAgICAgICAgXG4gICAgICAgIF0oaHR0cHM6Ly9naXRodWIuY29tL2ZlYXR1cmVzL2FjdGlvbnMpXG4gICAgKiAgIFtcbiAgICAgICAgXG4gICAgICAgIENvZGVzcGFjZXNcbiAgICAgICAgXG4gICAgICAgIEluc3RhbnQgZGV2IGVudmlyb25tZW50c1xuICAgICAgICBcbiAgICAgICAgXShodHRwczovL2dpdGh1Yi5jb20vZmVhdHVyZXMvY29kZXNwYWNlcylcbiAgICAqICAgW1xuICAgICAgICBcbiAgICAgICAgSXNzdWVzXG4gICAgICAgIFxuICAgICAgICBQbGFuIGFuZCB0cmFjayB3b3JrXG4gICAgICAgIFxuICAgICAgICBdKGh0dHBzOi8vZ2l0aHViLmNvbS9mZWF0dXJlcy9pc3N1ZXMpXG4gICAgKiAgIFtcbiAgICAgICAgXG4gICAgICAgIENvZGUgUmV2aWV3XG4gICAgICAgIFxuICAgICAgICBNYW5hZ2UgY29kZSBjaGFuZ2VzXG4gICAgICAgIFxuICAgICAgICBdKGh0dHBzOi8vZ2l0aHViLmNvbS9mZWF0dXJlcy9jb2RlLXJldmlldylcbiAgICAqICAgW1xuICAgICAgICBcbiAgICAgICAgRGlzY3Vzc2lvbnNcbiAgICAgICAgXG4gICAgICAgIENvbGxhYm9yYXRlIG91dHNpZGUgb2YgY29kZVxuICAgICAgICBcbiAgICAgICAgXShodHRwczovL2dpdGh1Yi5jb20vZmVhdHVyZXMvZGlzY3Vzc2lvbnMpXG4gICAgKiAgIFtcbiAgICAgICAgXG4gICAgICAgIENvZGUgU2VhcmNoXG4gICAgICAgIFxuICAgICAgICBGaW5kIG1vcmUsIHNlYXJjaCBsZXNzXG4gICAgICAgIFxuICAgICAgICBdKGh0dHBzOi8vZ2l0aHViLmNvbS9mZWF0dXJlcy9jb2RlLXNlYXJjaClcbiAgICBcbiAgICBFeHBsb3JlXG4gICAgXG4gICAgKiAgIFtXaHkgR2l0SHViXShodHRwczovL2dpdGh1Yi5jb20vd2h5LWdpdGh1YilcbiAgICAqICAgW0FsbCBmZWF0dXJlc10oaHR0cHM6Ly9naXRodWIuY29tL2ZlYXR1cmVzKVxuICAgICogICBbRG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20pXG4gICAgKiAgIFtHaXRIdWIgU2tpbGxzXShodHRwczovL3NraWxscy5naXRodWIuY29tKVxuICAgICogICBbQmxvZ10oaHR0cHM6Ly9naXRodWIuYmxvZylcbiAgICBcbiogICBTb2x1dGlvbnNcbiAgICBcbiAgICBCeSBjb21wYW55IHNpemVcbiAgICBcbiAgICAqICAgW0VudGVycHJpc2VzXShodHRwczovL2dpdGh1Yi5jb20vZW50ZXJwcmlzZSlcbiAgICAqICAgW1NtYWxsIGFuZCBtZWRpdW0gdGVhbXNdKGh0dHBzOi8vZ2l0aHViLmNvbS90ZWFtKVxuICAgICogICBbU3RhcnR1cHNdKGh0dHBzOi8vZ2l0aHViLmNvbS9lbnRlcnByaXNlL3N0YXJ0dXBzKVxuICAgICogICBbTm9ucHJvZml0c10oL3NvbHV0aW9ucy9pbmR1c3RyeS9ub25wcm9maXRzKVxuICAgIFxuICAgIEJ5IHVzZSBjYXNlXG4gICAgXG4gICAgKiAgIFtEZXZTZWNPcHNdKC9zb2x1dGlvbnMvdXNlLWNhc2UvZGV2c2Vjb3BzKVxuICAgICogICBbRGV2T3BzXSgvc29sdXRpb25zL3VzZS1jYXNlL2Rldm9wcylcbiAgICAqICAgW0NJL0NEXSgvc29sdXRpb25zL3VzZS1jYXNlL2NpLWNkKVxuICAgICogICBbVmlldyBhbGwgdXNlIGNhc2VzXSgvc29sdXRpb25zL3VzZS1jYXNlKVxuICAgIFxuICAgIEJ5IGluZHVzdHJ5XG4gICAgXG4gICAgKiAgIFtIZWFsdGhjYXJlXSgvc29sdXRpb25zL2luZHVzdHJ5L2hlYWx0aGNhcmUpXG4gICAgKiAgIFtGaW5hbmNpYWwgc2VydmljZXNdKC9zb2x1dGlvbnMvaW5kdXN0cnkvZmluYW5jaWFsLXNlcnZpY2VzKVxuICAgICogICBbTWFudWZhY3R1cmluZ10oL3NvbHV0aW9ucy9pbmR1c3RyeS9tYW51ZmFjdHVyaW5nKVxuICAgICogICBbR292ZXJubWVudF0oL3NvbHV0aW9ucy9pbmR1c3RyeS9nb3Zlcm5tZW50KVxuICAgICogICBbVmlldyBhbGwgaW5kdXN0cmllc10oL3NvbHV0aW9ucy9pbmR1c3RyeSlcbiAgICBcbiAgICBbVmlldyBhbGwgc29sdXRpb25zXSgvc29sdXRpb25zKVxuICAgIFxuKiAgIFJlc291cmNlc1xuICAgIFxuICAgIFRvcGljc1xuICAgIFxuICAgICogICBbQUldKC9yZXNvdXJjZXMvYXJ0aWNsZXMvYWkpXG4gICAgKiAgIFtEZXZPcHNdKC9yZXNvdXJjZXMvYXJ0aWNsZXMvZGV2b3BzKVxuICAgICogICBbU2VjdXJpdHldKC9yZXNvdXJjZXMvYXJ0aWNsZXMvc2VjdXJpdHkpXG4gICAgKiAgIFtTb2Z0d2FyZSBEZXZlbG9wbWVudF0oL3Jlc291cmNlcy9hcnRpY2xlcy9zb2Z0d2FyZS1kZXZlbG9wbWVudClcbiAgICAqICAgW1ZpZXcgYWxsXSgvcmVzb3VyY2VzL2FydGljbGVzKVxuICAgIFxuICAgIEV4cGxvcmVcbiAgICBcbiAgICAqICAgW0xlYXJuaW5nIFBhdGh3YXlzXShodHRwczovL3Jlc291cmNlcy5naXRodWIuY29tL2xlYXJuL3BhdGh3YXlzKVxuICAgICogICBbRXZlbnRzICYgV2ViaW5hcnNdKGh0dHBzOi8vcmVzb3VyY2VzLmdpdGh1Yi5jb20pXG4gICAgKiAgIFtFYm9va3MgJiBXaGl0ZXBhcGVyc10oaHR0cHM6Ly9naXRodWIuY29tL3Jlc291cmNlcy93aGl0ZXBhcGVycylcbiAgICAqICAgW0N1c3RvbWVyIFN0b3JpZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9jdXN0b21lci1zdG9yaWVzKVxuICAgICogICBbUGFydG5lcnNdKGh0dHBzOi8vcGFydG5lci5naXRodWIuY29tKVxuICAgICogICBbRXhlY3V0aXZlIEluc2lnaHRzXShodHRwczovL2dpdGh1Yi5jb20vc29sdXRpb25zL2V4ZWN1dGl2ZS1pbnNpZ2h0cylcbiAgICBcbiogICBPcGVuIFNvdXJjZVxuICAgIFxuICAgICogICBbXG4gICAgICAgIFxuICAgICAgICBHaXRIdWIgU3BvbnNvcnNcbiAgICAgICAgXG4gICAgICAgIEZ1bmQgb3BlbiBzb3VyY2UgZGV2ZWxvcGVyc1xuICAgICAgICBcbiAgICAgICAgXSgvc3BvbnNvcnMpXG4gICAgXG4gICAgKiAgIFtcbiAgICAgICAgXG4gICAgICAgIFRoZSBSZWFkTUUgUHJvamVjdFxuICAgICAgICBcbiAgICAgICAgR2l0SHViIGNvbW11bml0eSBhcnRpY2xlc1xuICAgICAgICBcbiAgICAgICAgXShodHRwczovL2dpdGh1Yi5jb20vcmVhZG1lKVxuICAgIFxuICAgIFJlcG9zaXRvcmllc1xuICAgIFxuICAgICogICBbVG9waWNzXShodHRwczovL2dpdGh1Yi5jb20vdG9waWNzKVxuICAgICogICBbVHJlbmRpbmddKGh0dHBzOi8vZ2l0aHViLmNvbS90cmVuZGluZylcbiAgICAqICAgW0NvbGxlY3Rpb25zXShodHRwczovL2dpdGh1Yi5jb20vY29sbGVjdGlvbnMpXG4gICAgXG4qICAgRW50ZXJwcmlzZVxuICAgIFxuICAgICogICBbXG4gICAgICAgIFxuICAgICAgICBFbnRlcnByaXNlIHBsYXRmb3JtXG4gICAgICAgIFxuICAgICAgICBBSS1wb3dlcmVkIGRldmVsb3BlciBwbGF0Zm9ybVxuICAgICAgICBcbiAgICAgICAgXSgvZW50ZXJwcmlzZSlcbiAgICBcbiAgICBBdmFpbGFibGUgYWRkLW9uc1xuICAgIFxuICAgICogICBbXG4gICAgICAgIFxuICAgICAgICBHaXRIdWIgQWR2YW5jZWQgU2VjdXJpdHlcbiAgICAgICAgXG4gICAgICAgIEVudGVycHJpc2UtZ3JhZGUgc2VjdXJpdHkgZmVhdHVyZXNcbiAgICAgICAgXG4gICAgICAgIF0oaHR0cHM6Ly9naXRodWIuY29tL3NlY3VyaXR5L2FkdmFuY2VkLXNlY3VyaXR5KVxuICAgICogICBbXG4gICAgICAgIFxuICAgICAgICBDb3BpbG90IGZvciBidXNpbmVzc1xuICAgICAgICBcbiAgICAgICAgRW50ZXJwcmlzZS1ncmFkZSBBSSBmZWF0dXJlc1xuICAgICAgICBcbiAgICAgICAgXSgvZmVhdHVyZXMvY29waWxvdC9jb3BpbG90LWJ1c2luZXNzKVxuICAgICogICBbXG4gICAgICAgIFxuICAgICAgICBQcmVtaXVtIFN1cHBvcnRcbiAgICAgICAgXG4gICAgICAgIEVudGVycHJpc2UtZ3JhZGUgMjQvNyBzdXBwb3J0XG4gICAgICAgIFxuICAgICAgICBdKC9wcmVtaXVtLXN1cHBvcnQpXG4gICAgXG4qICAgW1ByaWNpbmddKGh0dHBzOi8vZ2l0aHViLmNvbS9wcmljaW5nKVxuXG5TZWFyY2ggb3IganVtcCB0by4uLlxuXG5TZWFyY2ggY29kZSwgcmVwb3NpdG9yaWVzLCB1c2VycywgaXNzdWVzLCBwdWxsIHJlcXVlc3RzLi4uXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblNlYXJjaFxuXG5DbGVhclxuXG5bU2VhcmNoIHN5bnRheCB0aXBzXShodHRwczovL2RvY3MuZ2l0aHViLmNvbS9zZWFyY2gtZ2l0aHViL2dpdGh1Yi1jb2RlLXNlYXJjaC91bmRlcnN0YW5kaW5nLWdpdGh1Yi1jb2RlLXNlYXJjaC1zeW50YXgpXG5cblByb3ZpZGUgZmVlZGJhY2tcbj09PT09PT09PT09PT09PT1cblxuV2UgcmVhZCBldmVyeSBwaWVjZSBvZiBmZWVkYmFjaywgYW5kIHRha2UgeW91ciBpbnB1dCB2ZXJ5IHNlcmlvdXNseS5cblxuIEluY2x1ZGUgbXkgZW1haWwgYWRkcmVzcyBzbyBJIGNhbiBiZSBjb250YWN0ZWRcblxuQ2FuY2VsIFN1Ym1pdCBmZWVkYmFja1xuXG5TYXZlZCBzZWFyY2hlc1xuPT09PT09PT09PT09PT1cblxuVXNlIHNhdmVkIHNlYXJjaGVzIHRvIGZpbHRlciB5b3VyIHJlc3VsdHMgbW9yZSBxdWlja2x5XG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuTmFtZSAgXG5cblF1ZXJ5IFxuXG5UbyBzZWUgYWxsIGF2YWlsYWJsZSBxdWFsaWZpZXJzLCBzZWUgb3VyIFtkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3MuZ2l0aHViLmNvbS9zZWFyY2gtZ2l0aHViL2dpdGh1Yi1jb2RlLXNlYXJjaC91bmRlcnN0YW5kaW5nLWdpdGh1Yi1jb2RlLXNlYXJjaC1zeW50YXgpLlxuXG5DYW5jZWwgQ3JlYXRlIHNhdmVkIHNlYXJjaFxuXG5bU2lnbiBpbl0oL2xvZ2luP3JldHVybl90bz1odHRwcyUzQSUyRiUyRmdpdGh1Yi5jb20lMkZsYW5nY2hhaW4tYWklMkZsYW5nY2hhaW4lMkZibG9iJTJGbWFzdGVyJTJGbGlicyUyRmV4cGVyaW1lbnRhbCUyRmxhbmdjaGFpbl9leHBlcmltZW50YWwlMkZnZW5lcmF0aXZlX2FnZW50cyUyRm1lbW9yeS5weSlcblxuIyMjIyBTaWduIGluIHRvIEdpdEh1YlxuXG4gIFVzZXJuYW1lIG9yIGVtYWlsIGFkZHJlc3MgXG5cblBhc3N3b3JkICBbRm9yZ290IHBhc3N3b3JkP10oL3Bhc3N3b3JkX3Jlc2V0KSAgICAgICAgICAgIFxuXG5bb3Igc2lnbiBpbiB3aXRoIGEgcGFzc2tleV0oL2xvZ2luP3Bhc3NrZXk9dHJ1ZSZyZXR1cm5fdG89aHR0cHMlM0ElMkYlMkZnaXRodWIuY29tJTJGbGFuZ2NoYWluLWFpJTJGbGFuZ2NoYWluJTJGYmxvYiUyRm1hc3RlciUyRmxpYnMlMkZleHBlcmltZW50YWwlMkZsYW5nY2hhaW5fZXhwZXJpbWVudGFsJTJGZ2VuZXJhdGl2ZV9hZ2VudHMlMkZtZW1vcnkucHkpXG5cbltTaWduIHVwXSgvc2lnbnVwP3JlZl9jdGE9U2lnbit1cCZyZWZfbG9jPWhlYWRlcitsb2dnZWQrb3V0JnJlZl9wYWdlPSUyRiUzQ3VzZXItbmFtZSUzRSUyRiUzQ3JlcG8tbmFtZSUzRSUyRmJsb2IlMkZzaG93JnNvdXJjZT1oZWFkZXItcmVwbyZzb3VyY2VfcmVwbz1sYW5nY2hhaW4tYWklMkZsYW5nY2hhaW4pIFJlc2V0aW5nIGZvY3VzXG5cbllvdSBzaWduZWQgaW4gd2l0aCBhbm90aGVyIHRhYiBvciB3aW5kb3cuIFJlbG9hZCB0byByZWZyZXNoIHlvdXIgc2Vzc2lvbi4gWW91IHNpZ25lZCBvdXQgaW4gYW5vdGhlciB0YWIgb3Igd2luZG93LiBSZWxvYWQgdG8gcmVmcmVzaCB5b3VyIHNlc3Npb24uIFlvdSBzd2l0Y2hlZCBhY2NvdW50cyBvbiBhbm90aGVyIHRhYiBvciB3aW5kb3cuIFJlbG9hZCB0byByZWZyZXNoIHlvdXIgc2Vzc2lvbi4gRGlzbWlzcyBhbGVydFxuXG5bbGFuZ2NoYWluLWFpXSgvbGFuZ2NoYWluLWFpKSAvICoqW2xhbmdjaGFpbl0oL2xhbmdjaGFpbi1haS9sYW5nY2hhaW4pKiogUHVibGljXG5cbiogICBbTm90aWZpY2F0aW9uc10oL2xvZ2luP3JldHVybl90bz0lMkZsYW5nY2hhaW4tYWklMkZsYW5nY2hhaW4pIFlvdSBtdXN0IGJlIHNpZ25lZCBpbiB0byBjaGFuZ2Ugbm90aWZpY2F0aW9uIHNldHRpbmdzXG4qICAgW0ZvcmsgMTcuNGtdKC9sb2dpbj9yZXR1cm5fdG89JTJGbGFuZ2NoYWluLWFpJTJGbGFuZ2NoYWluKVxuKiAgIFtTdGFyIDEwN2tdKC9sb2dpbj9yZXR1cm5fdG89JTJGbGFuZ2NoYWluLWFpJTJGbGFuZ2NoYWluKVxuICAgIFxuXG4qICAgW0NvZGVdKC9sYW5nY2hhaW4tYWkvbGFuZ2NoYWluKVxuKiAgIFtJc3N1ZXMgMjg2XSgvbGFuZ2NoYWluLWFpL2xhbmdjaGFpbi9pc3N1ZXMpXG4qICAgW1B1bGwgcmVxdWVzdHMgNTFdKC9sYW5nY2hhaW4tYWkvbGFuZ2NoYWluL3B1bGxzKVxuKiAgIFtEaXNjdXNzaW9uc10oL2xhbmdjaGFpbi1haS9sYW5nY2hhaW4vZGlzY3Vzc2lvbnMpXG4qICAgW0FjdGlvbnNdKC9sYW5nY2hhaW4tYWkvbGFuZ2NoYWluL2FjdGlvbnMpXG4qICAgW1Byb2plY3RzIDJdKC9sYW5nY2hhaW4tYWkvbGFuZ2NoYWluL3Byb2plY3RzKVxuKiAgIFtTZWN1cml0eV0oL2xhbmdjaGFpbi1haS9sYW5nY2hhaW4vc2VjdXJpdHkpXG4qICAgW0luc2lnaHRzXSgvbGFuZ2NoYWluLWFpL2xhbmdjaGFpbi9wdWxzZSlcblxuQWRkaXRpb25hbCBuYXZpZ2F0aW9uIG9wdGlvbnNcblxuKiAgIFtDb2RlXSgvbGFuZ2NoYWluLWFpL2xhbmdjaGFpbilcbiogICBbSXNzdWVzXSgvbGFuZ2NoYWluLWFpL2xhbmdjaGFpbi9pc3N1ZXMpXG4qICAgW1B1bGwgcmVxdWVzdHNdKC9sYW5nY2hhaW4tYWkvbGFuZ2NoYWluL3B1bGxzKVxuKiAgIFtEaXNjdXNzaW9uc10oL2xhbmdjaGFpbi1haS9sYW5nY2hhaW4vZGlzY3Vzc2lvbnMpXG4qICAgW0FjdGlvbnNdKC9sYW5nY2hhaW4tYWkvbGFuZ2NoYWluL2FjdGlvbnMpXG4qICAgW1Byb2plY3RzXSgvbGFuZ2NoYWluLWFpL2xhbmdjaGFpbi9wcm9qZWN0cylcbiogICBbU2VjdXJpdHldKC9sYW5nY2hhaW4tYWkvbGFuZ2NoYWluL3NlY3VyaXR5KVxuKiAgIFtJbnNpZ2h0c10oL2xhbmdjaGFpbi1haS9sYW5nY2hhaW4vcHVsc2UpXG5cbkZvb3RlclxuLS0tLS0tXG5cbltdKGh0dHBzOi8vZ2l0aHViLmNvbSBcIkdpdEh1YlwiKcKpIDIwMjUgR2l0SHViLMKgSW5jLlxuXG4jIyMgRm9vdGVyIG5hdmlnYXRpb25cblxuKiAgIFtUZXJtc10oaHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vc2l0ZS1wb2xpY3kvZ2l0aHViLXRlcm1zL2dpdGh1Yi10ZXJtcy1vZi1zZXJ2aWNlKVxuKiAgIFtQcml2YWN5XShodHRwczovL2RvY3MuZ2l0aHViLmNvbS9zaXRlLXBvbGljeS9wcml2YWN5LXBvbGljaWVzL2dpdGh1Yi1wcml2YWN5LXN0YXRlbWVudClcbiogICBbU2VjdXJpdHldKGh0dHBzOi8vZ2l0aHViLmNvbS9zZWN1cml0eSlcbiogICBbU3RhdHVzXShodHRwczovL3d3dy5naXRodWJzdGF0dXMuY29tLylcbiogICBbRG9jc10oaHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vKVxuKiAgIFtDb250YWN0XShodHRwczovL3N1cHBvcnQuZ2l0aHViLmNvbT90YWdzPWRvdGNvbS1mb290ZXIpXG4qICAgTWFuYWdlIGNvb2tpZXNcbiogICBEbyBub3Qgc2hhcmUgbXkgcGVyc29uYWwgaW5mb3JtYXRpb25cblxuWW91IGNhbuKAmXQgcGVyZm9ybSB0aGF0IGFjdGlvbiBhdCB0aGlzIHRpbWUuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxQnRtdkY2cFROY2NrYVRnekN1em03ZCJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkM6L1VzZXJzL1Ryb24vRG9jdW1lbnRzL0dpdEh1Yi9mYXN0YXBpIiwiZm9sZGVyUm9vdCI6IkM6L1VzZXJzL1Ryb24vRG9jdW1lbnRzL0dpdEh1Yi9mYXN0YXBpIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0wOFQxMToxODowMS4wMDlaIiwicmVzcG9uc2VfdGV4dCI6IkxldCBtZSB0cnkgYSBkaWZmZXJlbnQgYXBwcm9hY2ggdG8gZmluZCB0aGUgbWVtb3J5IHNjb3JpbmcgaW1wbGVtZW50YXRpb24uXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InJlcXVlc3RfaWQiOiJmZTEzZWYxMi00ZDcxLTQxZmYtYWZiNS05OThlNzQ3M2I5MTUiLCJzdGF0dXMiOiJjYW5jZWxsZWQiLCJjaGF0SXRlbVR5cGUiOiJhZ2VudGljLXR1cm4tZGVsaW1pdGVyIn0seyJzdGF0dXMiOiJjYW5jZWxsZWQiLCJyZXF1ZXN0X2lkIjoidGVtcC1mZS00MzFkZmRjMy0xOWJlLTQ4MjgtODZmMS01MDZhZGIyYjBhZjkiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6Ik5vIHJlc3VsdHMgZm91bmQuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxU2txYlFCdEJFWENISEtZdGRLTHN5MyJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkM6L1VzZXJzL1Ryb24vRG9jdW1lbnRzL0dpdEh1Yi9mYXN0YXBpIiwiZm9sZGVyUm9vdCI6IkM6L1VzZXJzL1Ryb24vRG9jdW1lbnRzL0dpdEh1Yi9mYXN0YXBpIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0wOFQxMToyMjoyMi4xMjBaIn0seyJyZXF1ZXN0X2lkIjoiNzUwZjhlMWEtM2ZhNC00NGQ2LWJiMmItYmU4NGM5OThkNjE3Iiwic3RhdHVzIjoiY2FuY2VsbGVkIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy10dXJuLWRlbGltaXRlciJ9LHsicmVxdWVzdF9pZCI6IjcyNzcyOTJlLTEwMWUtNDdjMC05NDMxLTA5ZTJmM2M2MjE3YSIsInN0YXR1cyI6ImNhbmNlbGxlZCIsImNoYXRJdGVtVHlwZSI6ImFnZW50aWMtdHVybi1kZWxpbWl0ZXIifSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiMDM1MTZlNjktYTE3Ni00ZjdmLWJkYWYtOWFlOWFiZGY4NzIxIiwicmVxdWVzdF9tZXNzYWdlIjoieW91IGNhbiBjaGVjayB5b3VyIG1lbW9yaWVzIGZvciB0aGUgZG9jdW1lbnRhdGlvbiIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgiLCJjb250ZW50IjpbeyJ0eXBlIjoidGV4dCIsInRleHQiOiJ5b3UgY2FuIGNoZWNrIHlvdXIgbWVtb3JpZXMgZm9yIHRoZSBkb2N1bWVudGF0aW9uIn1dfV19LCJtZW50aW9uZWRfaXRlbXMiOltdLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJZb3UncmUgcmlnaHQhIEknbGwgY2hlY2sgdGhlIG1lbW9yaWVzIGZvciB0aGUgZG9jdW1lbnRhdGlvbiBvbiBMYW5nQ2hhaW4ncyBnZW5lcmF0aXZlIGFnZW50cyBpbXBsZW1lbnRhdGlvbi5cblxuTG9va2luZyBhdCB0aGUgbWVtb3JpZXMsIEkgY2FuIHNlZSB0aGUgcmVsZXZhbnQgY29kZSBmb3IgbWVtb3J5IHNjb3JpbmcgaW4gdGhlIGBHZW5lcmF0aXZlQWdlbnRNZW1vcnlgIGNsYXNzLiBIZXJlJ3MgdGhlIHNwZWNpZmljIG1ldGhvZCB0aGF0J3MgbGlrZWx5IGNhdXNpbmcgdGhlIGlzc3VlOlxuXG48YXVnbWVudF9jb2RlX3NuaXBwZXQgcGF0aD1cIm1lbW9yeS5weVwiIG1vZGU9XCJFWENFUlBUXCI+XG5gYGBweXRob25cbmRlZiBfc2NvcmVfbWVtb3J5X2ltcG9ydGFuY2Uoc2VsZiwgbWVtb3J5X2NvbnRlbnQ6IHN0cikgLT4gZmxvYXQ6XG4gICAgXCJcIlwiU2NvcmUgdGhlIGFic29sdXRlIGltcG9ydGFuY2Ugb2YgdGhlIGdpdmVuIG1lbW9yeS5cIlwiXCJcbiAgICBwcm9tcHQgPSBQcm9tcHRUZW1wbGF0ZS5mcm9tX3RlbXBsYXRlKFxuICAgICAgICBcIk9uIHRoZSBzY2FsZSBvZiAxIHRvIDEwLCB3aGVyZSAxIGlzIHB1cmVseSBtdW5kYW5lXCJcbiAgICAgICAgKyBcIiAoZS5nLiwgYnJ1c2hpbmcgdGVldGgsIG1ha2luZyBiZWQpIGFuZCAxMCBpc1wiXG4gICAgICAgICsgXCIgZXh0cmVtZWx5IHBvaWduYW50IChlLmcuLCBhIGJyZWFrIHVwLCBjb2xsZWdlXCJcbiAgICAgICAgKyBcIiBhY2NlcHRhbmNlKSwgcmF0ZSB0aGUgbGlrZWx5IHBvaWduYW5jeSBvZiB0aGVcIlxuICAgICAgICArIFwiIGZvbGxvd2luZyBwaWVjZSBvZiBtZW1vcnkuIFJlc3BvbmQgd2l0aCBhIHNpbmdsZSBpbnRlZ2VyLlwiXG4gICAgICAgICsgXCJcXG5NZW1vcnk6IHttZW1vcnlfY29udGVudH1cIlxuICAgICAgICArIFwiXFxuUmF0aW5nOiBcIlxuICAgIClcbiAgICBzY29yZSA9IHNlbGYuY2hhaW4ocHJvbXB0KS5ydW4obWVtb3J5X2NvbnRlbnQ9bWVtb3J5X2NvbnRlbnQpLnN0cmlwKClcbiAgICBpZiBzZWxmLnZlcmJvc2U6XG4gICAgICAgIGxvZ2dlci5pbmZvKGZcIkltcG9ydGFuY2Ugc2NvcmU6IHtzY29yZX1cIilcbiAgICBtYXRjaCA9IHJlLnNlYXJjaChyXCJeXFxEKihcXGQrKVwiLCBzY29yZSlcbiAgICBpZiBtYXRjaDpcbiAgICAgICAgcmV0dXJuIChmbG9hdChtYXRjaC5ncm91cCgxKSkgLyAxMCkgKiBzZWxmLmltcG9ydGFuY2Vfd2VpZ2h0XG4gICAgZWxzZTpcbiAgICAgICAgcmV0dXJuIDAuMFxuYGBgXG48L2F1Z21lbnRfY29kZV9zbmlwcGV0PlxuXG5UaGUgaXNzdWUgaXMgdGhhdCB0aGUgTExNIGlzIG5vdCByZXR1cm5pbmcgYSByYXRpbmcgdmFsdWUgYWZ0ZXIgdGhlIFwiUmF0aW5nOlwiIHByb21wdC4gVGhlIGZ1bmN0aW9uIGV4cGVjdHMgdG8gZmluZCBhIG51bWJlciBpbiB0aGUgcmVzcG9uc2UsIGJ1dCBpdCBzZWVtcyB0aGUgTExNIGlzIHJldHVybmluZyBhbiBlbXB0eSBzdHJpbmcgb3Igc29tZXRoaW5nIHRoYXQgZG9lc24ndCBtYXRjaCB0aGUgZXhwZWN0ZWQgcGF0dGVybi5cblxuSGVyZSdzIHdoYXQncyBoYXBwZW5pbmc6XG5cbjEuIFRoZSBmdW5jdGlvbiBzZW5kcyBhIHByb21wdCB0byB0aGUgTExNIGFza2luZyBpdCB0byByYXRlIGEgbWVtb3J5IG9uIGEgc2NhbGUgb2YgMS0xMFxuMi4gSXQgZXhwZWN0cyB0aGUgTExNIHRvIHJlc3BvbmQgd2l0aCBhIG51bWJlciBhZnRlciBcIlJhdGluZzpcIlxuMy4gVGhlIExMTSBpcyBub3QgcHJvdmlkaW5nIGEgcmVzcG9uc2UgKGFzIHNob3duIGluIHlvdXIgbG9ncylcbjQuIFRoZSByZWdleCBgclwiXlxcRCooXFxkKylcImAgaXMgdHJ5aW5nIHRvIGZpbmQgYSBkaWdpdCBpbiB0aGUgcmVzcG9uc2UsIGJ1dCB0aGVyZSdzIG5vdGhpbmcgdG8gbWF0Y2hcbjUuIFdoZW4gbm8gbWF0Y2ggaXMgZm91bmQsIHRoZSBmdW5jdGlvbiByZXR1cm5zIDAuMCBhcyBhIGZhbGxiYWNrXG5cbiMjIFBvc3NpYmxlIFNvbHV0aW9uczpcblxuMS4gKipNb2RpZnkgdGhlIHByb21wdCB0byBiZSBtb3JlIGV4cGxpY2l0Kio6IFVwZGF0ZSB0aGUgcHJvbXB0IHRvIHN0cm9uZ2x5IGluc3RydWN0IHRoZSBMTE0gdG8gcmV0dXJuIG9ubHkgYSBudW1iZXIuXG5cbjIuICoqQWRkIGEgcmV0cnkgbWVjaGFuaXNtKio6IElmIG5vIHJhdGluZyBpcyByZXR1cm5lZCwgdHJ5IGFnYWluIHdpdGggYSBkaWZmZXJlbnQgcHJvbXB0IGZvcm1hdC5cblxuMy4gKipVc2UgYSBzdHJ1Y3R1cmVkIG91dHB1dCBmb3JtYXQqKjogQ29uZmlndXJlIHRoZSBMTE0gdG8gcmV0dXJuIGEgc3RydWN0dXJlZCByZXNwb25zZSAobGlrZSBKU09OKSBpbnN0ZWFkIG9mIGZyZWUgdGV4dC5cblxuNC4gKipVc2UgYSBkaWZmZXJlbnQgbW9kZWwqKjogVGhlIGlzc3VlIG1pZ2h0IGJlIHNwZWNpZmljIHRvIHRoZSBtb2RlbCB5b3UncmUgdXNpbmcuIFRyeSBhIGRpZmZlcmVudCBPcGVuQUkgbW9kZWwuXG5cbjUuICoqSW1wbGVtZW50IGEgZmFsbGJhY2sgc2NvcmluZyBtZWNoYW5pc20qKjogQ3JlYXRlIGEgY3VzdG9tIHNjb3JpbmcgZnVuY3Rpb24gdGhhdCBkb2Vzbid0IHJlbHkgb24gdGhlIExMTSBmb3IgdGhpcyBzcGVjaWZpYyB0YXNrLlxuXG5Xb3VsZCB5b3UgbGlrZSBtZSB0byBpbXBsZW1lbnQgYW55IG9mIHRoZXNlIHNvbHV0aW9ucz8gSSBjYW4gY3JlYXRlIGEgcGF0Y2ggZm9yIHRoZSBgX3Njb3JlX21lbW9yeV9pbXBvcnRhbmNlYCBtZXRob2QgdG8gbWFrZSBpdCBtb3JlIHJvYnVzdC4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiWW91J3JlIHJpZ2h0ISBJJ2xsIGNoZWNrIHRoZSBtZW1vcmllcyBmb3IgdGhlIGRvY3VtZW50YXRpb24gb24gTGFuZ0NoYWluJ3MgZ2VuZXJhdGl2ZSBhZ2VudHMgaW1wbGVtZW50YXRpb24uXG5cbkxvb2tpbmcgYXQgdGhlIG1lbW9yaWVzLCBJIGNhbiBzZWUgdGhlIHJlbGV2YW50IGNvZGUgZm9yIG1lbW9yeSBzY29yaW5nIGluIHRoZSBgR2VuZXJhdGl2ZUFnZW50TWVtb3J5YCBjbGFzcy4gSGVyZSdzIHRoZSBzcGVjaWZpYyBtZXRob2QgdGhhdCdzIGxpa2VseSBjYXVzaW5nIHRoZSBpc3N1ZTpcblxuYGBgYHB5dGhvbiBwYXRoPW1lbW9yeS5weSBtb2RlPUVYQ0VSUFRcbmRlZiBfc2NvcmVfbWVtb3J5X2ltcG9ydGFuY2Uoc2VsZiwgbWVtb3J5X2NvbnRlbnQ6IHN0cikgLT4gZmxvYXQ6XG4gICAgXCJcIlwiU2NvcmUgdGhlIGFic29sdXRlIGltcG9ydGFuY2Ugb2YgdGhlIGdpdmVuIG1lbW9yeS5cIlwiXCJcbiAgICBwcm9tcHQgPSBQcm9tcHRUZW1wbGF0ZS5mcm9tX3RlbXBsYXRlKFxuICAgICAgICBcIk9uIHRoZSBzY2FsZSBvZiAxIHRvIDEwLCB3aGVyZSAxIGlzIHB1cmVseSBtdW5kYW5lXCJcbiAgICAgICAgKyBcIiAoZS5nLiwgYnJ1c2hpbmcgdGVldGgsIG1ha2luZyBiZWQpIGFuZCAxMCBpc1wiXG4gICAgICAgICsgXCIgZXh0cmVtZWx5IHBvaWduYW50IChlLmcuLCBhIGJyZWFrIHVwLCBjb2xsZWdlXCJcbiAgICAgICAgKyBcIiBhY2NlcHRhbmNlKSwgcmF0ZSB0aGUgbGlrZWx5IHBvaWduYW5jeSBvZiB0aGVcIlxuICAgICAgICArIFwiIGZvbGxvd2luZyBwaWVjZSBvZiBtZW1vcnkuIFJlc3BvbmQgd2l0aCBhIHNpbmdsZSBpbnRlZ2VyLlwiXG4gICAgICAgICsgXCJcXG5NZW1vcnk6IHttZW1vcnlfY29udGVudH1cIlxuICAgICAgICArIFwiXFxuUmF0aW5nOiBcIlxuICAgIClcbiAgICBzY29yZSA9IHNlbGYuY2hhaW4ocHJvbXB0KS5ydW4obWVtb3J5X2NvbnRlbnQ9bWVtb3J5X2NvbnRlbnQpLnN0cmlwKClcbiAgICBpZiBzZWxmLnZlcmJvc2U6XG4gICAgICAgIGxvZ2dlci5pbmZvKGZcIkltcG9ydGFuY2Ugc2NvcmU6IHtzY29yZX1cIilcbiAgICBtYXRjaCA9IHJlLnNlYXJjaChyXCJeXFxEKihcXGQrKVwiLCBzY29yZSlcbiAgICBpZiBtYXRjaDpcbiAgICAgICAgcmV0dXJuIChmbG9hdChtYXRjaC5ncm91cCgxKSkgLyAxMCkgKiBzZWxmLmltcG9ydGFuY2Vfd2VpZ2h0XG4gICAgZWxzZTpcbiAgICAgICAgcmV0dXJuIDAuMFxuYGBgYFxuXG5UaGUgaXNzdWUgaXMgdGhhdCB0aGUgTExNIGlzIG5vdCByZXR1cm5pbmcgYSByYXRpbmcgdmFsdWUgYWZ0ZXIgdGhlIFwiUmF0aW5nOlwiIHByb21wdC4gVGhlIGZ1bmN0aW9uIGV4cGVjdHMgdG8gZmluZCBhIG51bWJlciBpbiB0aGUgcmVzcG9uc2UsIGJ1dCBpdCBzZWVtcyB0aGUgTExNIGlzIHJldHVybmluZyBhbiBlbXB0eSBzdHJpbmcgb3Igc29tZXRoaW5nIHRoYXQgZG9lc24ndCBtYXRjaCB0aGUgZXhwZWN0ZWQgcGF0dGVybi5cblxuSGVyZSdzIHdoYXQncyBoYXBwZW5pbmc6XG5cbjEuIFRoZSBmdW5jdGlvbiBzZW5kcyBhIHByb21wdCB0byB0aGUgTExNIGFza2luZyBpdCB0byByYXRlIGEgbWVtb3J5IG9uIGEgc2NhbGUgb2YgMS0xMFxuMi4gSXQgZXhwZWN0cyB0aGUgTExNIHRvIHJlc3BvbmQgd2l0aCBhIG51bWJlciBhZnRlciBcIlJhdGluZzpcIlxuMy4gVGhlIExMTSBpcyBub3QgcHJvdmlkaW5nIGEgcmVzcG9uc2UgKGFzIHNob3duIGluIHlvdXIgbG9ncylcbjQuIFRoZSByZWdleCBgclwiXlxcRCooXFxkKylcImAgaXMgdHJ5aW5nIHRvIGZpbmQgYSBkaWdpdCBpbiB0aGUgcmVzcG9uc2UsIGJ1dCB0aGVyZSdzIG5vdGhpbmcgdG8gbWF0Y2hcbjUuIFdoZW4gbm8gbWF0Y2ggaXMgZm91bmQsIHRoZSBmdW5jdGlvbiByZXR1cm5zIDAuMCBhcyBhIGZhbGxiYWNrXG5cbiMjIFBvc3NpYmxlIFNvbHV0aW9uczpcblxuMS4gKipNb2RpZnkgdGhlIHByb21wdCB0byBiZSBtb3JlIGV4cGxpY2l0Kio6IFVwZGF0ZSB0aGUgcHJvbXB0IHRvIHN0cm9uZ2x5IGluc3RydWN0IHRoZSBMTE0gdG8gcmV0dXJuIG9ubHkgYSBudW1iZXIuXG5cbjIuICoqQWRkIGEgcmV0cnkgbWVjaGFuaXNtKio6IElmIG5vIHJhdGluZyBpcyByZXR1cm5lZCwgdHJ5IGFnYWluIHdpdGggYSBkaWZmZXJlbnQgcHJvbXB0IGZvcm1hdC5cblxuMy4gKipVc2UgYSBzdHJ1Y3R1cmVkIG91dHB1dCBmb3JtYXQqKjogQ29uZmlndXJlIHRoZSBMTE0gdG8gcmV0dXJuIGEgc3RydWN0dXJlZCByZXNwb25zZSAobGlrZSBKU09OKSBpbnN0ZWFkIG9mIGZyZWUgdGV4dC5cblxuNC4gKipVc2UgYSBkaWZmZXJlbnQgbW9kZWwqKjogVGhlIGlzc3VlIG1pZ2h0IGJlIHNwZWNpZmljIHRvIHRoZSBtb2RlbCB5b3UncmUgdXNpbmcuIFRyeSBhIGRpZmZlcmVudCBPcGVuQUkgbW9kZWwuXG5cbjUuICoqSW1wbGVtZW50IGEgZmFsbGJhY2sgc2NvcmluZyBtZWNoYW5pc20qKjogQ3JlYXRlIGEgY3VzdG9tIHNjb3JpbmcgZnVuY3Rpb24gdGhhdCBkb2Vzbid0IHJlbHkgb24gdGhlIExMTSBmb3IgdGhpcyBzcGVjaWZpYyB0YXNrLlxuXG5Xb3VsZCB5b3UgbGlrZSBtZSB0byBpbXBsZW1lbnQgYW55IG9mIHRoZXNlIHNvbHV0aW9ucz8gSSBjYW4gY3JlYXRlIGEgcGF0Y2ggZm9yIHRoZSBgX3Njb3JlX21lbW9yeV9pbXBvcnRhbmNlYCBtZXRob2QgdG8gbWFrZSBpdCBtb3JlIHJvYnVzdC5cbiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiJ5b3UgY2FuIGNoZWNrIHlvdXIgbWVtb3JpZXMgZm9yIHRoZSBkb2N1bWVudGF0aW9uIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiQzovVXNlcnMvVHJvbi9Eb2N1bWVudHMvR2l0SHViL2Zhc3RhcGkiLCJmb2xkZXJSb290IjoiQzovVXNlcnMvVHJvbi9Eb2N1bWVudHMvR2l0SHViL2Zhc3RhcGkifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTA4VDExOjIyOjQ0Ljc0OFoiLCJyZXNwb25zZV90ZXh0IjoiWW91J3JlIHJpZ2h0ISBJJ2xsIGNoZWNrIHRoZSBtZW1vcmllcyBmb3IgdGhlIGRvY3VtZW50YXRpb24gb24gTGFuZ0NoYWluJ3MgZ2VuZXJhdGl2ZSBhZ2VudHMgaW1wbGVtZW50YXRpb24uXG5cbkxvb2tpbmcgYXQgdGhlIG1lbW9yaWVzLCBJIGNhbiBzZWUgdGhlIHJlbGV2YW50IGNvZGUgZm9yIG1lbW9yeSBzY29yaW5nIGluIHRoZSBgR2VuZXJhdGl2ZUFnZW50TWVtb3J5YCBjbGFzcy4gSGVyZSdzIHRoZSBzcGVjaWZpYyBtZXRob2QgdGhhdCdzIGxpa2VseSBjYXVzaW5nIHRoZSBpc3N1ZTpcblxuYGBgYHB5dGhvbiBwYXRoPW1lbW9yeS5weSBtb2RlPUVYQ0VSUFRcbmRlZiBfc2NvcmVfbWVtb3J5X2ltcG9ydGFuY2Uoc2VsZiwgbWVtb3J5X2NvbnRlbnQ6IHN0cikgLT4gZmxvYXQ6XG4gICAgXCJcIlwiU2NvcmUgdGhlIGFic29sdXRlIGltcG9ydGFuY2Ugb2YgdGhlIGdpdmVuIG1lbW9yeS5cIlwiXCJcbiAgICBwcm9tcHQgPSBQcm9tcHRUZW1wbGF0ZS5mcm9tX3RlbXBsYXRlKFxuICAgICAgICBcIk9uIHRoZSBzY2FsZSBvZiAxIHRvIDEwLCB3aGVyZSAxIGlzIHB1cmVseSBtdW5kYW5lXCJcbiAgICAgICAgKyBcIiAoZS5nLiwgYnJ1c2hpbmcgdGVldGgsIG1ha2luZyBiZWQpIGFuZCAxMCBpc1wiXG4gICAgICAgICsgXCIgZXh0cmVtZWx5IHBvaWduYW50IChlLmcuLCBhIGJyZWFrIHVwLCBjb2xsZWdlXCJcbiAgICAgICAgKyBcIiBhY2NlcHRhbmNlKSwgcmF0ZSB0aGUgbGlrZWx5IHBvaWduYW5jeSBvZiB0aGVcIlxuICAgICAgICArIFwiIGZvbGxvd2luZyBwaWVjZSBvZiBtZW1vcnkuIFJlc3BvbmQgd2l0aCBhIHNpbmdsZSBpbnRlZ2VyLlwiXG4gICAgICAgICsgXCJcXG5NZW1vcnk6IHttZW1vcnlfY29udGVudH1cIlxuICAgICAgICArIFwiXFxuUmF0aW5nOiBcIlxuICAgIClcbiAgICBzY29yZSA9IHNlbGYuY2hhaW4ocHJvbXB0KS5ydW4obWVtb3J5X2NvbnRlbnQ9bWVtb3J5X2NvbnRlbnQpLnN0cmlwKClcbiAgICBpZiBzZWxmLnZlcmJvc2U6XG4gICAgICAgIGxvZ2dlci5pbmZvKGZcIkltcG9ydGFuY2Ugc2NvcmU6IHtzY29yZX1cIilcbiAgICBtYXRjaCA9IHJlLnNlYXJjaChyXCJeXFxEKihcXGQrKVwiLCBzY29yZSlcbiAgICBpZiBtYXRjaDpcbiAgICAgICAgcmV0dXJuIChmbG9hdChtYXRjaC5ncm91cCgxKSkgLyAxMCkgKiBzZWxmLmltcG9ydGFuY2Vfd2VpZ2h0XG4gICAgZWxzZTpcbiAgICAgICAgcmV0dXJuIDAuMFxuYGBgYFxuXG5UaGUgaXNzdWUgaXMgdGhhdCB0aGUgTExNIGlzIG5vdCByZXR1cm5pbmcgYSByYXRpbmcgdmFsdWUgYWZ0ZXIgdGhlIFwiUmF0aW5nOlwiIHByb21wdC4gVGhlIGZ1bmN0aW9uIGV4cGVjdHMgdG8gZmluZCBhIG51bWJlciBpbiB0aGUgcmVzcG9uc2UsIGJ1dCBpdCBzZWVtcyB0aGUgTExNIGlzIHJldHVybmluZyBhbiBlbXB0eSBzdHJpbmcgb3Igc29tZXRoaW5nIHRoYXQgZG9lc24ndCBtYXRjaCB0aGUgZXhwZWN0ZWQgcGF0dGVybi5cblxuSGVyZSdzIHdoYXQncyBoYXBwZW5pbmc6XG5cbjEuIFRoZSBmdW5jdGlvbiBzZW5kcyBhIHByb21wdCB0byB0aGUgTExNIGFza2luZyBpdCB0byByYXRlIGEgbWVtb3J5IG9uIGEgc2NhbGUgb2YgMS0xMFxuMi4gSXQgZXhwZWN0cyB0aGUgTExNIHRvIHJlc3BvbmQgd2l0aCBhIG51bWJlciBhZnRlciBcIlJhdGluZzpcIlxuMy4gVGhlIExMTSBpcyBub3QgcHJvdmlkaW5nIGEgcmVzcG9uc2UgKGFzIHNob3duIGluIHlvdXIgbG9ncylcbjQuIFRoZSByZWdleCBgclwiXlxcRCooXFxkKylcImAgaXMgdHJ5aW5nIHRvIGZpbmQgYSBkaWdpdCBpbiB0aGUgcmVzcG9uc2UsIGJ1dCB0aGVyZSdzIG5vdGhpbmcgdG8gbWF0Y2hcbjUuIFdoZW4gbm8gbWF0Y2ggaXMgZm91bmQsIHRoZSBmdW5jdGlvbiByZXR1cm5zIDAuMCBhcyBhIGZhbGxiYWNrXG5cbiMjIFBvc3NpYmxlIFNvbHV0aW9uczpcblxuMS4gKipNb2RpZnkgdGhlIHByb21wdCB0byBiZSBtb3JlIGV4cGxpY2l0Kio6IFVwZGF0ZSB0aGUgcHJvbXB0IHRvIHN0cm9uZ2x5IGluc3RydWN0IHRoZSBMTE0gdG8gcmV0dXJuIG9ubHkgYSBudW1iZXIuXG5cbjIuICoqQWRkIGEgcmV0cnkgbWVjaGFuaXNtKio6IElmIG5vIHJhdGluZyBpcyByZXR1cm5lZCwgdHJ5IGFnYWluIHdpdGggYSBkaWZmZXJlbnQgcHJvbXB0IGZvcm1hdC5cblxuMy4gKipVc2UgYSBzdHJ1Y3R1cmVkIG91dHB1dCBmb3JtYXQqKjogQ29uZmlndXJlIHRoZSBMTE0gdG8gcmV0dXJuIGEgc3RydWN0dXJlZCByZXNwb25zZSAobGlrZSBKU09OKSBpbnN0ZWFkIG9mIGZyZWUgdGV4dC5cblxuNC4gKipVc2UgYSBkaWZmZXJlbnQgbW9kZWwqKjogVGhlIGlzc3VlIG1pZ2h0IGJlIHNwZWNpZmljIHRvIHRoZSBtb2RlbCB5b3UncmUgdXNpbmcuIFRyeSBhIGRpZmZlcmVudCBPcGVuQUkgbW9kZWwuXG5cbjUuICoqSW1wbGVtZW50IGEgZmFsbGJhY2sgc2NvcmluZyBtZWNoYW5pc20qKjogQ3JlYXRlIGEgY3VzdG9tIHNjb3JpbmcgZnVuY3Rpb24gdGhhdCBkb2Vzbid0IHJlbHkgb24gdGhlIExMTSBmb3IgdGhpcyBzcGVjaWZpYyB0YXNrLlxuXG5Xb3VsZCB5b3UgbGlrZSBtZSB0byBpbXBsZW1lbnQgYW55IG9mIHRoZXNlIHNvbHV0aW9ucz8gSSBjYW4gY3JlYXRlIGEgcGF0Y2ggZm9yIHRoZSBgX3Njb3JlX21lbW9yeV9pbXBvcnRhbmNlYCBtZXRob2QgdG8gbWFrZSBpdCBtb3JlIHJvYnVzdC5cbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119XSwiZmVlZGJhY2tTdGF0ZXMiOnsidGVtcC1mZS04YTdmODEwMS1hZTJiLTQ0MWUtYmZmOS0yZDBmZWZmMjZlNTYiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWQ4ODlhMzAzLTVmODItNGE4Ni05YjBmLTgxMmExMjE0YWNjZCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtYjZkZTZlNmItY2E2Mi00YjdiLWEwMTYtZjNiMTRjOGM1MmQ3Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0wYTUxNzQ3Zi1hNDc2LTQ4ODAtYjRhNC1hOTJlYjBkMWQ1MmQiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWZkNGE1NDFmLWI5NGItNGRmMS05MmI2LTU3ZDI1OGE5ODdhYyI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtYTdmNDBiMDktODg4MC00NmM2LWEzMmQtNzgwYjM2YTBhZWJlIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS02ZTBjMzUzMS05NGMzLTRjMzgtYjc5OS1lZjgzNjcxNTg5ZjEiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWYyM2Q5OTkyLTk5ZTMtNDJiZi04YmI0LTg5Y2U1ZTM4ZWNmMCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNDMxZGZkYzMtMTliZS00ODI4LTg2ZjEtNTA2YWRiMmIwYWY5Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS04MzZhOWJmNy0zZGY5LTQ0YWItYTczZi0wNTgxYjMxYmZjMjAiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9fSwidG9vbFVzZVN0YXRlcyI6eyJmMmQ1OTY0Yi1kOGM2LTQ2MmItOWNkMi05ZGJiZjMwYTk4YmY7dG9vbHVfdnJ0eF8wMUJId2s2WkpvTFViaW5XYnRzSEJGRVciOnsicmVxdWVzdElkIjoiZjJkNTk2NGItZDhjNi00NjJiLTljZDItOWRiYmYzMGE5OGJmIiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMUJId2s2WkpvTFViaW5XYnRzSEJGRVciLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBSRUFETUUubWRcbiMgRGVwbG95IEZhc3RBUEkgb24gUmVuZGVyXG5cblVzZSB0aGlzIHJlcG8gYXMgYSB0ZW1wbGF0ZSB0byBkZXBsb3kgYSBQeXRob24gW0Zhc3RBUEldKGh0dHBzOi8vZmFzdGFwaS50aWFuZ29sby5jb20pIHNlcnZpY2Ugb24gUmVuZGVyLlxuXG5TZWUgaHR0cHM6Ly9yZW5kZXIuY29tL2RvY3MvZGVwbG95LWZhc3RhcGkgb3IgZm9sbG93IHRoZSBzdGVwcyBiZWxvdzpcblxuIyMgTWFudWFsIFN0ZXBzXG5cbjEuIFlvdSBtYXkgdXNlIHRoaXMgcmVwb3NpdG9yeSBkaXJlY3RseSBvciBbY3JlYXRlIHlvdXIgb3duIHJlcG9zaXRvcnkgZnJvbSB0aGlzIHRlbXBsYXRlXShodHRwczovL2dpdGh1Yi5jb20vcmVuZGVyLWV4YW1wbGVzL2Zhc3RhcGkvZ2VuZXJhdGUpIGlmIHlvdSdkIGxpa2UgdG8gY3VzdG9taXplIHRoZSBjb2RlLlxuMi4gQ3JlYXRlIGEgbmV3IFdlYiBTZXJ2aWNlIG9uIFJlbmRlci5cbjMuIFNwZWNpZnkgdGhlIFVSTCB0byB5b3VyIG5ldyByZXBvc2l0b3J5IG9yIHRoaXMgcmVwb3NpdG9yeS5cbjQuIFJlbmRlciB3aWxsIGF1dG9tYXRpY2FsbHkgZGV0ZWN0IHRoYXQgeW91IGFyZSBkZXBsb3lpbmcgYSBQeXRob24gc2VydmljZSBhbmQgdXNlIGBwaXBgIHRvIGRvd25sb2FkIHRoZSBkZXBlbmRlbmNpZXMuXG41LiBTcGVjaWZ5IHRoZSBmb2xsb3dpbmcgYXMgdGhlIFN0YXJ0IENvbW1hbmQuXG5cbiAgICBgYGBzaGVsbFxuICAgIHV2aWNvcm4gbWFpbjphcHAgLS1ob3N0IDAuMC4wLjAgLS1wb3J0ICRQT1JUXG4gICAgYGBgXG5cbjYuIENsaWNrIENyZWF0ZSBXZWIgU2VydmljZS5cblxuT3Igc2ltcGx5IGNsaWNrOlxuXG5bIVtEZXBsb3kgdG8gUmVuZGVyXShodHRwczovL3JlbmRlci5jb20vaW1hZ2VzL2RlcGxveS10by1yZW5kZXItYnV0dG9uLnN2ZyldKGh0dHBzOi8vcmVuZGVyLmNvbS9kZXBsb3k/cmVwbz1odHRwczovL2dpdGh1Yi5jb20vcmVuZGVyLWV4YW1wbGVzL2Zhc3RhcGkpXG5cbiMjIFRoYW5rc1xuXG5UaGFua3MgdG8gW0hhcmlzaF0oaHR0cHM6Ly9oYXJpc2hnYXJnLmNvbSkgZm9yIHRoZSBbaW5zcGlyYXRpb24gdG8gY3JlYXRlIGEgRmFzdEFQSSBxdWlja3N0YXJ0IGZvciBSZW5kZXJdKGh0dHBzOi8vdHdpdHRlci5jb20vaGFyaXNoa2dhcmcvc3RhdHVzLzE0MzUwODQwMTg2NzcwMTA0MzQpIGFuZCBmb3Igc29tZSBzYW1wbGUgY29kZSEuLi5cblBhdGg6IG1haW4ucHlcbiMgRmlsZTogbWFpbi5weVxuZnJvbSBmYXN0YXBpIGltcG9ydCBGYXN0QVBJXG5cbmZyb20gdXRpbHMgaW1wb3J0IEJDb2xvcnMgIyBJbXBvcnQgZnJvbSBuZXcgdXRpbHNcbmZyb20gY29uZmlnIGltcG9ydCBPUEVOQUlfQVBJX0tFWV9TRVQgIyBJbXBvcnQgZnJvbSBuZXcgY29uZmlnXG5mcm9tIHJvdXRlcnMgaW1wb3J0IGFnZW50X3JvdXRlciAjIEltcG9ydCB0aGUgbmV3IHJvdXRlclxuIyBUaGUgZ2xvYmFsIGFnZW50c19kYiBpcyBub3cgaW4gcm91dGVycy5hZ2VudF9yb3V0ZXJcblxuYXBwID0gRmFzdEFQSSh0aXRsZT1cIkF1dG9ub21vdXMgR2VuZXJhdGl2ZS1BZ2VudCBBUEkgdjJcIikgIyBVcGRhdGVkIHRpdGxlXG5cbnByaW50KGZcIntCQ29sb3JzLk9LR1JFRU59REVCVUc6IEZhc3RBUEkgYXBwbGljYXRpb24gc3RhcnRpbmcgdXAuLi4gKFVzaW5nIEF1dG9ub21vdXMgQWdlbnRzIC0gUmVmYWN0b3JlZCl7QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuXG4jIC0tLSBBUEkgS2V5IENoZWNrIC0tLVxuaWYgbm90IE9QRU5BSV9BUElfS0VZX1NFVDpcbiAgICBwcmludChmXCJ7QkNvbG9ycy5GQUlMfUNSSVRJQ0FMX1dBUk5JTkc6IE9QRU5BSV9BUElfS0VZIGVudmlyb25tZW50IHZhcmlhYmxlIGlzIE5PVCBTRVQuIE9wZW5BSSBjYWxscyBsaWtlbHkgZmFpbC57QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuZWxzZTpcbiAgICBwcmludChmXCJ7QkNvbG9ycy5PS0dSRUVOfURFQlVHOiBPUEVOQUlfQVBJX0tFWSBlbnZpcm9ubWVudCB2YXJpYWJsZSBpcyBkZXRlY3RlZC57QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuXG5cbiMgLS0tIEhlYWx0aCBDaGVjayAtLS1cbkBhcHAuZ2V0KFwiL1wiKVxuYXN5bmMgZGVmIGhlYWx0aF9jaGVjaygpOlxuICAgIHByaW50KGZcIntCQ29sb3JzLk9LR1JFRU59REVCVUc6IEhlYWx0aCBjaGVjayAnLycgZW5kcG9pbnQgaGl0LntCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgcmV0dXJuIHtcInN0YXR1c1wiOiBcIm9rXCIsIFwibWVzc2FnZVwiOiBcIkF1dG9ub21vdXMgQWdlbnQgQVBJIGlzIHJ1bm5pbmcuXCJ9XG5cbiMgLS0tIEluY2x1ZGUgUm91dGVycyAtLS1cbmFwcC5pbmNsdWRlX3JvdXRlcihhZ2VudF9yb3V0ZXIucm91dGVyKSAjIEFkZCB0aGUgYWdlbnQgcm91dGVzXG5cbiMgLS0tIEdsb2JhbCBBZ2VudCBTdG9yYWdlIChtYW5hZ2VkIHdpdGhpbiBhZ2VudF9yb3V0ZXIucHkgbm93KSAtLS1cbiMgVGhlIGBhZ2VudHNfZGJgIGRpY3Rpb25hcnkgaXMgbm93IG1hbmFnZWQgd2l0aGluIGByb3V0ZXJzL2FnZW50X3JvdXRlci5weWBcbiMgVGhpcyBrZWVwcyBpdCBjbG9zZXIgdG8gdGhlIG9wZXJhdGlvbnMgdGhhdCB1c2UgaXQuXG4jIElmIHlvdSBuZWVkIHRvIGFjY2VzcyBpdCBmcm9tIGBtYWluLnB5YCBmb3Igb3RoZXIgcmVhc29ucyAoZS5nLiBzdGFydHVwL3NodXRkb3duIGV2ZW50cyksXG4jIHlvdSBjb3VsZCBpbXBvcnQgaXQ6IGBmcm9tIHJvdXRlcnMuYWdlbnRfcm91dGVyIGltcG9ydCBhZ2VudHNfZGJgXG4jIE9yIHBhc3MgYGFwcC5zdGF0ZS5hZ2VudHNfZGJgIGFyb3VuZCBpZiB5b3UgcHJlZmVyIHRoYXQgcGF0dGVybi5cblxucHJpbnQoZlwie0JDb2xvcnMuT0tHUkVFTn1ERUJVRzogRmFzdEFQSSBhcHBsaWNhdGlvbiBmaW5pc2hlZCBsb2FkaW5nLiAoVXNpbmcgQXV0b25vbW91cyBBZ2VudHMgLSBSZWZhY3RvcmVkKXtCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG5cbiMgVG8gcnVuOiB1dmljb3JuIG1haW46YXBwIC0tcmVsb2FkXG4jIEVuc3VyZSBQeXRob24ncyBpbXBvcnQgc3lzdGVtIGNhbiBmaW5kIHlvdXIgbW9kdWxlcyAoZS5nLiwgcm91dGVycy5hZ2VudF9yb3V0ZXIpXG4jIElmIHJ1bm5pbmcgZnJvbSB0aGUgcHJvamVjdCByb290LCBhbmQgYHJvdXRlcnNgIGlzIGEgc3ViZGlyZWN0b3J5LCBpdCBzaG91bGQgd29yay5cbi4uLlxuUGF0aDogLmdpdGlnbm9yZVxuIyBCeXRlLWNvbXBpbGVkIC8gb3B0aW1pemVkIC8gRExMIGZpbGVzXG5fX3B5Y2FjaGVfXy9cbioucHlbY29kXVxuKiRweS5jbGFzc1xuXG4jIEMgZXh0ZW5zaW9uc1xuKi5zb1xuXG4jIERpc3RyaWJ1dGlvbiAvIHBhY2thZ2luZ1xuLlB5dGhvblxuYnVpbGQvXG5kZXZlbG9wLWVnZ3MvXG5kaXN0L1xuZG93bmxvYWRzL1xuZWdncy9cbi5lZ2dzL1xubGliL1xubGliNjQvXG5wYXJ0cy9cbnNkaXN0L1xudmFyL1xud2hlZWxzL1xuKi5lZ2ctaW5mby9cbi5pbnN0YWxsZWQuY2ZnXG4qLmVnZ1xuTUFOSUZFU1RcblxuIyBQeUluc3RhbGxlclxuIyAgVXN1YWxseSB0aGVzZSBmaWxlcyBhcmUgd3JpdHRlbiBieSBhIHB5dGhvbiBzY3JpcHQgZnJvbSBhIHRlbXBsYXRlXG4jICBiZWZvcmUgUHlJbnN0YWxsZXIgYnVpbGRzIHRoZSBleGUsIHNvIGFzIHRvIGluamVjdCBkYXRlL290aGVyIGluZm9zIGludG8gaXQuXG4qLm1hbmlmZXN0XG4qLnNwZWNcblxuIyBJbnN0YWxsZXIgbG9nc1xucGlwLWxvZy50eHRcbnBpcC1kZWxldGUtdGhpcy1kaXJlY3RvcnkudHh0XG5cbiMgVW5pdCB0ZXN0IC8gY292ZXJhZ2UgcmVwb3J0c1xuaHRtbGNvdi9cbi50b3gvXG4uY292ZXJhZ2Vcbi5jb3ZlcmFnZS4qXG4uY2FjaGVcbm5vc2V0ZXN0cy54bWxcbmNvdmVyYWdlLnhtbFxuKi5jb3ZlclxuLmh5cG90aGVzaXMvXG4ucHl0ZXN0X2NhY2hlL1xuXG4jIFRyYW5zbGF0aW9uc1xuKi5tb1xuKi5wb3RcblxuIyBEamFuZ28gc3R1ZmY6XG4qLmxvZ1xubG9jYWxfc2V0dGluZ3MucHlcbmRiLnNxbGl0ZTNcblxuIyBGbGFzayBzdHVmZjpcbmluc3RhbmNlL1xuLndlYmFzc2V0cy1jYWNoZVxuXG4jIFNjcmFweSBzdHVmZjpcbi5zY3JhcHlcblxuIyBTcGhpbnggZG9jdW1lbnRhdGlvblxuZG9jcy9fYnVpbGQvXG5cbiMgUHlCdWlsZGVyXG50YXJnZXQvXG5cbiMgSnVweXRlciBOb3RlYm9va1xuLmlweW5iX2NoZWNrcG9pbnRzXG5cbiMgcHllbnZcbi5weXRob24tdmVyc2lvblxucHl2ZW52LmNmZ1xuXG4jIGNlbGVyeSBiZWF0IHNjaGVkdWxlIGZpbGVcbmNlbGVyeWJlYXQtc2NoZWR1bGVcblxuIyBTYWdlTWF0aCBwYXJzZWQgZmlsZXNcbiouc2FnZS5weVxuXG4jIEVudmlyb25tZW50c1xuLmVudlxuLnZlbnZcbmVudi9cbnZlbnYvXG5FTlYvXG5lbnYuYmFrL1xudmVudi5iYWsvXG5cbiMgU3B5ZGVyIHByb2plY3Qgc2V0dGluZ3Ncbi5zcHlkZXJwcm9qZWN0XG4uc3B5cHJvamVjdFxuXG4jIFJvcGUgcHJvamVjdCBzZXR0aW5nc1xuLnJvcGVwcm9qZWN0XG5cbiMgbWtkb2NzIGRvY3VtZW50YXRpb25cbi9zaXRlXG5cbiMgbXlweVxuLm15cHlfY2FjaGUvXG5cbiMgTWFjIE9TXG4uRFNfU3RvcmVcbi4uLlxuUGF0aDogcmVuZGVyLnlhbWxcbnNlcnZpY2VzOlxuICAjIEEgRG9ja2VyIHdlYiBzZXJ2aWNlXG4gIC0gdHlwZTogd2ViXG4gICAgbmFtZTogZmFzdGFwaS1leGFtcGxlXG4gICAgcnVudGltZTogcHl0aG9uXG4gICAgcGxhbjogZnJlZVxuICAgIGF1dG9EZXBsb3k6IGZhbHNlXG4gICAgYnVpbGRDb21tYW5kOiBwaXAgaW5zdGFsbCAtciByZXF1aXJlbWVudHMudHh0XG4gICAgc3RhcnRDb21tYW5kOiB1dmljb3JuIG1haW46YXBwIC0taG9zdCAwLjAuMC4wIC0tcG9ydCAkUE9SVFxuLi4uXG5QYXRoOiByZXF1aXJlbWVudHMudHh0XG4jIGNvcmUgd2ViIGZyYW1ld29ya1xuZmFzdGFwaVthbGxdXG5cbiMgTGFuZ0NoYWluIHByaW1pdGl2ZXNcbmxhbmdjaGFpbn49MC4yICAgICAgICAgICMgY29yZVxubGFuZ2NoYWluLWV4cGVyaW1lbnRhbH49MC4yICAjIGNvbnRhaW5zIGdlbmVyYXRpdmVfYWdlbnRzXG5sYW5nY2hhaW4tY29tbXVuaXR5fj0wLjJcbmxhbmdjaGFpbi1vcGVuYWl+PTAuMSAgIyBob3VzZXMgQ2hhdE9wZW5BSSAmIE9wZW5BSUVtYmVkZGluZ3NcblxuIyBMTE0gKyBlbWJlZGRpbmdzIChwaWNrIHRoZSBwcm92aWRlciB5b3XigJlsbCByZWFsbHkgdXNlKVxub3BlbmFpPj0xLjI1LjBcbnRpa3Rva2VuPj0wLjYuMFxuXG4jIHNpbXBsZSBpbuKAkXByb2Nlc3MgdmVjdG9yIHN0b3JlIGZvciBhZ2VudCBtZW1vcnlcbmZhaXNzLWNwdT49MS44LjBcbi4uLlxuUGF0aDogY29uZmlnLnB5XG4jIEZpbGU6IGNvbmZpZy5weVxuaW1wb3J0IG9zXG5cbkRFRkFVTFRfQ0hBVF9NT0RFTCA9IFwiZ3B0LTRvLW1pbmlcIlxuREVGQVVMVF9FTUJFRERJTkdfTU9ERUwgPSBcInRleHQtZW1iZWRkaW5nLTMtc21hbGxcIlxuXG5PUEVOQUlfQVBJX0tFWV9TRVQgPSBib29sKG9zLmdldGVudihcIk9QRU5BSV9BUElfS0VZXCIpKVxuLi4uXG5QYXRoOiByb3V0ZXJzL2FnZW50X3JvdXRlci5weVxuIyBGaWxlOiByb3V0ZXJzL2FnZW50X3JvdXRlci5weVxuaW1wb3J0IHRyYWNlYmFja1xuZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWVcbmZyb20gdHlwaW5nIGltcG9ydCBEaWN0LCBMaXN0LCBBbnksIFR1cGxlXG5mcm9tIHV1aWQgaW1wb3J0IHV1aWQ0XG5pbXBvcnQgbnVtcHkgYXMgbnBcblxuZnJvbSBmYXN0YXBpIGltcG9ydCBBUElSb3V0ZXIsIEhUVFBFeGNlcHRpb25cbmZyb20gbGFuZ2NoYWluX2NvcmUuZG9jdW1lbnRzIGltcG9ydCBEb2N1bWVudCAjIFJlcXVpcmVkIGZvciBmZXRjaF9tZW1vcmllcyB0eXBlIGhpbnRcblxuZnJvbSBjdXN0b21fYWdlbnQgaW1wb3J0IEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnRcbmZyb20gYWdlbnRfZmFjdG9yeSBpbXBvcnQgY3JlYXRlX25ld19hZ2VudF9pbnN0YW5jZVxuZnJvbSBzY2hlbWFzIGltcG9ydCAoXG4gICAgQ3JlYXRlQWdlbnRSZXEsIEdlbmVyYXRlUmVzcG9uc2VSZXEsIEdlbmVyYXRlUmVhY3Rpb25SZXNwb25zZSwgQWRkTWVtb3J5UmVxLFxuICAgIEZldGNoTWVtb3JpZXNSZXEsIFVwZGF0ZVN0YXR1c1JlcSwgQWdlbnRMaXN0UmVzcG9uc2UsIEFnZW50RGV0YWlsLFxuICAgIEFnZW50Q3JlYXRpb25SZXNwb25zZSwgQWRkZWRNZW1vcnlSZXNwb25zZSwgRmV0Y2hlZE1lbW9yaWVzUmVzcG9uc2UsXG4gICAgRmV0Y2hlZE1lbW9yaWVzRG9jdW1lbnQsIEFnZW50U3VtbWFyeVJlc3BvbnNlLCBEZWxldGVkQWdlbnRSZXNwb25zZVxuKVxuLi4uXG5cblxuQHJvdXRlci5wb3N0KFwiXCIsIHN0YXR1c19jb2RlPTIwMSwgcmVzcG9uc2VfbW9kZWw9QWdlbnRDcmVhdGlvblJlc3BvbnNlKVxuZGVmIGNyZWF0ZV9hZ2VudF9lbmRwb2ludChyZXE6IENyZWF0ZUFnZW50UmVxKTpcbiAgICBwcmludChmXCJ7QkNvbG9ycy5IRUFERVJ9REVCVUc6IC9hZ2VudHMgUE9TVCByZXF1ZXN0IHJlY2VpdmVkOiB7cmVxLm1vZGVsX2R1bXBfanNvbihleGNsdWRlX25vbmU9VHJ1ZSl9e0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICBhaWQgPSByZXEuYWdlbnRfaWQgb3Igc3RyKHV1aWQ0KCkpXG4gICAgaWYgYWlkIGluIGFnZW50c19kYjpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDAsIGRldGFpbD1mXCJBZ2VudCB3aXRoIGFnZW50X2lkICd7YWlkfScgYWxyZWFkeSBleGlzdHMuXCIpXG4gICAgdHJ5OlxuICAgICAgICBjdXJyZW50X2FnZW50X2luc3RhbmNlID0gY3JlYXRlX25ld19hZ2VudF9pbnN0YW5jZShcbiAgICAgICAgICAgIG5hbWU9cmVxLm5hbWUsIGFnZT1yZXEuYWdlLCB0cmFpdHM9cmVxLnRyYWl0cywgc3RhdHVzPXJlcS5zdGF0dXMsXG4gICAgICAgICAgICBzdW1tYXJ5X3JlZnJlc2hfc2Vjb25kcz1yZXEuc3VtbWFyeV9yZWZyZXNoX3NlY29uZHMsXG4gICAgICAgICAgICByZWZsZWN0aW9uX3RocmVzaG9sZD1yZXEucmVmbGVjdGlvbl90aHJlc2hvbGQsIHZlcmJvc2U9cmVxLnZlcmJvc2UsXG4gICAgICAgICAgICBsbG1fbW9kZWxfbmFtZT1yZXEubW9kZWxfbmFtZSwgZW1iZWRkaW5nX21vZGVsX25hbWU9cmVxLmVtYmVkZGluZ19tb2RlbF9uYW1lXG4gICAgICAgIClcbi4uLlxuXG5Acm91dGVyLmdldChcIlwiLCByZXNwb25zZV9tb2RlbD1BZ2VudExpc3RSZXNwb25zZSlcbmRlZiBsaXN0X2FnZW50c19lbmRwb2ludCgpOlxuICAgIGFnZW50X2RldGFpbHNfbGlzdCA9IFtdXG4gICAgZm9yIGFnZW50X2lkLCBhZ2VudF9pbnN0YW5jZSBpbiBhZ2VudHNfZGIuaXRlbXMoKTpcbiAgICAgICAgbmFtZSwgc3RhdHVzLCBsbG1fbW9kZWwsIGVtYl9tb2RlbCA9IFwiVW5rbm93blwiLCBcIlVua25vd25cIiwgXCJ1bmtub3duXCIsIFwidW5rbm93blwiXG4gICAgICAgIGlmIGFnZW50X2luc3RhbmNlOlxuICAgICAgICAgICAgbmFtZSA9IGFnZW50X2luc3RhbmNlLm5hbWVcbiAgICAgICAgICAgIHN0YXR1cyA9IGFnZW50X2luc3RhbmNlLnN0YXR1c1xuICAgICAgICAgICAgbGxtX21vZGVsLCBlbWJfbW9kZWwgPSBnZXRfYWdlbnRfbW9kZWxfZGV0YWlscyhhZ2VudF9pbnN0YW5jZSlcbiAgICAgICAgYWdlbnRfZGV0YWlsc19saXN0LmFwcGVuZChBZ2VudERldGFpbChcbiAgICAgICAgICAgIGFnZW50X2lkPWFnZW50X2lkLCBuYW1lPW5hbWUsIHN0YXR1cz1zdGF0dXMsXG4gICAgICAgICAgICBsbG1fbW9kZWw9bGxtX21vZGVsLCBlbWJlZGRpbmdfbW9kZWw9ZW1iX21vZGVsXG4gICAgICAgICkpXG4gICAgcmV0dXJuIEFnZW50TGlzdFJlc3BvbnNlKGFnZW50cz1hZ2VudF9kZXRhaWxzX2xpc3QpXG4uLi5cblxuQHJvdXRlci5wb3N0KFwiL3thZ2VudF9pZH0vZ2VuZXJhdGVfcmVzcG9uc2VcIiwgcmVzcG9uc2VfbW9kZWw9R2VuZXJhdGVSZWFjdGlvblJlc3BvbnNlKVxuZGVmIGdlbmVyYXRlX3Jlc3BvbnNlX2VuZHBvaW50KGFnZW50X2lkOiBzdHIsIHJlcTogR2VuZXJhdGVSZXNwb25zZVJlcSk6XG4gICAgb2JzZXJ2YXRpb24gPSByZXEucHJvbXB0LnN0cmlwKClcbiAgICBwcmludChmXCJ7QkNvbG9ycy5IRUFERVJ9REVCVUc6IC9nZW5lcmF0ZV9yZXNwb25zZSBmb3IgYWdlbnQge0JDb2xvcnMuQk9MRH17YWdlbnRfaWR9e0JDb2xvcnMuRU5EQ30gd2l0aCAne29ic2VydmF0aW9uWzo1MF19Li4uJyAoSz17cmVxLmsgb3IgJ2RlZmF1bHQnfSl7QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgIGlmIGFnZW50X2lkIG5vdCBpbiBhZ2VudHNfZGIgb3IgYWdlbnRzX2RiW2FnZW50X2lkXSBpcyBOb25lOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwNCwgZGV0YWlsPWZcIkFnZW50ICd7YWdlbnRfaWR9JyBub3QgZm91bmQgb3IgaW52YWxpZC5cIilcbiAgICBpZiBub3Qgb2JzZXJ2YXRpb246XG4gICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwMCwgZGV0YWlsPVwiT2JzZXJ2YXRpb24gY2Fubm90IGJlIGVtcHR5LlwiKVxuXG4gICAgYWdlbnQ6IEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnQgPSBhZ2VudHNfZGJbYWdlbnRfaWRdXG4gICAgb3JpZ2luYWxfayA9IC0xXG4gICAgcmV0cmlldmVyID0gYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXJcbiAgICBpZiBoYXNhdHRyKHJldHJpZXZlciwgJ2snKTpcbiAgICAgICAgIG9yaWdpbmFsX2sgPSByZXRyaWV2ZXIua1xuXG4gICAgYXBpX3JlYWN0aW9uX3R5cGUsIGFwaV9jb250ZW50LCBvYnNlcnZhdGlvbl93YXNfaW1wb3J0YW50X2ZsYWcgPSBcIlVOS05PV05cIiwgXCJcIiwgRmFsc2VcbiAgICB0cnk6XG4gICAgICAgIGlmIHJlcS5rIGlzIG5vdCBOb25lIGFuZCByZXEuayA+IDAgYW5kIGhhc2F0dHIocmV0cmlldmVyLCAnaycpOlxuICAgICAgICAgICAgcmV0cmlldmVyLmsgPSByZXEua1xuICAgICAgICBcbiAgICAgICAgYXBpX3JlYWN0aW9uX3R5cGUsIGFwaV9jb250ZW50LCBvYnNlcnZhdGlvbl93YXNfaW1wb3J0YW50X2ZsYWcgPSBhZ2VudC5nZXRfaW50ZXJwcmV0ZWRfcmVhY3Rpb24ob2JzZXJ2YXRpb24sIGRhdGV0aW1lLm5vdygpKVxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5PS0dSRUVOfURFQlVHOiBhZ2VudC5nZXRfaW50ZXJwcmV0ZWRfcmVhY3Rpb24gY29tcGxldGVkLiBBUEkgVHlwZTogJ3thcGlfcmVhY3Rpb25fdHlwZX0nLCBJbXBvcnRhbnQ6IHtvYnNlcnZhdGlvbl93YXNfaW1wb3J0YW50X2ZsYWd9e0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbi4uLlxuICAgIFxuICAgIHJlc3BvbnNlX3BheWxvYWRfZG9jczogTGlzdFtGZXRjaGVkTWVtb3JpZXNEb2N1bWVudF0gPSBbXVxuICAgIHRyeTpcbiAgICAgICAgcmVxdWVzdGVkX2sgPSByZXRyaWV2ZXIuayAjIERlZmF1bHQgdG8gcmV0cmlldmVyJ3Mga1xuICAgICAgICBpZiByZXEuayBpcyBub3QgTm9uZSBhbmQgcmVxLmsgPiAwIGFuZCBoYXNhdHRyKHJldHJpZXZlciwgJ2snKTpcbiAgICAgICAgICAgIHJlcXVlc3RlZF9rID0gcmVxLmtcbiAgICAgICAgICAgIHJldHJpZXZlci5rID0gcmVxdWVzdGVkX2tcblxuICAgICAgICBkb2NzX2FuZF9zY29yZXM6IExpc3RbVHVwbGVbRG9jdW1lbnQsIGZsb2F0XV0gPSBbXVxuICAgICAgICBpZiAoaGFzYXR0cihyZXRyaWV2ZXIsIFwidmVjdG9yc3RvcmVcIikgYW5kIHJldHJpZXZlci52ZWN0b3JzdG9yZSBhbmRcbiAgICAgICAgICAgIGhhc2F0dHIocmV0cmlldmVyLnZlY3RvcnN0b3JlLCBcInNpbWlsYXJpdHlfc2VhcmNoX3dpdGhfcmVsZXZhbmNlX3Njb3Jlc1wiKSk6XG4gICAgICAgICAgICBkb2NzX2FuZF9zY29yZXMgPSByZXRyaWV2ZXIudmVjdG9yc3RvcmUuc2ltaWxhcml0eV9zZWFyY2hfd2l0aF9yZWxldmFuY2Vfc2NvcmVzKG9ic2VydmF0aW9uLCBrPXJlcXVlc3RlZF9rKVxuICAgICAgICBlbHNlOlxuICAgICAgICAgICAgZmV0Y2hlZF9kb2NzX29ubHk6IExpc3RbRG9jdW1lbnRdID0gYWdlbnQubWVtb3J5LmZldGNoX21lbW9yaWVzKG9ic2VydmF0aW9uLCBub3c9ZGF0ZXRpbWUubm93KCkpXG4gICAgICAgICAgICBkb2NzX2FuZF9zY29yZXMgPSBbKGRvYywgMC4wKSBmb3IgZG9jIGluIGZldGNoZWRfZG9jc19vbmx5XVxuLi4uXG5cbkByb3V0ZXIuZ2V0KFwiL3thZ2VudF9pZH0vc3VtbWFyeVwiLCByZXNwb25zZV9tb2RlbD1BZ2VudFN1bW1hcnlSZXNwb25zZSlcbmRlZiBnZXRfc3VtbWFyeV9lbmRwb2ludChhZ2VudF9pZDogc3RyKTpcbiAgICBpZiBhZ2VudF9pZCBub3QgaW4gYWdlbnRzX2RiIG9yIGFnZW50c19kYlthZ2VudF9pZF0gaXMgTm9uZTpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDQsIGRldGFpbD1mXCJBZ2VudCAne2FnZW50X2lkfScgbm90IGZvdW5kIG9yIGludmFsaWQuXCIpXG4gICAgYWdlbnQgPSBhZ2VudHNfZGJbYWdlbnRfaWRdXG4gICAgc3VtbWFyeV90ZXh0ID0gXCJFcnJvciBnZW5lcmF0aW5nIHN1bW1hcnkuXCJcbiAgICB0cnk6XG4gICAgICAgIHN1bW1hcnlfdGV4dCA9IGFnZW50LmdldF9zdW1tYXJ5KGZvcmNlX3JlZnJlc2g9VHJ1ZSlcbiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgIHN1bW1hcnlfdGV4dCA9IGZcIkVycm9yIGdlbmVyYXRpbmcgc3VtbWFyeToge2V9XCJcbiAgICByZXR1cm4gQWdlbnRTdW1tYXJ5UmVzcG9uc2UoYWdlbnRfaWQ9YWdlbnRfaWQsIHN1bW1hcnk9c3VtbWFyeV90ZXh0KVxuLi4uXG5QYXRoOiBhZ2VudF9mYWN0b3J5LnB5XG4jIEZpbGU6IGFnZW50X2ZhY3RvcnkucHlcbmltcG9ydCB0cmFjZWJhY2tcbmZyb20gdHlwaW5nIGltcG9ydCBPcHRpb25hbFxuXG5pbXBvcnQgZmFpc3NcbmZyb20gZmFzdGFwaSBpbXBvcnQgSFRUUEV4Y2VwdGlvblxuZnJvbSBsYW5nY2hhaW5fb3BlbmFpIGltcG9ydCBDaGF0T3BlbkFJLCBPcGVuQUlFbWJlZGRpbmdzXG5mcm9tIGxhbmdjaGFpbl9jb21tdW5pdHkudmVjdG9yc3RvcmVzIGltcG9ydCBGQUlTU1xuZnJvbSBsYW5nY2hhaW5fY29tbXVuaXR5LmRvY3N0b3JlLmluX21lbW9yeSBpbXBvcnQgSW5NZW1vcnlEb2NzdG9yZVxuZnJvbSBsYW5nY2hhaW4ucmV0cmlldmVycyBpbXBvcnQgVGltZVdlaWdodGVkVmVjdG9yU3RvcmVSZXRyaWV2ZXJcbmZyb20gbGFuZ2NoYWluX2V4cGVyaW1lbnRhbC5nZW5lcmF0aXZlX2FnZW50cyBpbXBvcnQgR2VuZXJhdGl2ZUFnZW50TWVtb3J5XG5mcm9tIGxhbmdjaGFpbl9jb21tdW5pdHkudmVjdG9yc3RvcmVzLnV0aWxzIGltcG9ydCBEaXN0YW5jZVN0cmF0ZWd5XG5cbmZyb20gY3VzdG9tX2FnZW50IGltcG9ydCBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50XG5mcm9tIHV0aWxzIGltcG9ydCBCQ29sb3JzXG5mcm9tIGNvbmZpZyBpbXBvcnQgREVGQVVMVF9DSEFUX01PREVMLCBERUZBVUxUX0VNQkVERElOR19NT0RFTFxuXG5cbmRlZiBjcmVhdGVfbmV3X2FnZW50X2luc3RhbmNlKFxuICAgIG5hbWU6IHN0cixcbiAgICBhZ2U6IGludCxcbiAgICB0cmFpdHM6IHN0cixcbiAgICBzdGF0dXM6IHN0cixcbiAgICBzdW1tYXJ5X3JlZnJlc2hfc2Vjb25kczogaW50LFxuICAgIHJlZmxlY3Rpb25fdGhyZXNob2xkOiBpbnQsXG4gICAgdmVyYm9zZTogYm9vbCxcbiAgICBsbG1fbW9kZWxfbmFtZTogT3B0aW9uYWxbc3RyXSA9IE5vbmUsXG4gICAgZW1iZWRkaW5nX21vZGVsX25hbWU6IE9wdGlvbmFsW3N0cl0gPSBOb25lXG4pIC0+IEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnQ6XG4gICAgcHJpbnQoZlwie0JDb2xvcnMuT0tCTFVFfURFQlVHOiBjcmVhdGVfbmV3X2FnZW50X2luc3RhbmNlIGNhbGxlZCBmb3IgYWdlbnQgJ3tCQ29sb3JzLkJPTER9e25hbWV9e0JDb2xvcnMuRU5EQ317QkNvbG9ycy5PS0JMVUV9J3tCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4uLi5cblxuICAgIHByaW50KGZcIntCQ29sb3JzLkRJTX1ERUJVRzogU2V0dGluZyB1cCBGQUlTUyBpbmRleCBmb3IgYWdlbnQgJ3tuYW1lfScgKGRpbToge2RpbX0pLiBVc2luZyBJbm5lciBQcm9kdWN0IChmb3IgQ29zaW5lKS57QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgIHRyeTpcbiAgICAgICAgaW5kZXggPSBmYWlzcy5JbmRleEZsYXRJUChkaW0pXG4gICAgICAgIHZlY3RvcnN0b3JlID0gRkFJU1MoXG4gICAgICAgICAgICBlbWJlZGRpbmdfZnVuY3Rpb249YWdlbnRfZW1iZWRkaW5ncyxcbiAgICAgICAgICAgIGluZGV4PWluZGV4LFxuICAgICAgICAgICAgZG9jc3RvcmU9SW5NZW1vcnlEb2NzdG9yZSh7fSksXG4gICAgICAgICAgICBpbmRleF90b19kb2NzdG9yZV9pZD17fSxcbiAgICAgICAgICAgIG5vcm1hbGl6ZV9MMj1UcnVlLFxuICAgICAgICAgICAgZGlzdGFuY2Vfc3RyYXRlZ3k9RGlzdGFuY2VTdHJhdGVneS5NQVhfSU5ORVJfUFJPRFVDVFxuICAgICAgICApXG4gICAgICAgIHJldHJpZXZlciA9IFRpbWVXZWlnaHRlZFZlY3RvclN0b3JlUmV0cmlldmVyKFxuICAgICAgICAgICAgdmVjdG9yc3RvcmU9dmVjdG9yc3RvcmUsIGs9MTUsIGRlY2F5X3JhdGU9MC4wMVxuICAgICAgICApXG4gICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5GQUlMfUVSUk9SX1NUQUNLVFJBQ0U6IEZhaWxlZCBkdXJpbmcgRkFJU1Mgc2V0dXAgZm9yIGFnZW50ICd7bmFtZX0nOiB7ZX17QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKClcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJGYWlsZWQgZHVyaW5nIEZBSVNTIHNldHVwOiB7ZX1cIilcbi4uLlxuUGF0aDogc2NoZW1hcy5weVxuIyBGaWxlOiBzY2hlbWFzLnB5XG5mcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwsIExpc3QsIERpY3QsIEFueVxuZnJvbSBweWRhbnRpYyBpbXBvcnQgQmFzZU1vZGVsLCBGaWVsZFxuXG5jbGFzcyBDcmVhdGVBZ2VudFJlcShCYXNlTW9kZWwpOlxuICAgIG5hbWU6IHN0clxuICAgIGFnZTogaW50XG4gICAgdHJhaXRzOiBzdHJcbiAgICBzdGF0dXM6IHN0clxuICAgIGFnZW50X2lkOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuICAgIHN1bW1hcnlfcmVmcmVzaF9zZWNvbmRzOiBpbnQgPSBGaWVsZChkZWZhdWx0PTM2MDAsIGdlPTApXG4gICAgcmVmbGVjdGlvbl90aHJlc2hvbGQ6IGludCA9IEZpZWxkKGRlZmF1bHQ9MCwgZ2U9MClcbiAgICB2ZXJib3NlOiBib29sID0gRmFsc2VcbiAgICBtb2RlbF9uYW1lOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuICAgIGVtYmVkZGluZ19tb2RlbF9uYW1lOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuXG5jbGFzcyBHZW5lcmF0ZVJlc3BvbnNlUmVxKEJhc2VNb2RlbCk6XG4gICAgcHJvbXB0OiBzdHJcbiAgICBrOiBPcHRpb25hbFtpbnRdID0gRmllbGQoZGVmYXVsdD1Ob25lLCBndD0wKVxuXG5jbGFzcyBHZW5lcmF0ZVJlYWN0aW9uUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBhZ2VudF9uYW1lOiBzdHJcbiAgICByZWFjdGlvbl90eXBlOiBzdHIgIyBTQVksIFRISU5LLCBETywgSUdOT1JFLCBVTktOT1dOXG4gICAgY29udGVudDogc3RyXG4gICAgb2JzZXJ2YXRpb25fd2FzX2ltcG9ydGFudDogYm9vbFxuXG5jbGFzcyBBZGRNZW1vcnlSZXEoQmFzZU1vZGVsKTpcbiAgICB0ZXh0X3RvX21lbW9yaXplOiBzdHJcblxuY2xhc3MgRmV0Y2hNZW1vcmllc1JlcShCYXNlTW9kZWwpOlxuICAgIG9ic2VydmF0aW9uOiBzdHJcbiAgICBrOiBPcHRpb25hbFtpbnRdID0gRmllbGQoZGVmYXVsdD1Ob25lLCBndD0wKVxuXG5jbGFzcyBVcGRhdGVTdGF0dXNSZXEoQmFzZU1vZGVsKTpcbiAgICBuZXdfc3RhdHVzOiBzdHJcblxuY2xhc3MgQWdlbnREZXRhaWwoQmFzZU1vZGVsKTpcbiAgICBhZ2VudF9pZDogc3RyXG4gICAgbmFtZTogc3RyXG4gICAgc3RhdHVzOiBzdHJcbiAgICBsbG1fbW9kZWw6IHN0clxuICAgIGVtYmVkZGluZ19tb2RlbDogc3RyXG5cbmNsYXNzIEFnZW50TGlzdFJlc3BvbnNlKEJhc2VNb2RlbCk6XG4gICAgYWdlbnRzOiBMaXN0W0FnZW50RGV0YWlsXVxuXG5jbGFzcyBBZ2VudENyZWF0aW9uUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBhZ2VudF9pZDogc3RyXG4gICAgbmFtZTogc3RyXG4gICAgbGxtX21vZGVsX3VzZWQ6IHN0clxuICAgIGVtYmVkZGluZ19tb2RlbF91c2VkOiBzdHJcblxuY2xhc3MgU2ltcGxlU3RhdHVzUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBzdGF0dXM6IHN0clxuICAgIG1lc3NhZ2U6IE9wdGlvbmFsW3N0cl0gPSBOb25lXG5cbmNsYXNzIEFkZGVkTWVtb3J5UmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBzdGF0dXM6IHN0clxuICAgIGFkZGVkX21lbW9yeTogc3RyXG5cbmNsYXNzIEZldGNoZWRNZW1vcmllc0RvY3VtZW50KEJhc2VNb2RlbCk6XG4gICAgY29udGVudDogc3RyXG4gICAgbWV0YWRhdGE6IERpY3Rbc3RyLCBBbnldXG4gICAgcmVsZXZhbmNlX3Njb3JlOiBmbG9hdFxuXG5jbGFzcyBGZXRjaGVkTWVtb3JpZXNSZXNwb25zZShCYXNlTW9kZWwpOlxuICAgIG1lbW9yaWVzOiBMaXN0W0ZldGNoZWRNZW1vcmllc0RvY3VtZW50XVxuLi4uXG5QYXRoOiBwcm9tcHRzLnB5XG4jIEZpbGU6IHByb21wdHMucHlcblxuIyAtLS0gQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudCBQcm9tcHRzIC0tLVxuXG5ERUNJU0lPTl9URU1QTEFURSA9IChcbiAgICBcIllvdSBhcmUge2FnZW50X25hbWV9LlxcblwiXG4gICAgXCJZb3VyIGNvcmUgY2hhcmFjdGVyaXN0aWNzIGFyZToge2FnZW50X3RyYWl0c31cXG5cIlxuICAgIFwiSXQgaXMge2N1cnJlbnRfdGltZX0uXFxuXCJcbiAgICBcIllvdXIgc3RhdHVzIGlzOiB7YWdlbnRfc3RhdHVzfVxcblwiXG4gICAgXCJZb3Ugb2JzZXJ2ZToge29ic2VydmF0aW9ufVxcblwiXG4gICAgXCJSZWxldmFudCByZWNlbnQgbWVtb3JpZXM6XFxue21lbW9yeV9jb250ZXh0fVxcblxcblwiXG4gICAgXCJDb25zaWRlcmluZyB5b3VyIHBlcnNvbmFsaXR5IChlc3BlY2lhbGx5IHRyYWl0cyBsaWtlIHthZ2VudF90cmFpdHN9KSwgdGhlIG9ic2VydmF0aW9uLCBhbmQgcmVjZW50IG1lbW9yaWVzLCBcIlxuICAgIFwid2hhdCBpcyB0aGUgKm1vc3QgbGlrZWx5IHR5cGUqIG9mIGltbWVkaWF0ZSByZWFjdGlvbiB5b3Ugd291bGQgaGF2ZT8gQ2hvb3NlICpvbmUqIGZyb206IFwiXG4gICAgXCInU0FZJyAoc3BlYWsgYWxvdWQpLCAnVEhJTksnIChpbnRlcm5hbCB0aG91Z2h0IG9ubHkpLCAnRE8nIChwZXJmb3JtIGEgcGh5c2ljYWwgYWN0aW9uKSwgJ0lHTk9SRScgKG5vIHNpZ25pZmljYW50IHJlYWN0aW9uLCByZW1haW4gaW4gY3VycmVudCBzdGF0dXMpLlwiXG4gICAgXCJcXG5SZWFjdGlvbiBUeXBlIENob2ljZTpcIlxuKVxuXG5USE9VR0hUX1RFTVBMQVRFID0gKFxuICAgIFwiWW91IGFyZSB7YWdlbnRfbmFtZX0uXFxuXCJcbiAgICBcIllvdXIgY29yZSBjaGFyYWN0ZXJpc3RpY3MgYXJlOiB7YWdlbnRfdHJhaXRzfVxcblwiXG4gICAgXCJJdCBpcyB7Y3VycmVudF90aW1lfS5cXG5cIlxuICAgIFwiWW91ciBzdGF0dXMgaXM6IHthZ2VudF9zdGF0dXN9XFxuXCJcbiAgICBcIllvdSBvYnNlcnZlOiB7b2JzZXJ2YXRpb259XFxuXCJcbiAgICBcIlJlbGV2YW50IHJlY2VudCBtZW1vcmllczpcXG57bWVtb3J5X2NvbnRleHR9XFxuXCJcbiAgICBcIlJlbGF0aW9uc2hpcCBjb250ZXh0OiB7cmVsYXRpb25zaGlwX2NvbnRleHR9XFxuXFxuXCJcbiAgICBcIkNvbnNpZGVyaW5nIHlvdXIgcGVyc29uYWxpdHkgYW5kIHRoZSBzaXR1YXRpb24sIHdoYXQgaXMgeW91ciAqaW50ZXJuYWwgdGhvdWdodCogb3IgKmFzc2Vzc21lbnQqIHJpZ2h0IG5vdyBpbiByZXNwb25zZSB0byB0aGUgb2JzZXJ2YXRpb24/IFwiXG4gICAgXCJEZXNjcmliZSB0aGUgdGhvdWdodCBjb25jaXNlbHkuIERvICpub3QqIGRlc2NyaWJlIGFjdGlvbnMgb3Igc3BlZWNoLiBFeGFtcGxlOiAoSW50ZXJuYWwgdGhvdWdodCkgVGhhdCBzZWVtcyBzdXNwaWNpb3VzLlwiXG4gICAgXCJcXG5JbnRlcm5hbCBUaG91Z2h0OlwiXG4pXG5cbkFDVElPTl9URU1QTEFURSA9IChcbiAgICBcIllvdSBhcmUge2FnZW50X25hbWV9LlxcblwiXG4gICAgXCJZb3VyIGNvcmUgY2hhcmFjdGVyaXN0aWNzIGFyZToge2FnZW50X3RyYWl0c31cXG5cIlxuICAgIFwiSXQgaXMge2N1cnJlbnRfdGltZX0uXFxuXCJcbiAgICBcIllvdXIgc3RhdHVzIGlzOiB7YWdlbnRfc3RhdHVzfVxcblwiXG4gICAgXCJZb3Ugb2JzZXJ2ZToge29ic2VydmF0aW9ufVxcblwiXG4gICAgXCJSZWxldmFudCByZWNlbnQgbWVtb3JpZXM6XFxue21lbW9yeV9jb250ZXh0fVxcblwiXG4gICAgXCJSZWxhdGlvbnNoaXAgY29udGV4dDoge3JlbGF0aW9uc2hpcF9jb250ZXh0fVxcblxcblwiXG4gICAgXCJDb25zaWRlcmluZyB5b3VyIHBlcnNvbmFsaXR5IGFuZCB0aGUgc2l0dWF0aW9uLCB3aGF0ICpwaHlzaWNhbCBhY3Rpb24qIGRvIHlvdSB0YWtlIGluIGltbWVkaWF0ZSByZXNwb25zZSB0byB0aGUgb2JzZXJ2YXRpb24/IFwiXG4gICAgXCJEZXNjcmliZSB0aGUgYWN0aW9uIGNvbmNpc2VseSBhcyBpZiBuYXJyYXRpbmcgaXQuIEV4YW1wbGU6IEkgc2hpZnQgbXkgd2VpZ2h0IHVuZWFzaWx5LiAvIEkgZHJhdyBteSBzd29yZC5cIlxuICAgIFwiXFxuQWN0aW9uIFRha2VuOlwiXG4pXG5cblNUQVRVU19VUERBVEVfVEVNUExBVEUgPSAoXG4gICAgXCJZb3UgYXJlIHthZ2VudF9uYW1lfS5cXG5cIlxuICAgIFwiWW91ciBjb3JlIGNoYXJhY3RlcmlzdGljcyBhcmU6IHthZ2VudF90cmFpdHN9XFxuXCJcbiAgICBcIllvdXIgcHJldmlvdXMgc3RhdHVzIHdhczoge3ByZXZpb3VzX3N0YXR1c31cXG5cIlxuICAgIFwiWW91IGp1c3QgcGVyZm9ybWVkIHRoZSBhY3Rpb246IHthY3Rpb25fdGFrZW59XFxuXCJcbiAgICBcIkJhc2VkIG9uIHRoaXMgYWN0aW9uLCB3aGF0IGlzIHlvdXIgY29uY2lzZSwgdXBkYXRlZCBzdGF0dXM/IERlc2NyaWJlIGl0IGluIHRoZSBmaXJzdCBwZXJzb24gKGUuZy4sICdTdGFuZGluZyBhbGVydC4nLCAnU2l0dGluZyBhbmQgb2JzZXJ2aW5nLicpLlwiXG4gICAgXCJcXG5VcGRhdGVkIFN0YXR1czpcIlxuKVxuXG5FTlRJVFlfRVhUUkFDVElPTl9URU1QTEFURSA9IChcbiAgICBcIkluIHRoZSBmb2xsb3dpbmcgb2JzZXJ2YXRpb24sIGlkZW50aWZ5IHRoZSBtYWluIGVudGl0eSBvciBwZXJzb24gT1RIRVIgVEhBTiB7YWdlbnRfbmFtZX0gd2hvIGlzIGJlaW5nIG9ic2VydmVkLiBcIlxuICAgIFwiSWYgdGhlcmUgYXJlIG11bHRpcGxlIGVudGl0aWVzLCBpZGVudGlmeSB0aGUgbW9zdCBwcm9taW5lbnQgb25lLiBcIlxuICAgIFwiSWYgdGhlcmUgaXMgbm8gZW50aXR5IG90aGVyIHRoYW4ge2FnZW50X25hbWV9LCByZXNwb25kIHdpdGggJ25vIG90aGVyIGVudGl0eScuXFxuXFxuXCJcbiAgICBcIk9ic2VydmF0aW9uOiB7b2JzZXJ2YXRpb259XFxuXFxuXCJcbiAgICBcIk1haW4gZW50aXR5IChub3Qge2FnZW50X25hbWV9KTpcIlxuKVxuXG5FTlRJVFlfQUNUSU9OX1RFTVBMQVRFID0gKFxuICAgIFwiQmFzZWQgb24gdGhlIGZvbGxvd2luZyBvYnNlcnZhdGlvbiwgd2hhdCBpcyB7ZW50aXR5fSBkb2luZz8gRGVzY3JpYmUgdGhlaXIgYWN0aW9ucyBjb25jaXNlbHkuXFxuXFxuXCJcbiAgICBcIk9ic2VydmF0aW9uOiB7b2JzZXJ2YXRpb259XFxuXFxuXCJcbiAgICBcIldoYXQge2VudGl0eX0gaXMgZG9pbmc6XCJcbilcblxuUkVMQVRJT05TSElQX1NVTU1BUllfVEVNUExBVEUgPSAoXG4gICAgXCJCYXNlZCBvbiB5b3VyIG1lbW9yaWVzLCB3aGF0IGlzIHlvdXIgcmVsYXRpb25zaGlwIG9yIGtub3dsZWRnZSBhYm91dCB7ZW50aXR5X25hbWV9P1xcblwiXG4gICAgXCJDb25zaWRlcjpcXG5cIlxuICAgIFwiMS4gSGF2ZSB5b3UgbWV0IHtlbnRpdHlfbmFtZX0gYmVmb3JlP1xcblwiXG4gICAgXCIyLiBEbyB5b3UgaGF2ZSBhbnkgaGlzdG9yeSB3aXRoIHtlbnRpdHlfbmFtZX0/XFxuXCJcbiAgICBcIjMuIERvIHlvdSBoYXZlIGFueSBmZWVsaW5ncyBvciBvcGluaW9ucyBhYm91dCB7ZW50aXR5X25hbWV9P1xcblwiXG4gICAgXCI0LiBJcyB0aGVyZSBhbnl0aGluZyBub3RhYmxlIGFib3V0IHtlbnRpdHlfbmFtZX0/XFxuXFxuXCJcbiAgICBcIkNvbnRleHQgZnJvbSB5b3VyIG1lbW9yaWVzOlxcbntyZWxldmFudF9tZW1vcmllc31cXG5cXG5cIlxuICAgIFwiQ3VycmVudCBvYnNlcnZhdGlvbjoge2VudGl0eV9uYW1lfSBpcyB7ZW50aXR5X2FjdGlvbn1cXG5cXG5cIlxuICAgIFwiUmVsYXRpb25zaGlwIHdpdGgge2VudGl0eV9uYW1lfSAoYmUgY29uY2lzZSwgaWYgbm8gcmVsYXRpb25zaGlwIGV4aXN0cywgc3RhdGUgdGhhdCBjbGVhcmx5KTpcIlxuKVxuXG5QT0lHTkFOQ1lfU0NPUklOR19GQUxMQkFDS19URU1QTEFURSA9IChcbiAgICBcIlJhdGUgdGhlIHBvaWduYW5jeSBvZiB0aGlzIG9ic2VydmF0aW9uIG9uIGEgc2NhbGUgb2YgMSB0byAxMCAoaW50ZWdlcik6IHtvYnNlcnZhdGlvbn1cXG5SYXRpbmc6XCJcbilcbi4uLlxuUGF0aDogY3VzdG9tX2FnZW50LnB5XG4jIEZpbGU6IGN1c3RvbV9hZ2VudC5weVxuZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWVcbmZyb20gdHlwaW5nIGltcG9ydCBUdXBsZSwgT3B0aW9uYWwsIEFueVxuaW1wb3J0IHJlXG5cbmZyb20gbGFuZ2NoYWluX2V4cGVyaW1lbnRhbC5nZW5lcmF0aXZlX2FnZW50cy5nZW5lcmF0aXZlX2FnZW50IGltcG9ydCBHZW5lcmF0aXZlQWdlbnRcbmZyb20gbGFuZ2NoYWluLnByb21wdHMgaW1wb3J0IFByb21wdFRlbXBsYXRlXG5mcm9tIGxhbmdjaGFpbi5jaGFpbnMgaW1wb3J0IExMTUNoYWluXG5cbmZyb20gdXRpbHMgaW1wb3J0IEJDb2xvcnNcblxuY2xhc3MgQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudChHZW5lcmF0aXZlQWdlbnQpOlxuICAgIGRlZiBfX2luaXRfXyhzZWxmLCAqKmRhdGE6IEFueSk6XG4gICAgICAgIHN1cGVyKCkuX19pbml0X18oKipkYXRhKVxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5PS0dSRUVOfURFQlVHIChBZ2VudCB7c2VsZi5uYW1lfSk6IEluaXRpYWxpemVkIEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnQsIFwiXG4gICAgICAgICAgICAgIGZcInVzaW5nIGJhc2UgR2VuZXJhdGl2ZUFnZW50IGxvZ2ljLntCQ29sb3JzLkVOREN9XCIpXG5cbiAgICBkZWYgZ2V0X2ludGVycHJldGVkX3JlYWN0aW9uKHNlbGYsIG9ic2VydmF0aW9uOiBzdHIsIG5vdzogT3B0aW9uYWxbZGF0ZXRpbWVdID0gTm9uZSkgLT4gVHVwbGVbc3RyLCBzdHIsIGJvb2xdOlxuICAgICAgICBjYWxsX3RpbWUgPSBub3cgb3IgZGF0ZXRpbWUubm93KClcbiAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuRElNfURFQlVHIChBZ2VudCB7c2VsZi5uYW1lfSk6IENhbGxpbmcgcGFyZW50J3MgZ2VuZXJhdGVfcmVhY3Rpb24gZm9yOiAne29ic2VydmF0aW9uWzo1MF19Li4uJ3tCQ29sb3JzLkVOREN9XCIpXG5cbiAgICAgICAgaXNfZGlhbG9ndWVfZmxhZywgcmVzdWx0X3N0ciA9IHN1cGVyKCkuZ2VuZXJhdGVfcmVhY3Rpb24ob2JzZXJ2YXRpb24sIG5vdz1jYWxsX3RpbWUpXG5cbiAgICAgICAgZXN0aW1hdGVkX29ic2VydmF0aW9uX2ltcG9ydGFuY2UgPSBGYWxzZVxuICAgICAgICB0cnk6XG4gICAgICAgICAgICBpZiBzZWxmLmxsbTpcbiAgICAgICAgICAgICAgICBwb2lnbmFuY3lfcHJvbXB0X3N0ciA9IChcbiAgICAgICAgICAgICAgICAgICAgXCJJcyB0aGUgZm9sbG93aW5nIG9ic2VydmF0aW9uIG11bmRhbmUgKGUuZy4sIGJydXNoaW5nIHRlZXRoKSBvciBwb2lnbmFudCAoZS5nLiwgYSBtYWpvciBsaWZlIGV2ZW50KT8gXCJcbiAgICAgICAgICAgICAgICAgICAgXCJBbnN3ZXIgd2l0aCAnbXVuZGFuZScgb3IgJ3BvaWduYW50Jy5cXG5PYnNlcnZhdGlvbjoge29ic2VydmF0aW9uX3RleHR9XFxuQW5zd2VyOlwiXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIHByb21wdCA9IFByb21wdFRlbXBsYXRlLmZyb21fdGVtcGxhdGUocG9pZ25hbmN5X3Byb21wdF9zdHIpXG4gICAgICAgICAgICAgICAgY2hhaW4gPSBMTE1DaGFpbihsbG09c2VsZi5sbG0sIHByb21wdD1wcm9tcHQpXG4gICAgICAgICAgICAgICAgcG9pZ25hbmN5X3Jlc3VsdCA9IGNoYWluLnJ1bihvYnNlcnZhdGlvbl90ZXh0PW9ic2VydmF0aW9uKS5zdHJpcCgpLmxvd2VyKClcbiAgICAgICAgICAgICAgICBpZiBcInBvaWduYW50XCIgaW4gcG9pZ25hbmN5X3Jlc3VsdDpcbiAgICAgICAgICAgICAgICAgICAgZXN0aW1hdGVkX29ic2VydmF0aW9uX2ltcG9ydGFuY2UgPSBUcnVlXG4gICAgICAgICAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuRElNfURFQlVHIChBZ2VudCB7c2VsZi5uYW1lfSk6IE9ic2VydmF0aW9uIHBvaWduYW5jeSBlc3RpbWF0ZWQgYXMgJ3twb2lnbmFuY3lfcmVzdWx0fScsIEFQSSBpbXBvcnRhbnQgZmxhZzoge2VzdGltYXRlZF9vYnNlcnZhdGlvbl9pbXBvcnRhbmNlfXtCQ29sb3JzLkVOREN9XCIpXG4gICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZV9wb2lnbmFuY3k6XG4gICAgICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5XQVJOSU5HfVdBUk4gKEFnZW50IHtzZWxmLm5hbWV9KTogQ291bGQgbm90IGVzdGltYXRlIG9ic2VydmF0aW9uIHBvaWduYW5jeSBmb3IgQVBJIGZsYWc6IHtlX3BvaWduYW5jeX17QkNvbG9ycy5FTkRDfVwiKVxuLi4uXG5QYXRoOiB1dGlscy5weVxuIyBGaWxlOiB1dGlscy5weVxuY2xhc3MgQkNvbG9yczpcbiAgICBIRUFERVIgPSAnXFwwMzNbOTVtJ1xuICAgIE9LQkxVRSA9ICdcXDAzM1s5NG0nXG4gICAgT0tDWUFOID0gJ1xcMDMzWzk2bSdcbiAgICBPS0dSRUVOID0gJ1xcMDMzWzkybSdcbiAgICBXQVJOSU5HID0gJ1xcMDMzWzkzbSdcbiAgICBGQUlMID0gJ1xcMDMzWzkxbSdcbiAgICBFTkRDID0gJ1xcMDMzWzBtJ1xuICAgIEJPTEQgPSAnXFwwMzNbMW0nXG4gICAgVU5ERVJMSU5FID0gJ1xcMDMzWzRtJ1xuICAgIERJTSA9Li4uIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiNjhlODRhODQtMDdiNS00ZDNlLTgzZTQtZDJiZWU4YzliZDc4O3Rvb2x1X3ZydHhfMDFSWENRTFVzUW9Yb1BZQVJTYTJpcHJGIjp7InJlcXVlc3RJZCI6IjY4ZTg0YTg0LTA3YjUtNGQzZS04M2U0LWQyYmVlOGM5YmQ3OCIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDFSWENRTFVzUW9Yb1BZQVJTYTJpcHJGIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogbWFpbi5weVxuIyBGaWxlOiBtYWluLnB5XG5mcm9tIGZhc3RhcGkgaW1wb3J0IEZhc3RBUElcblxuZnJvbSB1dGlscyBpbXBvcnQgQkNvbG9ycyAjIEltcG9ydCBmcm9tIG5ldyB1dGlsc1xuZnJvbSBjb25maWcgaW1wb3J0IE9QRU5BSV9BUElfS0VZX1NFVCAjIEltcG9ydCBmcm9tIG5ldyBjb25maWdcbmZyb20gcm91dGVycyBpbXBvcnQgYWdlbnRfcm91dGVyICMgSW1wb3J0IHRoZSBuZXcgcm91dGVyXG4jIFRoZSBnbG9iYWwgYWdlbnRzX2RiIGlzIG5vdyBpbiByb3V0ZXJzLmFnZW50X3JvdXRlclxuXG5hcHAgPSBGYXN0QVBJKHRpdGxlPVwiQXV0b25vbW91cyBHZW5lcmF0aXZlLUFnZW50IEFQSSB2MlwiKSAjIFVwZGF0ZWQgdGl0bGVcblxucHJpbnQoZlwie0JDb2xvcnMuT0tHUkVFTn1ERUJVRzogRmFzdEFQSSBhcHBsaWNhdGlvbiBzdGFydGluZyB1cC4uLiAoVXNpbmcgQXV0b25vbW91cyBBZ2VudHMgLSBSZWZhY3RvcmVkKXtCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG5cbiMgLS0tIEFQSSBLZXkgQ2hlY2sgLS0tXG5pZiBub3QgT1BFTkFJX0FQSV9LRVlfU0VUOlxuICAgIHByaW50KGZcIntCQ29sb3JzLkZBSUx9Q1JJVElDQUxfV0FSTklORzogT1BFTkFJX0FQSV9LRVkgZW52aXJvbm1lbnQgdmFyaWFibGUgaXMgTk9UIFNFVC4gT3BlbkFJIGNhbGxzIGxpa2VseSBmYWlsLntCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG5lbHNlOlxuICAgIHByaW50KGZcIntCQ29sb3JzLk9LR1JFRU59REVCVUc6IE9QRU5BSV9BUElfS0VZIGVudmlyb25tZW50IHZhcmlhYmxlIGlzIGRldGVjdGVkLntCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG5cblxuIyAtLS0gSGVhbHRoIENoZWNrIC0tLVxuQGFwcC5nZXQoXCIvXCIpXG5hc3luYyBkZWYgaGVhbHRoX2NoZWNrKCk6XG4gICAgcHJpbnQoZlwie0JDb2xvcnMuT0tHUkVFTn1ERUJVRzogSGVhbHRoIGNoZWNrICcvJyBlbmRwb2ludCBoaXQue0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICByZXR1cm4ge1wic3RhdHVzXCI6IFwib2tcIiwgXCJtZXNzYWdlXCI6IFwiQXV0b25vbW91cyBBZ2VudCBBUEkgaXMgcnVubmluZy5cIn1cblxuIyAtLS0gSW5jbHVkZSBSb3V0ZXJzIC0tLVxuYXBwLmluY2x1ZGVfcm91dGVyKGFnZW50X3JvdXRlci5yb3V0ZXIpICMgQWRkIHRoZSBhZ2VudCByb3V0ZXNcblxuIyAtLS0gR2xvYmFsIEFnZW50IFN0b3JhZ2UgKG1hbmFnZWQgd2l0aGluIGFnZW50X3JvdXRlci5weSBub3cpIC0tLVxuIyBUaGUgYGFnZW50c19kYmAgZGljdGlvbmFyeSBpcyBub3cgbWFuYWdlZCB3aXRoaW4gYHJvdXRlcnMvYWdlbnRfcm91dGVyLnB5YFxuIyBUaGlzIGtlZXBzIGl0IGNsb3NlciB0byB0aGUgb3BlcmF0aW9ucyB0aGF0IHVzZSBpdC5cbiMgSWYgeW91IG5lZWQgdG8gYWNjZXNzIGl0IGZyb20gYG1haW4ucHlgIGZvciBvdGhlciByZWFzb25zIChlLmcuIHN0YXJ0dXAvc2h1dGRvd24gZXZlbnRzKSxcbiMgeW91IGNvdWxkIGltcG9ydCBpdDogYGZyb20gcm91dGVycy5hZ2VudF9yb3V0ZXIgaW1wb3J0IGFnZW50c19kYmBcbiMgT3IgcGFzcyBgYXBwLnN0YXRlLmFnZW50c19kYmAgYXJvdW5kIGlmIHlvdSBwcmVmZXIgdGhhdCBwYXR0ZXJuLlxuXG5wcmludChmXCJ7QkNvbG9ycy5PS0dSRUVOfURFQlVHOiBGYXN0QVBJIGFwcGxpY2F0aW9uIGZpbmlzaGVkIGxvYWRpbmcuIChVc2luZyBBdXRvbm9tb3VzIEFnZW50cyAtIFJlZmFjdG9yZWQpe0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcblxuIyBUbyBydW46IHV2aWNvcm4gbWFpbjphcHAgLS1yZWxvYWRcbiMgRW5zdXJlIFB5dGhvbidzIGltcG9ydCBzeXN0ZW0gY2FuIGZpbmQgeW91ciBtb2R1bGVzIChlLmcuLCByb3V0ZXJzLmFnZW50X3JvdXRlcilcbiMgSWYgcnVubmluZyBmcm9tIHRoZSBwcm9qZWN0IHJvb3QsIGFuZCBgcm91dGVyc2AgaXMgYSBzdWJkaXJlY3RvcnksIGl0IHNob3VsZCB3b3JrLlxuLi4uXG5QYXRoOiBSRUFETUUubWRcbiMgRGVwbG95IEZhc3RBUEkgb24gUmVuZGVyXG5cblVzZSB0aGlzIHJlcG8gYXMgYSB0ZW1wbGF0ZSB0byBkZXBsb3kgYSBQeXRob24gW0Zhc3RBUEldKGh0dHBzOi8vZmFzdGFwaS50aWFuZ29sby5jb20pIHNlcnZpY2Ugb24gUmVuZGVyLlxuXG5TZWUgaHR0cHM6Ly9yZW5kZXIuY29tL2RvY3MvZGVwbG95LWZhc3RhcGkgb3IgZm9sbG93IHRoZSBzdGVwcyBiZWxvdzpcblxuIyMgTWFudWFsIFN0ZXBzXG5cbjEuIFlvdSBtYXkgdXNlIHRoaXMgcmVwb3NpdG9yeSBkaXJlY3RseSBvciBbY3JlYXRlIHlvdXIgb3duIHJlcG9zaXRvcnkgZnJvbSB0aGlzIHRlbXBsYXRlXShodHRwczovL2dpdGh1Yi5jb20vcmVuZGVyLWV4YW1wbGVzL2Zhc3RhcGkvZ2VuZXJhdGUpIGlmIHlvdSdkIGxpa2UgdG8gY3VzdG9taXplIHRoZSBjb2RlLlxuMi4gQ3JlYXRlIGEgbmV3IFdlYiBTZXJ2aWNlIG9uIFJlbmRlci5cbjMuIFNwZWNpZnkgdGhlIFVSTCB0byB5b3VyIG5ldyByZXBvc2l0b3J5IG9yIHRoaXMgcmVwb3NpdG9yeS5cbjQuIFJlbmRlciB3aWxsIGF1dG9tYXRpY2FsbHkgZGV0ZWN0IHRoYXQgeW91IGFyZSBkZXBsb3lpbmcgYSBQeXRob24gc2VydmljZSBhbmQgdXNlIGBwaXBgIHRvIGRvd25sb2FkIHRoZSBkZXBlbmRlbmNpZXMuXG41LiBTcGVjaWZ5IHRoZSBmb2xsb3dpbmcgYXMgdGhlIFN0YXJ0IENvbW1hbmQuXG5cbiAgICBgYGBzaGVsbFxuICAgIHV2aWNvcm4gbWFpbjphcHAgLS1ob3N0IDAuMC4wLjAgLS1wb3J0ICRQT1JUXG4gICAgYGBgXG5cbjYuIENsaWNrIENyZWF0ZSBXZWIgU2VydmljZS5cblxuT3Igc2ltcGx5IGNsaWNrOlxuXG5bIVtEZXBsb3kgdG8gUmVuZGVyXShodHRwczovL3JlbmRlci5jb20vaW1hZ2VzL2RlcGxveS10by1yZW5kZXItYnV0dG9uLnN2ZyldKGh0dHBzOi8vcmVuZGVyLmNvbS9kZXBsb3k/cmVwbz1odHRwczovL2dpdGh1Yi5jb20vcmVuZGVyLWV4YW1wbGVzL2Zhc3RhcGkpXG5cbiMjIFRoYW5rc1xuXG5UaGFua3MgdG8gW0hhcmlzaF0oaHR0cHM6Ly9oYXJpc2hnYXJnLmNvbSkgZm9yIHRoZSBbaW5zcGlyYXRpb24gdG8gY3JlYXRlIGEgRmFzdEFQSSBxdWlja3N0YXJ0IGZvciBSZW5kZXJdKGh0dHBzOi8vdHdpdHRlci5jb20vaGFyaXNoa2dhcmcvc3RhdHVzLzE0MzUwODQwMTg2NzcwMTA0MzQpIGFuZCBmb3Igc29tZSBzYW1wbGUgY29kZSEuLi5cblBhdGg6IHJlbmRlci55YW1sXG5zZXJ2aWNlczpcbiAgIyBBIERvY2tlciB3ZWIgc2VydmljZVxuICAtIHR5cGU6IHdlYlxuICAgIG5hbWU6IGZhc3RhcGktZXhhbXBsZVxuICAgIHJ1bnRpbWU6IHB5dGhvblxuICAgIHBsYW46IGZyZWVcbiAgICBhdXRvRGVwbG95OiBmYWxzZVxuICAgIGJ1aWxkQ29tbWFuZDogcGlwIGluc3RhbGwgLXIgcmVxdWlyZW1lbnRzLnR4dFxuICAgIHN0YXJ0Q29tbWFuZDogdXZpY29ybiBtYWluOmFwcCAtLWhvc3QgMC4wLjAuMCAtLXBvcnQgJFBPUlRcbi4uLlxuUGF0aDogLmdpdGlnbm9yZVxuIyBCeXRlLWNvbXBpbGVkIC8gb3B0aW1pemVkIC8gRExMIGZpbGVzXG5fX3B5Y2FjaGVfXy9cbioucHlbY29kXVxuKiRweS5jbGFzc1xuXG4jIEMgZXh0ZW5zaW9uc1xuKi5zb1xuXG4jIERpc3RyaWJ1dGlvbiAvIHBhY2thZ2luZ1xuLlB5dGhvblxuYnVpbGQvXG5kZXZlbG9wLWVnZ3MvXG5kaXN0L1xuZG93bmxvYWRzL1xuZWdncy9cbi5lZ2dzL1xubGliL1xubGliNjQvXG5wYXJ0cy9cbnNkaXN0L1xudmFyL1xud2hlZWxzL1xuKi5lZ2ctaW5mby9cbi5pbnN0YWxsZWQuY2ZnXG4qLmVnZ1xuTUFOSUZFU1RcblxuIyBQeUluc3RhbGxlclxuIyAgVXN1YWxseSB0aGVzZSBmaWxlcyBhcmUgd3JpdHRlbiBieSBhIHB5dGhvbiBzY3JpcHQgZnJvbSBhIHRlbXBsYXRlXG4jICBiZWZvcmUgUHlJbnN0YWxsZXIgYnVpbGRzIHRoZSBleGUsIHNvIGFzIHRvIGluamVjdCBkYXRlL290aGVyIGluZm9zIGludG8gaXQuXG4qLm1hbmlmZXN0XG4qLnNwZWNcblxuIyBJbnN0YWxsZXIgbG9nc1xucGlwLWxvZy50eHRcbnBpcC1kZWxldGUtdGhpcy1kaXJlY3RvcnkudHh0XG5cbiMgVW5pdCB0ZXN0IC8gY292ZXJhZ2UgcmVwb3J0c1xuaHRtbGNvdi9cbi50b3gvXG4uY292ZXJhZ2Vcbi5jb3ZlcmFnZS4qXG4uY2FjaGVcbm5vc2V0ZXN0cy54bWxcbmNvdmVyYWdlLnhtbFxuKi5jb3ZlclxuLmh5cG90aGVzaXMvXG4ucHl0ZXN0X2NhY2hlL1xuXG4jIFRyYW5zbGF0aW9uc1xuKi5tb1xuKi5wb3RcblxuIyBEamFuZ28gc3R1ZmY6XG4qLmxvZ1xubG9jYWxfc2V0dGluZ3MucHlcbmRiLnNxbGl0ZTNcblxuIyBGbGFzayBzdHVmZjpcbmluc3RhbmNlL1xuLndlYmFzc2V0cy1jYWNoZVxuXG4jIFNjcmFweSBzdHVmZjpcbi5zY3JhcHlcblxuIyBTcGhpbnggZG9jdW1lbnRhdGlvblxuZG9jcy9fYnVpbGQvXG5cbiMgUHlCdWlsZGVyXG50YXJnZXQvXG5cbiMgSnVweXRlciBOb3RlYm9va1xuLmlweW5iX2NoZWNrcG9pbnRzXG5cbiMgcHllbnZcbi5weXRob24tdmVyc2lvblxucHl2ZW52LmNmZ1xuXG4jIGNlbGVyeSBiZWF0IHNjaGVkdWxlIGZpbGVcbmNlbGVyeWJlYXQtc2NoZWR1bGVcblxuIyBTYWdlTWF0aCBwYXJzZWQgZmlsZXNcbiouc2FnZS5weVxuXG4jIEVudmlyb25tZW50c1xuLmVudlxuLnZlbnZcbmVudi9cbnZlbnYvXG5FTlYvXG5lbnYuYmFrL1xudmVudi5iYWsvXG5cbiMgU3B5ZGVyIHByb2plY3Qgc2V0dGluZ3Ncbi5zcHlkZXJwcm9qZWN0XG4uc3B5cHJvamVjdFxuXG4jIFJvcGUgcHJvamVjdCBzZXR0aW5nc1xuLnJvcGVwcm9qZWN0XG5cbiMgbWtkb2NzIGRvY3VtZW50YXRpb25cbi9zaXRlXG5cbiMgbXlweVxuLm15cHlfY2FjaGUvXG5cbiMgTWFjIE9TXG4uRFNfU3RvcmVcbi4uLlxuUGF0aDogYWdlbnRfZmFjdG9yeS5weVxuIyBGaWxlOiBhZ2VudF9mYWN0b3J5LnB5XG5pbXBvcnQgdHJhY2ViYWNrXG5mcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWxcblxuaW1wb3J0IGZhaXNzXG5mcm9tIGZhc3RhcGkgaW1wb3J0IEhUVFBFeGNlcHRpb25cbmZyb20gbGFuZ2NoYWluX29wZW5haSBpbXBvcnQgQ2hhdE9wZW5BSSwgT3BlbkFJRW1iZWRkaW5nc1xuZnJvbSBsYW5nY2hhaW5fY29tbXVuaXR5LnZlY3RvcnN0b3JlcyBpbXBvcnQgRkFJU1NcbmZyb20gbGFuZ2NoYWluX2NvbW11bml0eS5kb2NzdG9yZS5pbl9tZW1vcnkgaW1wb3J0IEluTWVtb3J5RG9jc3RvcmVcbmZyb20gbGFuZ2NoYWluLnJldHJpZXZlcnMgaW1wb3J0IFRpbWVXZWlnaHRlZFZlY3RvclN0b3JlUmV0cmlldmVyXG5mcm9tIGxhbmdjaGFpbl9leHBlcmltZW50YWwuZ2VuZXJhdGl2ZV9hZ2VudHMgaW1wb3J0IEdlbmVyYXRpdmVBZ2VudE1lbW9yeVxuZnJvbSBsYW5nY2hhaW5fY29tbXVuaXR5LnZlY3RvcnN0b3Jlcy51dGlscyBpbXBvcnQgRGlzdGFuY2VTdHJhdGVneVxuXG5mcm9tIGN1c3RvbV9hZ2VudCBpbXBvcnQgQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudFxuZnJvbSB1dGlscyBpbXBvcnQgQkNvbG9yc1xuZnJvbSBjb25maWcgaW1wb3J0IERFRkFVTFRfQ0hBVF9NT0RFTCwgREVGQVVMVF9FTUJFRERJTkdfTU9ERUxcblxuXG5kZWYgY3JlYXRlX25ld19hZ2VudF9pbnN0YW5jZShcbiAgICBuYW1lOiBzdHIsXG4gICAgYWdlOiBpbnQsXG4gICAgdHJhaXRzOiBzdHIsXG4gICAgc3RhdHVzOiBzdHIsXG4gICAgc3VtbWFyeV9yZWZyZXNoX3NlY29uZHM6IGludCxcbiAgICByZWZsZWN0aW9uX3RocmVzaG9sZDogaW50LFxuICAgIHZlcmJvc2U6IGJvb2wsXG4gICAgbGxtX21vZGVsX25hbWU6IE9wdGlvbmFsW3N0cl0gPSBOb25lLFxuICAgIGVtYmVkZGluZ19tb2RlbF9uYW1lOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuKSAtPiBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50OlxuICAgIHByaW50KGZcIntCQ29sb3JzLk9LQkxVRX1ERUJVRzogY3JlYXRlX25ld19hZ2VudF9pbnN0YW5jZSBjYWxsZWQgZm9yIGFnZW50ICd7QkNvbG9ycy5CT0xEfXtuYW1lfXtCQ29sb3JzLkVOREN9e0JDb2xvcnMuT0tCTFVFfSd7QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuLi4uXG5cbiAgICBlZmZlY3RpdmVfZW1iZWRkaW5nX21vZGVsID0gZW1iZWRkaW5nX21vZGVsX25hbWUgaWYgZW1iZWRkaW5nX21vZGVsX25hbWUgYW5kIGVtYmVkZGluZ19tb2RlbF9uYW1lLnN0cmlwKCkgZWxzZSBERUZBVUxUX0VNQkVERElOR19NT0RFTFxuICAgIGRpbSA9IDBcbiAgICB0cnk6XG4gICAgICAgIGFnZW50X2VtYmVkZGluZ3MgPSBPcGVuQUlFbWJlZGRpbmdzKG1vZGVsPWVmZmVjdGl2ZV9lbWJlZGRpbmdfbW9kZWwpXG4gICAgICAgIHByb2JlX2Zvcl9kaW0gPSBhZ2VudF9lbWJlZGRpbmdzLmVtYmVkX3F1ZXJ5KFwiZ2V0X2RpbV9wcm9iZV9mb3JfYWdlbnRcIilcbiAgICAgICAgZGltID0gbGVuKHByb2JlX2Zvcl9kaW0pXG4gICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5GQUlMfUVSUk9SX1NUQUNLVFJBQ0U6IEZhaWxlZCB0byBpbml0aWFsaXplIG9yIHRlc3QgT3BlbkFJRW1iZWRkaW5ncyBmb3IgYWdlbnQgJ3tuYW1lfScgd2l0aCBtb2RlbCAne2VmZmVjdGl2ZV9lbWJlZGRpbmdfbW9kZWx9Jzoge2V9e0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICAgICAgdHJhY2ViYWNrLnByaW50X2V4YygpXG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZlwiRmFpbGVkIHRvIGluaXRpYWxpemUvdGVzdCBlbWJlZGRpbmdzIHdpdGggbW9kZWwgJ3tlZmZlY3RpdmVfZW1iZWRkaW5nX21vZGVsfSc6IHtlfVwiKVxuXG4gICAgcHJpbnQoZlwie0JDb2xvcnMuRElNfURFQlVHOiBTZXR0aW5nIHVwIEZBSVNTIGluZGV4IGZvciBhZ2VudCAne25hbWV9JyAoZGltOiB7ZGltfSkuIFVzaW5nIElubmVyIFByb2R1Y3QgKGZvciBDb3NpbmUpLntCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgdHJ5OlxuICAgICAgICBpbmRleCA9IGZhaXNzLkluZGV4RmxhdElQKGRpbSlcbiAgICAgICAgdmVjdG9yc3RvcmUgPSBGQUlTUyhcbiAgICAgICAgICAgIGVtYmVkZGluZ19mdW5jdGlvbj1hZ2VudF9lbWJlZGRpbmdzLFxuICAgICAgICAgICAgaW5kZXg9aW5kZXgsXG4gICAgICAgICAgICBkb2NzdG9yZT1Jbk1lbW9yeURvY3N0b3JlKHt9KSxcbiAgICAgICAgICAgIGluZGV4X3RvX2RvY3N0b3JlX2lkPXt9LFxuICAgICAgICAgICAgbm9ybWFsaXplX0wyPVRydWUsXG4gICAgICAgICAgICBkaXN0YW5jZV9zdHJhdGVneT1EaXN0YW5jZVN0cmF0ZWd5Lk1BWF9JTk5FUl9QUk9EVUNUXG4gICAgICAgIClcbiAgICAgICAgcmV0cmlldmVyID0gVGltZVdlaWdodGVkVmVjdG9yU3RvcmVSZXRyaWV2ZXIoXG4gICAgICAgICAgICB2ZWN0b3JzdG9yZT12ZWN0b3JzdG9yZSwgaz0xNSwgZGVjYXlfcmF0ZT0wLjAxXG4gICAgICAgIClcbiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLkZBSUx9RVJST1JfU1RBQ0tUUkFDRTogRmFpbGVkIGR1cmluZyBGQUlTUyBzZXR1cCBmb3IgYWdlbnQgJ3tuYW1lfSc6IHtlfXtCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgICAgIHRyYWNlYmFjay5wcmludF9leGMoKVxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTUwMCwgZGV0YWlsPWZcIkZhaWxlZCBkdXJpbmcgRkFJU1Mgc2V0dXA6IHtlfVwiKVxuLi4uXG5QYXRoOiByZXF1aXJlbWVudHMudHh0XG4jIGNvcmUgd2ViIGZyYW1ld29ya1xuZmFzdGFwaVthbGxdXG5cbiMgTGFuZ0NoYWluIHByaW1pdGl2ZXNcbmxhbmdjaGFpbn49MC4yICAgICAgICAgICMgY29yZVxubGFuZ2NoYWluLWV4cGVyaW1lbnRhbH49MC4yICAjIGNvbnRhaW5zIGdlbmVyYXRpdmVfYWdlbnRzXG5sYW5nY2hhaW4tY29tbXVuaXR5fj0wLjJcbmxhbmdjaGFpbi1vcGVuYWl+PTAuMSAgIyBob3VzZXMgQ2hhdE9wZW5BSSAmIE9wZW5BSUVtYmVkZGluZ3NcblxuIyBMTE0gKyBlbWJlZGRpbmdzIChwaWNrIHRoZSBwcm92aWRlciB5b3XigJlsbCByZWFsbHkgdXNlKVxub3BlbmFpPj0xLjI1LjBcbnRpa3Rva2VuPj0wLjYuMFxuXG4jIHNpbXBsZSBpbuKAkXByb2Nlc3MgdmVjdG9yIHN0b3JlIGZvciBhZ2VudCBtZW1vcnlcbmZhaXNzLWNwdT49MS44LjBcbi4uLlxuUGF0aDogcm91dGVycy9hZ2VudF9yb3V0ZXIucHlcbiMgRmlsZTogcm91dGVycy9hZ2VudF9yb3V0ZXIucHlcbmltcG9ydCB0cmFjZWJhY2tcbmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lXG5mcm9tIHR5cGluZyBpbXBvcnQgRGljdCwgTGlzdCwgQW55LCBUdXBsZVxuZnJvbSB1dWlkIGltcG9ydCB1dWlkNFxuaW1wb3J0IG51bXB5IGFzIG5wXG5cbmZyb20gZmFzdGFwaSBpbXBvcnQgQVBJUm91dGVyLCBIVFRQRXhjZXB0aW9uXG5mcm9tIGxhbmdjaGFpbl9jb3JlLmRvY3VtZW50cyBpbXBvcnQgRG9jdW1lbnQgIyBSZXF1aXJlZCBmb3IgZmV0Y2hfbWVtb3JpZXMgdHlwZSBoaW50XG5cbmZyb20gY3VzdG9tX2FnZW50IGltcG9ydCBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50XG5mcm9tIGFnZW50X2ZhY3RvcnkgaW1wb3J0IGNyZWF0ZV9uZXdfYWdlbnRfaW5zdGFuY2VcbmZyb20gc2NoZW1hcyBpbXBvcnQgKFxuICAgIENyZWF0ZUFnZW50UmVxLCBHZW5lcmF0ZVJlc3BvbnNlUmVxLCBHZW5lcmF0ZVJlYWN0aW9uUmVzcG9uc2UsIEFkZE1lbW9yeVJlcSxcbiAgICBGZXRjaE1lbW9yaWVzUmVxLCBVcGRhdGVTdGF0dXNSZXEsIEFnZW50TGlzdFJlc3BvbnNlLCBBZ2VudERldGFpbCxcbiAgICBBZ2VudENyZWF0aW9uUmVzcG9uc2UsIEFkZGVkTWVtb3J5UmVzcG9uc2UsIEZldGNoZWRNZW1vcmllc1Jlc3BvbnNlLFxuICAgIEZldGNoZWRNZW1vcmllc0RvY3VtZW50LCBBZ2VudFN1bW1hcnlSZXNwb25zZSwgRGVsZXRlZEFnZW50UmVzcG9uc2VcbilcbmZyb20gdXRpbHMgaW1wb3J0IEJDb2xvcnNcblxucm91dGVyID0gQVBJUm91dGVyKFxuICAgIHByZWZpeD1cIi9hZ2VudHNcIixcbiAgICB0YWdzPVtcImFnZW50c1wiXVxuKVxuXG5hZ2VudHNfZGI6IERpY3Rbc3RyLCBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50XSA9IHt9XG5cblxuZGVmIGdldF9hZ2VudF9tb2RlbF9kZXRhaWxzKGFnZW50OiBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50KSAtPiBUdXBsZVtzdHIsIHN0cl06XG4gICAgbGxtX21vZGVsX3VzZWQgPSBcInVua25vd25cIlxuICAgIGVtYmVkZGluZ19tb2RlbF91c2VkID0gXCJ1bmtub3duXCJcbiAgICBpZiBhZ2VudDpcbiAgICAgICAgaWYgaGFzYXR0cihhZ2VudCwgJ2xsbScpIGFuZCBhZ2VudC5sbG0gYW5kIGhhc2F0dHIoYWdlbnQubGxtLCAnbW9kZWxfbmFtZScpOlxuICAgICAgICAgICAgbGxtX21vZGVsX3VzZWQgPSBhZ2VudC5sbG0ubW9kZWxfbmFtZVxuICAgICAgICBpZiAoaGFzYXR0cihhZ2VudCwgJ21lbW9yeScpIGFuZCBhZ2VudC5tZW1vcnkgYW5kXG4gICAgICAgICAgICBoYXNhdHRyKGFnZW50Lm1lbW9yeSwgJ21lbW9yeV9yZXRyaWV2ZXInKSBhbmQgYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXIgYW5kXG4gICAgICAgICAgICBoYXNhdHRyKGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyLCAndmVjdG9yc3RvcmUnKSBhbmQgYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXIudmVjdG9yc3RvcmUgYW5kXG4gICAgICAgICAgICBoYXNhdHRyKGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyLnZlY3RvcnN0b3JlLCAnZW1iZWRkaW5nX2Z1bmN0aW9uJykgYW5kXG4gICAgICAgICAgICBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlci52ZWN0b3JzdG9yZS5lbWJlZGRpbmdfZnVuY3Rpb24gYW5kXG4gICAgICAgICAgICBoYXNhdHRyKGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyLnZlY3RvcnN0b3JlLmVtYmVkZGluZ19mdW5jdGlvbiwgJ21vZGVsJykpOlxuICAgICAgICAgICAgZW1iZWRkaW5nX21vZGVsX3VzZWQgPSBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlci52ZWN0b3JzdG9yZS5lbWJlZGRpbmdfZnVuY3Rpb24ubW9kZWxcbiAgICByZXR1cm4gbGxtX21vZGVsX3VzZWQsIGVtYmVkZGluZ19tb2RlbF91c2VkXG5cblxuQHJvdXRlci5wb3N0KFwiXCIsIHN0YXR1c19jb2RlPTIwMSwgcmVzcG9uc2VfbW9kZWw9QWdlbnRDcmVhdGlvblJlc3BvbnNlKVxuZGVmIGNyZWF0ZV9hZ2VudF9lbmRwb2ludChyZXE6IENyZWF0ZUFnZW50UmVxKTpcbiAgICBwcmludChmXCJ7QkNvbG9ycy5IRUFERVJ9REVCVUc6IC9hZ2VudHMgUE9TVCByZXF1ZXN0IHJlY2VpdmVkOiB7cmVxLm1vZGVsX2R1bXBfanNvbihleGNsdWRlX25vbmU9VHJ1ZSl9e0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICBhaWQgPSByZXEuYWdlbnRfaWQgb3Igc3RyKHV1aWQ0KCkpXG4gICAgaWYgYWlkIGluIGFnZW50c19kYjpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDAsIGRldGFpbD1mXCJBZ2VudCB3aXRoIGFnZW50X2lkICd7YWlkfScgYWxyZWFkeSBleGlzdHMuXCIpXG4gICAgdHJ5OlxuICAgICAgICBjdXJyZW50X2FnZW50X2luc3RhbmNlID0gY3JlYXRlX25ld19hZ2VudF9pbnN0YW5jZShcbiAgICAgICAgICAgIG5hbWU9cmVxLm5hbWUsIGFnZT1yZXEuYWdlLCB0cmFpdHM9cmVxLnRyYWl0cywgc3RhdHVzPXJlcS5zdGF0dXMsXG4gICAgICAgICAgICBzdW1tYXJ5X3JlZnJlc2hfc2Vjb25kcz1yZXEuc3VtbWFyeV9yZWZyZXNoX3NlY29uZHMsXG4gICAgICAgICAgICByZWZsZWN0aW9uX3RocmVzaG9sZD1yZXEucmVmbGVjdGlvbl90aHJlc2hvbGQsIHZlcmJvc2U9cmVxLnZlcmJvc2UsXG4gICAgICAgICAgICBsbG1fbW9kZWxfbmFtZT1yZXEubW9kZWxfbmFtZSwgZW1iZWRkaW5nX21vZGVsX25hbWU9cmVxLmVtYmVkZGluZ19tb2RlbF9uYW1lXG4gICAgICAgIClcbi4uLlxuXG5Acm91dGVyLmdldChcIlwiLCByZXNwb25zZV9tb2RlbD1BZ2VudExpc3RSZXNwb25zZSlcbmRlZiBsaXN0X2FnZW50c19lbmRwb2ludCgpOlxuICAgIGFnZW50X2RldGFpbHNfbGlzdCA9IFtdXG4gICAgZm9yIGFnZW50X2lkLCBhZ2VudF9pbnN0YW5jZSBpbiBhZ2VudHNfZGIuaXRlbXMoKTpcbiAgICAgICAgbmFtZSwgc3RhdHVzLCBsbG1fbW9kZWwsIGVtYl9tb2RlbCA9IFwiVW5rbm93blwiLCBcIlVua25vd25cIiwgXCJ1bmtub3duXCIsIFwidW5rbm93blwiXG4gICAgICAgIGlmIGFnZW50X2luc3RhbmNlOlxuICAgICAgICAgICAgbmFtZSA9IGFnZW50X2luc3RhbmNlLm5hbWVcbiAgICAgICAgICAgIHN0YXR1cyA9IGFnZW50X2luc3RhbmNlLnN0YXR1c1xuICAgICAgICAgICAgbGxtX21vZGVsLCBlbWJfbW9kZWwgPSBnZXRfYWdlbnRfbW9kZWxfZGV0YWlscyhhZ2VudF9pbnN0YW5jZSlcbiAgICAgICAgYWdlbnRfZGV0YWlsc19saXN0LmFwcGVuZChBZ2VudERldGFpbChcbiAgICAgICAgICAgIGFnZW50X2lkPWFnZW50X2lkLCBuYW1lPW5hbWUsIHN0YXR1cz1zdGF0dXMsXG4gICAgICAgICAgICBsbG1fbW9kZWw9bGxtX21vZGVsLCBlbWJlZGRpbmdfbW9kZWw9ZW1iX21vZGVsXG4gICAgICAgICkpXG4gICAgcmV0dXJuIEFnZW50TGlzdFJlc3BvbnNlKGFnZW50cz1hZ2VudF9kZXRhaWxzX2xpc3QpXG4uLi5cblxuQHJvdXRlci5wb3N0KFwiL3thZ2VudF9pZH0vZ2VuZXJhdGVfcmVzcG9uc2VcIiwgcmVzcG9uc2VfbW9kZWw9R2VuZXJhdGVSZWFjdGlvblJlc3BvbnNlKVxuZGVmIGdlbmVyYXRlX3Jlc3BvbnNlX2VuZHBvaW50KGFnZW50X2lkOiBzdHIsIHJlcTogR2VuZXJhdGVSZXNwb25zZVJlcSk6XG4gICAgb2JzZXJ2YXRpb24gPSByZXEucHJvbXB0LnN0cmlwKClcbiAgICBwcmludChmXCJ7QkNvbG9ycy5IRUFERVJ9REVCVUc6IC9nZW5lcmF0ZV9yZXNwb25zZSBmb3IgYWdlbnQge0JDb2xvcnMuQk9MRH17YWdlbnRfaWR9e0JDb2xvcnMuRU5EQ30gd2l0aCAne29ic2VydmF0aW9uWzo1MF19Li4uJyAoSz17cmVxLmsgb3IgJ2RlZmF1bHQnfSl7QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgIGlmIGFnZW50X2lkIG5vdCBpbiBhZ2VudHNfZGIgb3IgYWdlbnRzX2RiW2FnZW50X2lkXSBpcyBOb25lOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwNCwgZGV0YWlsPWZcIkFnZW50ICd7YWdlbnRfaWR9JyBub3QgZm91bmQgb3IgaW52YWxpZC5cIilcbiAgICBpZiBub3Qgb2JzZXJ2YXRpb246XG4gICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwMCwgZGV0YWlsPVwiT2JzZXJ2YXRpb24gY2Fubm90IGJlIGVtcHR5LlwiKVxuLi4uXG4gICAgXG4gICAgcmVzcG9uc2VfcGF5bG9hZF9kb2NzOiBMaXN0W0ZldGNoZWRNZW1vcmllc0RvY3VtZW50XSA9IFtdXG4gICAgdHJ5OlxuICAgICAgICByZXF1ZXN0ZWRfayA9IHJldHJpZXZlci5rICMgRGVmYXVsdCB0byByZXRyaWV2ZXIncyBrXG4gICAgICAgIGlmIHJlcS5rIGlzIG5vdCBOb25lIGFuZCByZXEuayA+IDAgYW5kIGhhc2F0dHIocmV0cmlldmVyLCAnaycpOlxuICAgICAgICAgICAgcmVxdWVzdGVkX2sgPSByZXEua1xuICAgICAgICAgICAgcmV0cmlldmVyLmsgPSByZXF1ZXN0ZWRfa1xuXG4gICAgICAgIGRvY3NfYW5kX3Njb3JlczogTGlzdFtUdXBsZVtEb2N1bWVudCwgZmxvYXRdXSA9IFtdXG4gICAgICAgIGlmIChoYXNhdHRyKHJldHJpZXZlciwgXCJ2ZWN0b3JzdG9yZVwiKSBhbmQgcmV0cmlldmVyLnZlY3RvcnN0b3JlIGFuZFxuICAgICAgICAgICAgaGFzYXR0cihyZXRyaWV2ZXIudmVjdG9yc3RvcmUsIFwic2ltaWxhcml0eV9zZWFyY2hfd2l0aF9yZWxldmFuY2Vfc2NvcmVzXCIpKTpcbiAgICAgICAgICAgIGRvY3NfYW5kX3Njb3JlcyA9IHJldHJpZXZlci52ZWN0b3JzdG9yZS5zaW1pbGFyaXR5X3NlYXJjaF93aXRoX3JlbGV2YW5jZV9zY29yZXMob2JzZXJ2YXRpb24sIGs9cmVxdWVzdGVkX2spXG4gICAgICAgIGVsc2U6XG4gICAgICAgICAgICBmZXRjaGVkX2RvY3Nfb25seTogTGlzdFtEb2N1bWVudF0gPSBhZ2VudC5tZW1vcnkuZmV0Y2hfbWVtb3JpZXMob2JzZXJ2YXRpb24sIG5vdz1kYXRldGltZS5ub3coKSlcbiAgICAgICAgICAgIGRvY3NfYW5kX3Njb3JlcyA9IFsoZG9jLCAwLjApIGZvciBkb2MgaW4gZmV0Y2hlZF9kb2NzX29ubHldXG4uLi5cblxuQHJvdXRlci5nZXQoXCIve2FnZW50X2lkfS9zdW1tYXJ5XCIsIHJlc3BvbnNlX21vZGVsPUFnZW50U3VtbWFyeVJlc3BvbnNlKVxuZGVmIGdldF9zdW1tYXJ5X2VuZHBvaW50KGFnZW50X2lkOiBzdHIpOlxuICAgIGlmIGFnZW50X2lkIG5vdCBpbiBhZ2VudHNfZGIgb3IgYWdlbnRzX2RiW2FnZW50X2lkXSBpcyBOb25lOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwNCwgZGV0YWlsPWZcIkFnZW50ICd7YWdlbnRfaWR9JyBub3QgZm91bmQgb3IgaW52YWxpZC5cIilcbiAgICBhZ2VudCA9IGFnZW50c19kYlthZ2VudF9pZF1cbiAgICBzdW1tYXJ5X3RleHQgPSBcIkVycm9yIGdlbmVyYXRpbmcgc3VtbWFyeS5cIlxuICAgIHRyeTpcbiAgICAgICAgc3VtbWFyeV90ZXh0ID0gYWdlbnQuZ2V0X3N1bW1hcnkoZm9yY2VfcmVmcmVzaD1UcnVlKVxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgc3VtbWFyeV90ZXh0ID0gZlwiRXJyb3IgZ2VuZXJhdGluZyBzdW1tYXJ5OiB7ZX1cIlxuICAgIHJldHVybiBBZ2VudFN1bW1hcnlSZXNwb25zZShhZ2VudF9pZD1hZ2VudF9pZCwgc3VtbWFyeT1zdW1tYXJ5X3RleHQpXG4uLi5cblBhdGg6IGNvbmZpZy5weVxuIyBGaWxlOiBjb25maWcucHlcbmltcG9ydCBvc1xuXG5ERUZBVUxUX0NIQVRfTU9ERUwgPSBcImdwdC00by1taW5pXCJcbkRFRkFVTFRfRU1CRURESU5HX01PREVMID0gXCJ0ZXh0LWVtYmVkZGluZy0zLXNtYWxsXCJcblxuT1BFTkFJX0FQSV9LRVlfU0VUID0gYm9vbChvcy5nZXRlbnYoXCJPUEVOQUlfQVBJX0tFWVwiKSlcbi4uLlxuUGF0aDogc2NoZW1hcy5weVxuIyBGaWxlOiBzY2hlbWFzLnB5XG5mcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwsIExpc3QsIERpY3QsIEFueVxuZnJvbSBweWRhbnRpYyBpbXBvcnQgQmFzZU1vZGVsLCBGaWVsZFxuXG5jbGFzcyBDcmVhdGVBZ2VudFJlcShCYXNlTW9kZWwpOlxuICAgIG5hbWU6IHN0clxuICAgIGFnZTogaW50XG4gICAgdHJhaXRzOiBzdHJcbiAgICBzdGF0dXM6IHN0clxuICAgIGFnZW50X2lkOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuICAgIHN1bW1hcnlfcmVmcmVzaF9zZWNvbmRzOiBpbnQgPSBGaWVsZChkZWZhdWx0PTM2MDAsIGdlPTApXG4gICAgcmVmbGVjdGlvbl90aHJlc2hvbGQ6IGludCA9IEZpZWxkKGRlZmF1bHQ9MCwgZ2U9MClcbiAgICB2ZXJib3NlOiBib29sID0gRmFsc2VcbiAgICBtb2RlbF9uYW1lOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuICAgIGVtYmVkZGluZ19tb2RlbF9uYW1lOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuXG5jbGFzcyBHZW5lcmF0ZVJlc3BvbnNlUmVxKEJhc2VNb2RlbCk6XG4gICAgcHJvbXB0OiBzdHJcbiAgICBrOiBPcHRpb25hbFtpbnRdID0gRmllbGQoZGVmYXVsdD1Ob25lLCBndD0wKVxuXG5jbGFzcyBHZW5lcmF0ZVJlYWN0aW9uUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBhZ2VudF9uYW1lOiBzdHJcbiAgICByZWFjdGlvbl90eXBlOiBzdHIgIyBTQVksIFRISU5LLCBETywgSUdOT1JFLCBVTktOT1dOXG4gICAgY29udGVudDogc3RyXG4gICAgb2JzZXJ2YXRpb25fd2FzX2ltcG9ydGFudDogYm9vbFxuXG5jbGFzcyBBZGRNZW1vcnlSZXEoQmFzZU1vZGVsKTpcbiAgICB0ZXh0X3RvX21lbW9yaXplOiBzdHJcblxuY2xhc3MgRmV0Y2hNZW1vcmllc1JlcShCYXNlTW9kZWwpOlxuICAgIG9ic2VydmF0aW9uOiBzdHJcbiAgICBrOiBPcHRpb25hbFtpbnRdID0gRmllbGQoZGVmYXVsdD1Ob25lLCBndD0wKVxuXG5jbGFzcyBVcGRhdGVTdGF0dXNSZXEoQmFzZU1vZGVsKTpcbiAgICBuZXdfc3RhdHVzOiBzdHJcblxuY2xhc3MgQWdlbnREZXRhaWwoQmFzZU1vZGVsKTpcbiAgICBhZ2VudF9pZDogc3RyXG4gICAgbmFtZTogc3RyXG4gICAgc3RhdHVzOiBzdHJcbiAgICBsbG1fbW9kZWw6IHN0clxuICAgIGVtYmVkZGluZ19tb2RlbDogc3RyXG5cbmNsYXNzIEFnZW50TGlzdFJlc3BvbnNlKEJhc2VNb2RlbCk6XG4gICAgYWdlbnRzOiBMaXN0W0FnZW50RGV0YWlsXVxuXG5jbGFzcyBBZ2VudENyZWF0aW9uUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBhZ2VudF9pZDogc3RyXG4gICAgbmFtZTogc3RyXG4gICAgbGxtX21vZGVsX3VzZWQ6IHN0clxuICAgIGVtYmVkZGluZ19tb2RlbF91c2VkOiBzdHJcblxuY2xhc3MgU2ltcGxlU3RhdHVzUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBzdGF0dXM6IHN0clxuICAgIG1lc3NhZ2U6IE9wdGlvbmFsW3N0cl0gPSBOb25lXG5cbmNsYXNzIEFkZGVkTWVtb3J5UmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBzdGF0dXM6IHN0clxuICAgIGFkZGVkX21lbW9yeTogc3RyXG5cbmNsYXNzIEZldGNoZWRNZW1vcmllc0RvY3VtZW50KEJhc2VNb2RlbCk6XG4gICAgY29udGVudDogc3RyXG4gICAgbWV0YWRhdGE6IERpY3Rbc3RyLCBBbnldXG4gICAgcmVsZXZhbmNlX3Njb3JlOiBmbG9hdFxuXG5jbGFzcyBGZXRjaGVkTWVtb3JpZXNSZXNwb25zZShCYXNlTW9kZWwpOlxuICAgIG1lbW9yaWVzOiBMaXN0W0ZldGNoZWRNZW1vcmllc0RvY3VtZW50XVxuLi4uXG5QYXRoOiBjdXN0b21fYWdlbnQucHlcbiMgRmlsZTogY3VzdG9tX2FnZW50LnB5XG5mcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZVxuZnJvbSB0eXBpbmcgaW1wb3J0IFR1cGxlLCBPcHRpb25hbCwgQW55XG5pbXBvcnQgcmVcblxuZnJvbSBsYW5nY2hhaW5fZXhwZXJpbWVudGFsLmdlbmVyYXRpdmVfYWdlbnRzLmdlbmVyYXRpdmVfYWdlbnQgaW1wb3J0IEdlbmVyYXRpdmVBZ2VudFxuZnJvbSBsYW5nY2hhaW4ucHJvbXB0cyBpbXBvcnQgUHJvbXB0VGVtcGxhdGVcbmZyb20gbGFuZ2NoYWluLmNoYWlucyBpbXBvcnQgTExNQ2hhaW5cblxuZnJvbSB1dGlscyBpbXBvcnQgQkNvbG9yc1xuXG5jbGFzcyBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50KEdlbmVyYXRpdmVBZ2VudCk6XG4gICAgZGVmIF9faW5pdF9fKHNlbGYsICoqZGF0YTogQW55KTpcbiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygqKmRhdGEpXG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLk9LR1JFRU59REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogSW5pdGlhbGl6ZWQgQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudCwgXCJcbiAgICAgICAgICAgICAgZlwidXNpbmcgYmFzZSBHZW5lcmF0aXZlQWdlbnQgbG9naWMue0JDb2xvcnMuRU5EQ31cIilcblxuICAgIGRlZiBnZXRfaW50ZXJwcmV0ZWRfcmVhY3Rpb24oc2VsZiwgb2JzZXJ2YXRpb246IHN0ciwgbm93OiBPcHRpb25hbFtkYXRldGltZV0gPSBOb25lKSAtPiBUdXBsZVtzdHIsIHN0ciwgYm9vbF06XG4gICAgICAgIGNhbGxfdGltZSA9IG5vdyBvciBkYXRldGltZS5ub3coKVxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5ESU19REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogQ2FsbGluZyBwYXJlbnQncyBnZW5lcmF0ZV9yZWFjdGlvbiBmb3I6ICd7b2JzZXJ2YXRpb25bOjUwXX0uLi4ne0JDb2xvcnMuRU5EQ31cIilcblxuICAgICAgICBpc19kaWFsb2d1ZV9mbGFnLCByZXN1bHRfc3RyID0gc3VwZXIoKS5nZW5lcmF0ZV9yZWFjdGlvbihvYnNlcnZhdGlvbiwgbm93PWNhbGxfdGltZSlcblxuICAgICAgICBlc3RpbWF0ZWRfb2JzZXJ2YXRpb25faW1wb3J0YW5jZSA9IEZhbHNlXG4gICAgICAgIHRyeTpcbiAgICAgICAgICAgIGlmIHNlbGYubGxtOlxuICAgICAgICAgICAgICAgIHBvaWduYW5jeV9wcm9tcHRfc3RyID0gKFxuICAgICAgICAgICAgICAgICAgICBcIklzIHRoZSBmb2xsb3dpbmcgb2JzZXJ2YXRpb24gbXVuZGFuZSAoZS5nLiwgYnJ1c2hpbmcgdGVldGgpIG9yIHBvaWduYW50IChlLmcuLCBhIG1ham9yIGxpZmUgZXZlbnQpPyBcIlxuICAgICAgICAgICAgICAgICAgICBcIkFuc3dlciB3aXRoICdtdW5kYW5lJyBvciAncG9pZ25hbnQnLlxcbk9ic2VydmF0aW9uOiB7b2JzZXJ2YXRpb25fdGV4dH1cXG5BbnN3ZXI6XCJcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgcHJvbXB0ID0gUHJvbXB0VGVtcGxhdGUuZnJvbV90ZW1wbGF0ZShwb2lnbmFuY3lfcHJvbXB0X3N0cilcbiAgICAgICAgICAgICAgICBjaGFpbiA9IExMTUNoYWluKGxsbT1zZWxmLmxsbSwgcHJvbXB0PXByb21wdClcbiAgICAgICAgICAgICAgICBwb2lnbmFuY3lfcmVzdWx0ID0gY2hhaW4ucnVuKG9ic2VydmF0aW9uX3RleHQ9b2JzZXJ2YXRpb24pLnN0cmlwKCkubG93ZXIoKVxuICAgICAgICAgICAgICAgIGlmIFwicG9pZ25hbnRcIiBpbiBwb2lnbmFuY3lfcmVzdWx0OlxuICAgICAgICAgICAgICAgICAgICBlc3RpbWF0ZWRfb2JzZXJ2YXRpb25faW1wb3J0YW5jZSA9IFRydWVcbiAgICAgICAgICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5ESU19REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogT2JzZXJ2YXRpb24gcG9pZ25hbmN5IGVzdGltYXRlZCBhcyAne3BvaWduYW5jeV9yZXN1bHR9JywgQVBJIGltcG9ydGFudCBmbGFnOiB7ZXN0aW1hdGVkX29ic2VydmF0aW9uX2ltcG9ydGFuY2V9e0JDb2xvcnMuRU5EQ31cIilcbiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlX3BvaWduYW5jeTpcbiAgICAgICAgICAgIHByaW50KGZcIntCQ29sb3JzLldBUk5JTkd9V0FSTiAoQWdlbnQge3NlbGYubmFtZX0pOiBDb3VsZCBub3QgZXN0aW1hdGUgb2JzZXJ2YXRpb24gcG9pZ25hbmN5IGZvciBBUEkgZmxhZzoge2VfcG9pZ25hbmN5fXtCQ29sb3JzLkVOREN9XCIpXG4uLi5cblBhdGg6IHV0aWxzLnB5XG4jIEZpbGU6IHV0aWxzLnB5XG5jbGFzcyBCQ29sb3JzOlxuICAgIEhFQURFUiA9ICdcXDAzM1s5NW0nXG4gICAgT0tCTFVFID0gJ1xcMDMzWzk0bSdcbiAgICBPS0NZQU4gPSAnXFwwMzNbOTZtJ1xuICAgIE9LR1JFRU4gPSAnXFwwMzNbOTJtJ1xuICAgIFdBUk5JTkcgPSAnXFwwMzNbOTNtJ1xuICAgIEZBSUwgPSAnXFwwMzNbOTFtJ1xuICAgIEVOREMgPSAnXFwwMzNbMG0nXG4gICAgQk9MRCA9ICdcXDAzM1sxbSdcbiAgICBVTkRFUkxJTkUgPSAnXFwwMzNbNG0nXG4gICAgRElNID0gJ1xcMDMzWzJtJ1xuICAgIElNUE9SVEFOQ0VfSElHSCA9IE9LR1JFRU5cbiAgICBJTVBPUlRBTkNFX01FRElVTSA9IFdBUk5JTkdcbiAgICBJTVBPUlRBTkNFX0xPVyA9IEZBSUxcbiAgICBNRVRBREFUQV9LRVkgPSBPS0NZQU5cbiAgICBNRVRBREFUQV9WQUxVRSA9IE9LQkxVRVxuICAgIENPTlRFTlRfQ09MT1IgPSBFTkRDXG4gICAgU0VQQVJBVE9SID0gRElNXG4uLi5cblBhdGg6IHByb21wdHMucHlcbiMgRmlsZTogcHJvbXB0cy5weVxuXG4jIC0tLSBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50IFByb21wdHMgLS0tXG5cbkRFQ0lTSU9OX1RFTVBMQVRFID0gKFxuICAgIFwiWW91IGFyZSB7YWdlbnRfbmFtZX0uXFxuXCJcbiAgICBcIllvdXIgY29yZSBjaGFyYWN0ZXJpc3RpY3MgYXJlOiB7YWdlbnRfdHJhaXRzfVxcblwiXG4gICAgXCJJdCBpcyB7Y3VycmVudF90aW1lfS5cXG5cIlxuICAgIFwiWW91ciBzdGF0dXMgaXM6IHthZ2VudF9zdGF0dXN9XFxuXCJcbiAgICBcIllvdSBvYnNlcnZlOiB7b2JzZXJ2YXRpb259XFxuXCJcbiAgICBcIlJlbGV2YW50IHJlY2VudCBtZW1vcmllczpcXG57bWVtb3J5X2NvbnRleHR9XFxuXFxuXCJcbiAgICBcIkNvbnNpZGVyaW5nIHlvdXIgcGVyc29uYWxpdHkgKGVzcGVjaWFsbHkgdHJhaXRzIGxpa2Uge2FnZW50X3RyYWl0c30pLCB0aGUgb2JzZXJ2YXRpb24sIGFuZCByZWNlbnQgbWVtb3JpZXMsIFwiXG4gICAgXCJ3aGF0IGlzIHRoZSAqbW9zdCBsaWtlbHkgdHlwZSogb2YgaW1tZWRpYXRlIHJlYWN0aW9uIHlvdSB3b3VsZCBoYXZlPyBDaG9vc2UgKm9uZSogZnJvbTogXCJcbiAgICBcIidTQVknIChzcGVhayBhbG91ZCksICdUSElOSycgKGludGVybmFsIHRob3VnaHQgb25seSksICdETycgKHBlcmZvcm0gYSBwaHlzaWNhbCBhY3Rpb24pLCAnSUdOT1JFJyAobm8gc2lnbmlmaWNhbnQgcmVhY3Rpb24sIHJlbWFpbiBpbiBjdXJyZW50IHN0YXR1cykuXCJcbiAgICBcIlxcblJlYWN0aW9uIFR5cGUgQ2hvaWNlOlwiXG4pXG4uLi5cblxuQUNUSU9OX1RFTVBMQVRFID0gKFxuICAgIFwiWW91IGFyZSB7YWdlbnRfbmFtZX0uXFxuXCJcbiAgICBcIllvdXIgY29yZSBjaGFyYWN0ZXJpc3RpY3MgYXJlOiB7YWdlbnRfdHJhaXRzfVxcblwiXG4gICAgXCJJdCBpcyB7Y3VycmVudF90aW1lfS5cXG5cIlxuICAgIFwiWW91ciBzdGF0dXMgaXM6IHthZ2VudF9zdGF0dXN9XFxuXCJcbiAgICBcIllvdSBvYnNlcnZlOiB7b2JzZXJ2YXRpb259XFxuXCJcbiAgICBcIlJlbGV2YW50IHJlY2VudCBtZW1vcmllczpcXG57bWVtb3J5X2NvbnRleHR9XFxuXCJcbiAgICBcIlJlbGF0aW9uc2hpcCBjb250ZXh0OiB7cmVsYXRpb25zaGlwX2NvbnRleHR9XFxuXFxuXCJcbiAgICBcIkNvbnNpZGVyaW5nIHlvdXIgcGVyc29uYWxpdHkgYW5kIHRoZSBzaXR1YXRpb24sIHdoYXQgKnBoeXNpY2FsIGFjdGlvbiogZG8geW91IHRha2UgaW4gaW1tZWRpYXRlIHJlc3BvbnNlIHRvIHRoZSBvYnNlcnZhdGlvbj8gXCJcbiAgICBcIkRlc2NyaWJlIHRoZSBhY3Rpb24gY29uY2lzZWx5IGFzIGlmIG5hcnJhdGluZyBpdC4gRXhhbXBsZTogSSBzaGlmdCBteSB3ZWlnaHQgdW5lYXNpbHkuIC8gSSBkcmF3IG15IHN3b3JkLlwiXG4gICAgXCJcXG5BY3Rpb24gVGFrZW46XCJcbilcbi4uLlxuXG5FTlRJVFlfQUNUSU9OX1RFTVBMQVRFID0gKFxuICAgIFwiQmFzZWQgb24gdGhlIGZvbGxvd2luZyBvYnNlcnZhdGlvbiwgd2hhdCBpcyB7ZW50aXR5fSBkb2luZz8gRGVzY3JpYmUgdGhlaXIgYWN0aW9ucyBjb25jaXNlbHkuXFxuXFxuXCJcbiAgICBcIk9ic2VydmF0aW9uOiB7b2JzZXJ2YXRpb259XFxuXFxuXCJcbiAgICBcIldoYXQge2VudGl0eX0gaXMgZG9pbmc6XCJcbilcblxuUkVMQVRJT05TSElQX1NVTU1BUllfVEVNUExBVEUgPSAoXG4gICAgXCJCYXNlZCBvbiB5b3VyIG1lbW9yaWVzLCB3aGF0IGlzIHlvdXIgcmVsYXRpb25zaGlwIG9yIGtub3dsZWRnZSBhYm91dCB7ZW50aXR5X25hbWV9P1xcblwiXG4gICAgXCJDb25zaWRlcjpcXG5cIlxuICAgIFwiMS4gSGF2ZSB5b3UgbWV0IHtlbnRpdHlfbmFtZX0gYmVmb3JlP1xcblwiXG4gICAgXCIyLiBEbyB5b3UgaGF2ZSBhbnkgaGlzdG9yeSB3aXRoIHtlbnRpdHlfbmFtZX0/XFxuXCJcbiAgICBcIjMuIERvIHlvdSBoYXZlIGFueSBmZWVsaW5ncyBvciBvcGluaW9ucyBhYm91dCB7ZW50aXR5X25hbWV9P1xcblwiXG4gICAgXCI0LiBJcyB0aGVyZSBhbnl0aGluZyBub3RhYmxlIGFib3V0IHtlbnRpdHlfbmFtZX0/XFxuXFxuXCJcbiAgICBcIkNvbnRleHQgZnJvbSB5b3VyIG1lbW9yaWVzOlxcbntyZWxldmFudF9tZW1vcmllc31cXG5cXG5cIlxuICAgIFwiQ3VycmVudCBvYnNlcnZhdGlvbjoge2VudGl0eV9uYW1lfSBpcyB7ZW50aXR5X2FjdGlvbn1cXG5cXG5cIlxuICAgIFwiUmVsYXRpb25zaGlwIHdpdGgge2VudGl0eV9uYW1lfSAoYmUgY29uY2lzZSwgaWYgbm8gcmVsYXRpb25zaGlwIGV4aXN0cywgc3RhdGUgdGhhdCBjbGVhcmx5KTpcIlxuKVxuLi4uXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJjMTgzMmEyMi0wZTNmLTQyMjAtYjYyOS1jNWJkMWI5ZTU3YzM7dG9vbHVfdnJ0eF8wMUg1b3h2ZHkyaGpCdDNZWEtkWjZQYVQiOnsicmVxdWVzdElkIjoiYzE4MzJhMjItMGUzZi00MjIwLWI2MjktYzViZDFiOWU1N2MzIiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMUg1b3h2ZHkyaGpCdDNZWEtkWjZQYVQiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBjdXN0b21fYWdlbnQucHlcbiMgRmlsZTogY3VzdG9tX2FnZW50LnB5XG5mcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZVxuZnJvbSB0eXBpbmcgaW1wb3J0IFR1cGxlLCBPcHRpb25hbCwgQW55XG5pbXBvcnQgcmVcblxuZnJvbSBsYW5nY2hhaW5fZXhwZXJpbWVudGFsLmdlbmVyYXRpdmVfYWdlbnRzLmdlbmVyYXRpdmVfYWdlbnQgaW1wb3J0IEdlbmVyYXRpdmVBZ2VudFxuZnJvbSBsYW5nY2hhaW4ucHJvbXB0cyBpbXBvcnQgUHJvbXB0VGVtcGxhdGVcbmZyb20gbGFuZ2NoYWluLmNoYWlucyBpbXBvcnQgTExNQ2hhaW5cblxuZnJvbSB1dGlscyBpbXBvcnQgQkNvbG9yc1xuXG5jbGFzcyBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50KEdlbmVyYXRpdmVBZ2VudCk6XG4gICAgZGVmIF9faW5pdF9fKHNlbGYsICoqZGF0YTogQW55KTpcbiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygqKmRhdGEpXG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLk9LR1JFRU59REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogSW5pdGlhbGl6ZWQgQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudCwgXCJcbiAgICAgICAgICAgICAgZlwidXNpbmcgYmFzZSBHZW5lcmF0aXZlQWdlbnQgbG9naWMue0JDb2xvcnMuRU5EQ31cIilcblxuICAgIGRlZiBnZXRfaW50ZXJwcmV0ZWRfcmVhY3Rpb24oc2VsZiwgb2JzZXJ2YXRpb246IHN0ciwgbm93OiBPcHRpb25hbFtkYXRldGltZV0gPSBOb25lKSAtPiBUdXBsZVtzdHIsIHN0ciwgYm9vbF06XG4gICAgICAgIGNhbGxfdGltZSA9IG5vdyBvciBkYXRldGltZS5ub3coKVxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5ESU19REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogQ2FsbGluZyBwYXJlbnQncyBnZW5lcmF0ZV9yZWFjdGlvbiBmb3I6ICd7b2JzZXJ2YXRpb25bOjUwXX0uLi4ne0JDb2xvcnMuRU5EQ31cIilcblxuICAgICAgICBpc19kaWFsb2d1ZV9mbGFnLCByZXN1bHRfc3RyID0gc3VwZXIoKS5nZW5lcmF0ZV9yZWFjdGlvbihvYnNlcnZhdGlvbiwgbm93PWNhbGxfdGltZSlcblxuICAgICAgICBlc3RpbWF0ZWRfb2JzZXJ2YXRpb25faW1wb3J0YW5jZSA9IEZhbHNlXG4gICAgICAgIHRyeTpcbiAgICAgICAgICAgIGlmIHNlbGYubGxtOlxuICAgICAgICAgICAgICAgIHBvaWduYW5jeV9wcm9tcHRfc3RyID0gKFxuICAgICAgICAgICAgICAgICAgICBcIklzIHRoZSBmb2xsb3dpbmcgb2JzZXJ2YXRpb24gbXVuZGFuZSAoZS5nLiwgYnJ1c2hpbmcgdGVldGgpIG9yIHBvaWduYW50IChlLmcuLCBhIG1ham9yIGxpZmUgZXZlbnQpPyBcIlxuICAgICAgICAgICAgICAgICAgICBcIkFuc3dlciB3aXRoICdtdW5kYW5lJyBvciAncG9pZ25hbnQnLlxcbk9ic2VydmF0aW9uOiB7b2JzZXJ2YXRpb25fdGV4dH1cXG5BbnN3ZXI6XCJcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgcHJvbXB0ID0gUHJvbXB0VGVtcGxhdGUuZnJvbV90ZW1wbGF0ZShwb2lnbmFuY3lfcHJvbXB0X3N0cilcbiAgICAgICAgICAgICAgICBjaGFpbiA9IExMTUNoYWluKGxsbT1zZWxmLmxsbSwgcHJvbXB0PXByb21wdClcbiAgICAgICAgICAgICAgICBwb2lnbmFuY3lfcmVzdWx0ID0gY2hhaW4ucnVuKG9ic2VydmF0aW9uX3RleHQ9b2JzZXJ2YXRpb24pLnN0cmlwKCkubG93ZXIoKVxuICAgICAgICAgICAgICAgIGlmIFwicG9pZ25hbnRcIiBpbiBwb2lnbmFuY3lfcmVzdWx0OlxuICAgICAgICAgICAgICAgICAgICBlc3RpbWF0ZWRfb2JzZXJ2YXRpb25faW1wb3J0YW5jZSA9IFRydWVcbiAgICAgICAgICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5ESU19REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogT2JzZXJ2YXRpb24gcG9pZ25hbmN5IGVzdGltYXRlZCBhcyAne3BvaWduYW5jeV9yZXN1bHR9JywgQVBJIGltcG9ydGFudCBmbGFnOiB7ZXN0aW1hdGVkX29ic2VydmF0aW9uX2ltcG9ydGFuY2V9e0JDb2xvcnMuRU5EQ31cIilcbiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlX3BvaWduYW5jeTpcbiAgICAgICAgICAgIHByaW50KGZcIntCQ29sb3JzLldBUk5JTkd9V0FSTiAoQWdlbnQge3NlbGYubmFtZX0pOiBDb3VsZCBub3QgZXN0aW1hdGUgb2JzZXJ2YXRpb24gcG9pZ25hbmN5IGZvciBBUEkgZmxhZzoge2VfcG9pZ25hbmN5fXtCQ29sb3JzLkVOREN9XCIpXG5cbiAgICAgICAgY29udGVudCA9IHNlbGYuX2NsZWFuX3Jlc3BvbnNlKHJlc3VsdF9zdHIpXG5cbiAgICAgICAgaWYgaXNfZGlhbG9ndWVfZmxhZzpcbiAgICAgICAgICAgIGFjdHVhbF9kaWFsb2d1ZSA9IGNvbnRlbnRbbGVuKFwic2FpZCBcIik6XS5zdHJpcCgpIGlmIGNvbnRlbnQubG93ZXIoKS5zdGFydHN3aXRoKFwic2FpZCBcIikgZWxzZSBjb250ZW50XG4gICAgICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5PS0JMVUV9REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogSW50ZXJwcmV0ZWQgYXMgU0FZLCBDb250ZW50OiAne2FjdHVhbF9kaWFsb2d1ZX0ne0JDb2xvcnMuRU5EQ31cIilcbiAgICAgICAgICAgIHJldHVybiBcIlNBWVwiLCBhY3R1YWxfZGlhbG9ndWUsIGVzdGltYXRlZF9vYnNlcnZhdGlvbl9pbXBvcnRhbmNlXG4gICAgICAgIGVsc2U6XG4gICAgICAgICAgICBpZiBub3QgY29udGVudC5zdHJpcCgpIG9yIGNvbnRlbnQubG93ZXIoKSA9PSBcIm5vbmVcIjpcbiAgICAgICAgICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5ESU19REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogSW50ZXJwcmV0ZWQgYXMgSUdOT1JFLntCQ29sb3JzLkVOREN9XCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiSUdOT1JFXCIsIFwiXCIsIGVzdGltYXRlZF9vYnNlcnZhdGlvbl9pbXBvcnRhbmNlXG4gICAgICAgICAgICBlbHNlOlxuICAgICAgICAgICAgICAgIHByaW50KGZcIntCQ29sb3JzLk9LR1JFRU59REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogSW50ZXJwcmV0ZWQgYXMgRE8gKHJlYWN0aW9uKSwgQ29udGVudDogJ3tjb250ZW50fSd7QkNvbG9ycy5FTkRDfVwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBcIkRPXCIsIGNvbnRlbnQsIGVzdGltYXRlZF9vYnNlcnZhdGlvbl9pbXBvcnRhbmNlXG4uLi5cblBhdGg6IHJvdXRlcnMvYWdlbnRfcm91dGVyLnB5XG4jIEZpbGU6IHJvdXRlcnMvYWdlbnRfcm91dGVyLnB5XG5pbXBvcnQgdHJhY2ViYWNrXG5mcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZVxuZnJvbSB0eXBpbmcgaW1wb3J0IERpY3QsIExpc3QsIEFueSwgVHVwbGVcbmZyb20gdXVpZCBpbXBvcnQgdXVpZDRcbmltcG9ydCBudW1weSBhcyBucFxuXG5mcm9tIGZhc3RhcGkgaW1wb3J0IEFQSVJvdXRlciwgSFRUUEV4Y2VwdGlvblxuZnJvbSBsYW5nY2hhaW5fY29yZS5kb2N1bWVudHMgaW1wb3J0IERvY3VtZW50ICMgUmVxdWlyZWQgZm9yIGZldGNoX21lbW9yaWVzIHR5cGUgaGludFxuXG5mcm9tIGN1c3RvbV9hZ2VudCBpbXBvcnQgQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudFxuZnJvbSBhZ2VudF9mYWN0b3J5IGltcG9ydCBjcmVhdGVfbmV3X2FnZW50X2luc3RhbmNlXG5mcm9tIHNjaGVtYXMgaW1wb3J0IChcbiAgICBDcmVhdGVBZ2VudFJlcSwgR2VuZXJhdGVSZXNwb25zZVJlcSwgR2VuZXJhdGVSZWFjdGlvblJlc3BvbnNlLCBBZGRNZW1vcnlSZXEsXG4gICAgRmV0Y2hNZW1vcmllc1JlcSwgVXBkYXRlU3RhdHVzUmVxLCBBZ2VudExpc3RSZXNwb25zZSwgQWdlbnREZXRhaWwsXG4gICAgQWdlbnRDcmVhdGlvblJlc3BvbnNlLCBBZGRlZE1lbW9yeVJlc3BvbnNlLCBGZXRjaGVkTWVtb3JpZXNSZXNwb25zZSxcbiAgICBGZXRjaGVkTWVtb3JpZXNEb2N1bWVudCwgQWdlbnRTdW1tYXJ5UmVzcG9uc2UsIERlbGV0ZWRBZ2VudFJlc3BvbnNlXG4pXG4uLi5cblxuXG5kZWYgZ2V0X2FnZW50X21vZGVsX2RldGFpbHMoYWdlbnQ6IEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnQpIC0+IFR1cGxlW3N0ciwgc3RyXTpcbiAgICBsbG1fbW9kZWxfdXNlZCA9IFwidW5rbm93blwiXG4gICAgZW1iZWRkaW5nX21vZGVsX3VzZWQgPSBcInVua25vd25cIlxuICAgIGlmIGFnZW50OlxuICAgICAgICBpZiBoYXNhdHRyKGFnZW50LCAnbGxtJykgYW5kIGFnZW50LmxsbSBhbmQgaGFzYXR0cihhZ2VudC5sbG0sICdtb2RlbF9uYW1lJyk6XG4gICAgICAgICAgICBsbG1fbW9kZWxfdXNlZCA9IGFnZW50LmxsbS5tb2RlbF9uYW1lXG4gICAgICAgIGlmIChoYXNhdHRyKGFnZW50LCAnbWVtb3J5JykgYW5kIGFnZW50Lm1lbW9yeSBhbmRcbiAgICAgICAgICAgIGhhc2F0dHIoYWdlbnQubWVtb3J5LCAnbWVtb3J5X3JldHJpZXZlcicpIGFuZCBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlciBhbmRcbiAgICAgICAgICAgIGhhc2F0dHIoYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXIsICd2ZWN0b3JzdG9yZScpIGFuZCBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlci52ZWN0b3JzdG9yZSBhbmRcbiAgICAgICAgICAgIGhhc2F0dHIoYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXIudmVjdG9yc3RvcmUsICdlbWJlZGRpbmdfZnVuY3Rpb24nKSBhbmRcbiAgICAgICAgICAgIGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyLnZlY3RvcnN0b3JlLmVtYmVkZGluZ19mdW5jdGlvbiBhbmRcbiAgICAgICAgICAgIGhhc2F0dHIoYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXIudmVjdG9yc3RvcmUuZW1iZWRkaW5nX2Z1bmN0aW9uLCAnbW9kZWwnKSk6XG4gICAgICAgICAgICBlbWJlZGRpbmdfbW9kZWxfdXNlZCA9IGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyLnZlY3RvcnN0b3JlLmVtYmVkZGluZ19mdW5jdGlvbi5tb2RlbFxuICAgIHJldHVybiBsbG1fbW9kZWxfdXNlZCwgZW1iZWRkaW5nX21vZGVsX3VzZWRcblxuXG5Acm91dGVyLnBvc3QoXCJcIiwgc3RhdHVzX2NvZGU9MjAxLCByZXNwb25zZV9tb2RlbD1BZ2VudENyZWF0aW9uUmVzcG9uc2UpXG5kZWYgY3JlYXRlX2FnZW50X2VuZHBvaW50KHJlcTogQ3JlYXRlQWdlbnRSZXEpOlxuICAgIHByaW50KGZcIntCQ29sb3JzLkhFQURFUn1ERUJVRzogL2FnZW50cyBQT1NUIHJlcXVlc3QgcmVjZWl2ZWQ6IHtyZXEubW9kZWxfZHVtcF9qc29uKGV4Y2x1ZGVfbm9uZT1UcnVlKX17QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgIGFpZCA9IHJlcS5hZ2VudF9pZCBvciBzdHIodXVpZDQoKSlcbiAgICBpZiBhaWQgaW4gYWdlbnRzX2RiOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwMCwgZGV0YWlsPWZcIkFnZW50IHdpdGggYWdlbnRfaWQgJ3thaWR9JyBhbHJlYWR5IGV4aXN0cy5cIilcbiAgICB0cnk6XG4gICAgICAgIGN1cnJlbnRfYWdlbnRfaW5zdGFuY2UgPSBjcmVhdGVfbmV3X2FnZW50X2luc3RhbmNlKFxuICAgICAgICAgICAgbmFtZT1yZXEubmFtZSwgYWdlPXJlcS5hZ2UsIHRyYWl0cz1yZXEudHJhaXRzLCBzdGF0dXM9cmVxLnN0YXR1cyxcbiAgICAgICAgICAgIHN1bW1hcnlfcmVmcmVzaF9zZWNvbmRzPXJlcS5zdW1tYXJ5X3JlZnJlc2hfc2Vjb25kcyxcbiAgICAgICAgICAgIHJlZmxlY3Rpb25fdGhyZXNob2xkPXJlcS5yZWZsZWN0aW9uX3RocmVzaG9sZCwgdmVyYm9zZT1yZXEudmVyYm9zZSxcbiAgICAgICAgICAgIGxsbV9tb2RlbF9uYW1lPXJlcS5tb2RlbF9uYW1lLCBlbWJlZGRpbmdfbW9kZWxfbmFtZT1yZXEuZW1iZWRkaW5nX21vZGVsX25hbWVcbiAgICAgICAgKVxuLi4uXG5cbiAgICBhZ2VudDogQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudCA9IGFnZW50c19kYlthZ2VudF9pZF1cbiAgICBvcmlnaW5hbF9rID0gLTFcbiAgICByZXRyaWV2ZXIgPSBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlclxuICAgIGlmIGhhc2F0dHIocmV0cmlldmVyLCAnaycpOlxuICAgICAgICAgb3JpZ2luYWxfayA9IHJldHJpZXZlci5rXG5cbiAgICBhcGlfcmVhY3Rpb25fdHlwZSwgYXBpX2NvbnRlbnQsIG9ic2VydmF0aW9uX3dhc19pbXBvcnRhbnRfZmxhZyA9IFwiVU5LTk9XTlwiLCBcIlwiLCBGYWxzZVxuICAgIHRyeTpcbiAgICAgICAgaWYgcmVxLmsgaXMgbm90IE5vbmUgYW5kIHJlcS5rID4gMCBhbmQgaGFzYXR0cihyZXRyaWV2ZXIsICdrJyk6XG4gICAgICAgICAgICByZXRyaWV2ZXIuayA9IHJlcS5rXG4gICAgICAgIFxuICAgICAgICBhcGlfcmVhY3Rpb25fdHlwZSwgYXBpX2NvbnRlbnQsIG9ic2VydmF0aW9uX3dhc19pbXBvcnRhbnRfZmxhZyA9IGFnZW50LmdldF9pbnRlcnByZXRlZF9yZWFjdGlvbihvYnNlcnZhdGlvbiwgZGF0ZXRpbWUubm93KCkpXG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLk9LR1JFRU59REVCVUc6IGFnZW50LmdldF9pbnRlcnByZXRlZF9yZWFjdGlvbiBjb21wbGV0ZWQuIEFQSSBUeXBlOiAne2FwaV9yZWFjdGlvbl90eXBlfScsIEltcG9ydGFudDoge29ic2VydmF0aW9uX3dhc19pbXBvcnRhbnRfZmxhZ317QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuLi4uXG5cbkByb3V0ZXIucG9zdChcIi97YWdlbnRfaWR9L2FkZF9tZW1vcnlcIiwgcmVzcG9uc2VfbW9kZWw9QWRkZWRNZW1vcnlSZXNwb25zZSlcbmRlZiBhZGRfbWVtb3J5X2VuZHBvaW50KGFnZW50X2lkOiBzdHIsIHJlcTogQWRkTWVtb3J5UmVxKTpcbiAgICBpZiBhZ2VudF9pZCBub3QgaW4gYWdlbnRzX2RiIG9yIGFnZW50c19kYlthZ2VudF9pZF0gaXMgTm9uZTpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDQsIGRldGFpbD1mXCJBZ2VudCAne2FnZW50X2lkfScgbm90IGZvdW5kIG9yIGludmFsaWQuXCIpXG4gICAgdGV4dF90b19hZGQgPSByZXEudGV4dF90b19tZW1vcml6ZS5zdHJpcCgpXG4gICAgaWYgbm90IHRleHRfdG9fYWRkOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwMCwgZGV0YWlsPVwiTWVtb3J5IHRleHQgbWF5IG5vdCBiZSBlbXB0eS5cIilcbiAgICBhZ2VudCA9IGFnZW50c19kYlthZ2VudF9pZF1cbiAgICB0cnk6XG4gICAgICAgIGlmIG5vdCBhZ2VudC5tZW1vcnk6XG4gICAgICAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJBZ2VudCB7YWdlbnRfaWR9IG1lbW9yeSBub3QgaW5pdGlhbGl6ZWQuXCIpXG4gICAgICAgIGFnZW50Lm1lbW9yeS5hZGRfbWVtb3J5KHRleHRfdG9fYWRkLCBub3c9ZGF0ZXRpbWUubm93KCkpXG4gICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTUwMCwgZGV0YWlsPWZcIkVycm9yIGFkZGluZyBtZW1vcnk6IHtlfVwiKVxuICAgIHJldHVybiBBZGRlZE1lbW9yeVJlc3BvbnNlKHN0YXR1cz1cInN1Y2Nlc3NcIiwgYWRkZWRfbWVtb3J5PXRleHRfdG9fYWRkKVxuXG5Acm91dGVyLnBvc3QoXCIve2FnZW50X2lkfS9mZXRjaF9tZW1vcmllc1wiLCByZXNwb25zZV9tb2RlbD1GZXRjaGVkTWVtb3JpZXNSZXNwb25zZSlcbmRlZiBmZXRjaF9tZW1vcmllc19lbmRwb2ludChhZ2VudF9pZDogc3RyLCByZXE6IEZldGNoTWVtb3JpZXNSZXEpOlxuICAgIGlmIGFnZW50X2lkIG5vdCBpbiBhZ2VudHNfZGIgb3IgYWdlbnRzX2RiW2FnZW50X2lkXSBpcyBOb25lOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwNCwgZGV0YWlsPWZcIkFnZW50ICd7YWdlbnRfaWR9JyBub3QgZm91bmQgb3IgaW52YWxpZC5cIilcbiAgICBvYnNlcnZhdGlvbiA9IHJlcS5vYnNlcnZhdGlvbi5zdHJpcCgpXG4gICAgaWYgbm90IG9ic2VydmF0aW9uOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwMCwgZGV0YWlsPVwiT2JzZXJ2YXRpb24gdGV4dCBtYXkgbm90IGJlIGVtcHR5IGZvciBmZXRjaGluZyBtZW1vcmllcy5cIilcblxuICAgIGFnZW50ID0gYWdlbnRzX2RiW2FnZW50X2lkXVxuICAgIGlmIG5vdCBhZ2VudC5tZW1vcnkgb3Igbm90IGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyOlxuICAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJBZ2VudCB7YWdlbnRfaWR9IG1lbW9yeS9yZXRyaWV2ZXIgbm90IGluaXRpYWxpemVkLlwiKVxuXG4gICAgb3JpZ2luYWxfaywgcmV0cmlldmVyID0gLTEsIGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyXG4gICAgaWYgaGFzYXR0cihyZXRyaWV2ZXIsICdrJyk6IG9yaWdpbmFsX2sgPSByZXRyaWV2ZXIua1xuICAgIFxuICAgIHJlc3BvbnNlX3BheWxvYWRfZG9jczogTGlzdFtGZXRjaGVkTWVtb3JpZXNEb2N1bWVudF0gPSBbXVxuICAgIHRyeTpcbiAgICAgICAgcmVxdWVzdGVkX2sgPSByZXRyaWV2ZXIuayAjIERlZmF1bHQgdG8gcmV0cmlldmVyJ3Mga1xuICAgICAgICBpZiByZXEuayBpcyBub3QgTm9uZSBhbmQgcmVxLmsgPiAwIGFuZCBoYXNhdHRyKHJldHJpZXZlciwgJ2snKTpcbiAgICAgICAgICAgIHJlcXVlc3RlZF9rID0gcmVxLmtcbiAgICAgICAgICAgIHJldHJpZXZlci5rID0gcmVxdWVzdGVkX2tcblxuICAgICAgICBkb2NzX2FuZF9zY29yZXM6IExpc3RbVHVwbGVbRG9jdW1lbnQsIGZsb2F0XV0gPSBbXVxuICAgICAgICBpZiAoaGFzYXR0cihyZXRyaWV2ZXIsIFwidmVjdG9yc3RvcmVcIikgYW5kIHJldHJpZXZlci52ZWN0b3JzdG9yZSBhbmRcbiAgICAgICAgICAgIGhhc2F0dHIocmV0cmlldmVyLnZlY3RvcnN0b3JlLCBcInNpbWlsYXJpdHlfc2VhcmNoX3dpdGhfcmVsZXZhbmNlX3Njb3Jlc1wiKSk6XG4gICAgICAgICAgICBkb2NzX2FuZF9zY29yZXMgPSByZXRyaWV2ZXIudmVjdG9yc3RvcmUuc2ltaWxhcml0eV9zZWFyY2hfd2l0aF9yZWxldmFuY2Vfc2NvcmVzKG9ic2VydmF0aW9uLCBrPXJlcXVlc3RlZF9rKVxuICAgICAgICBlbHNlOlxuICAgICAgICAgICAgZmV0Y2hlZF9kb2NzX29ubHk6IExpc3RbRG9jdW1lbnRdID0gYWdlbnQubWVtb3J5LmZldGNoX21lbW9yaWVzKG9ic2VydmF0aW9uLCBub3c9ZGF0ZXRpbWUubm93KCkpXG4gICAgICAgICAgICBkb2NzX2FuZF9zY29yZXMgPSBbKGRvYywgMC4wKSBmb3IgZG9jIGluIGZldGNoZWRfZG9jc19vbmx5XVxuXG4gICAgICAgIGZvciBkb2MsIHNjb3JlIGluIGRvY3NfYW5kX3Njb3JlczpcbiAgICAgICAgICAgIHNlcmlhbGl6YWJsZV9tZXRhZGF0YSA9IHtcbiAgICAgICAgICAgICAgICBrOiB2Lmlzb2Zvcm1hdCgpIGlmIGlzaW5zdGFuY2UodiwgZGF0ZXRpbWUpIGVsc2VcbiAgICAgICAgICAgICAgICAgICB2LnRvbGlzdCgpIGlmIGlzaW5zdGFuY2UodiwgbnAubmRhcnJheSkgZWxzZVxuICAgICAgICAgICAgICAgICAgIGZsb2F0KHYpIGlmIGlzaW5zdGFuY2UodiwgKG5wLmZsb2F0MzIsIG5wLmZsb2F0NjQpKSBlbHNlXG4gICAgICAgICAgICAgICAgICAgaW50KHYpIGlmIGlzaW5zdGFuY2UodiwgKG5wLmludDMyLCBucC5pbnQ2NCkpIGVsc2UgdlxuICAgICAgICAgICAgICAgIGZvciBrLCB2IGluIGRvYy5tZXRhZGF0YS5pdGVtcygpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNwb25zZV9wYXlsb2FkX2RvY3MuYXBwZW5kKEZldGNoZWRNZW1vcmllc0RvY3VtZW50KFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ9ZG9jLnBhZ2VfY29udGVudCwgbWV0YWRhdGE9c2VyaWFsaXphYmxlX21ldGFkYXRhLCByZWxldmFuY2Vfc2NvcmU9c2NvcmVcbiAgICAgICAgICAgICkpXG4gICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTUwMCwgZGV0YWlsPWZcIkVycm9yIGZldGNoaW5nIG1lbW9yaWVzOiB7ZX1cIilcbiAgICBmaW5hbGx5OlxuICAgICAgICBpZiBvcmlnaW5hbF9rICE9IC0xIGFuZCBoYXNhdHRyKHJldHJpZXZlciwgJ2snKTpcbiAgICAgICAgICAgICByZXRyaWV2ZXIuayA9IG9yaWdpbmFsX2tcbiAgICByZXR1cm4gRmV0Y2hlZE1lbW9yaWVzUmVzcG9uc2UobWVtb3JpZXM9cmVzcG9uc2VfcGF5bG9hZF9kb2NzKVxuLi4uXG5QYXRoOiBwcm9tcHRzLnB5XG4jIEZpbGU6IHByb21wdHMucHlcblxuIyAtLS0gQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudCBQcm9tcHRzIC0tLVxuXG5ERUNJU0lPTl9URU1QTEFURSA9IChcbiAgICBcIllvdSBhcmUge2FnZW50X25hbWV9LlxcblwiXG4gICAgXCJZb3VyIGNvcmUgY2hhcmFjdGVyaXN0aWNzIGFyZToge2FnZW50X3RyYWl0c31cXG5cIlxuICAgIFwiSXQgaXMge2N1cnJlbnRfdGltZX0uXFxuXCJcbiAgICBcIllvdXIgc3RhdHVzIGlzOiB7YWdlbnRfc3RhdHVzfVxcblwiXG4gICAgXCJZb3Ugb2JzZXJ2ZToge29ic2VydmF0aW9ufVxcblwiXG4gICAgXCJSZWxldmFudCByZWNlbnQgbWVtb3JpZXM6XFxue21lbW9yeV9jb250ZXh0fVxcblxcblwiXG4gICAgXCJDb25zaWRlcmluZyB5b3VyIHBlcnNvbmFsaXR5IChlc3BlY2lhbGx5IHRyYWl0cyBsaWtlIHthZ2VudF90cmFpdHN9KSwgdGhlIG9ic2VydmF0aW9uLCBhbmQgcmVjZW50IG1lbW9yaWVzLCBcIlxuICAgIFwid2hhdCBpcyB0aGUgKm1vc3QgbGlrZWx5IHR5cGUqIG9mIGltbWVkaWF0ZSByZWFjdGlvbiB5b3Ugd291bGQgaGF2ZT8gQ2hvb3NlICpvbmUqIGZyb206IFwiXG4gICAgXCInU0FZJyAoc3BlYWsgYWxvdWQpLCAnVEhJTksnIChpbnRlcm5hbCB0aG91Z2h0IG9ubHkpLCAnRE8nIChwZXJmb3JtIGEgcGh5c2ljYWwgYWN0aW9uKSwgJ0lHTk9SRScgKG5vIHNpZ25pZmljYW50IHJlYWN0aW9uLCByZW1haW4gaW4gY3VycmVudCBzdGF0dXMpLlwiXG4gICAgXCJcXG5SZWFjdGlvbiBUeXBlIENob2ljZTpcIlxuKVxuXG5USE9VR0hUX1RFTVBMQVRFID0gKFxuICAgIFwiWW91IGFyZSB7YWdlbnRfbmFtZX0uXFxuXCJcbiAgICBcIllvdXIgY29yZSBjaGFyYWN0ZXJpc3RpY3MgYXJlOiB7YWdlbnRfdHJhaXRzfVxcblwiXG4gICAgXCJJdCBpcyB7Y3VycmVudF90aW1lfS5cXG5cIlxuICAgIFwiWW91ciBzdGF0dXMgaXM6IHthZ2VudF9zdGF0dXN9XFxuXCJcbiAgICBcIllvdSBvYnNlcnZlOiB7b2JzZXJ2YXRpb259XFxuXCJcbiAgICBcIlJlbGV2YW50IHJlY2VudCBtZW1vcmllczpcXG57bWVtb3J5X2NvbnRleHR9XFxuXCJcbiAgICBcIlJlbGF0aW9uc2hpcCBjb250ZXh0OiB7cmVsYXRpb25zaGlwX2NvbnRleHR9XFxuXFxuXCJcbiAgICBcIkNvbnNpZGVyaW5nIHlvdXIgcGVyc29uYWxpdHkgYW5kIHRoZSBzaXR1YXRpb24sIHdoYXQgaXMgeW91ciAqaW50ZXJuYWwgdGhvdWdodCogb3IgKmFzc2Vzc21lbnQqIHJpZ2h0IG5vdyBpbiByZXNwb25zZSB0byB0aGUgb2JzZXJ2YXRpb24/IFwiXG4gICAgXCJEZXNjcmliZSB0aGUgdGhvdWdodCBjb25jaXNlbHkuIERvICpub3QqIGRlc2NyaWJlIGFjdGlvbnMgb3Igc3BlZWNoLiBFeGFtcGxlOiAoSW50ZXJuYWwgdGhvdWdodCkgVGhhdCBzZWVtcyBzdXNwaWNpb3VzLlwiXG4gICAgXCJcXG5JbnRlcm5hbCBUaG91Z2h0OlwiXG4pXG4uLi5cblxuU1RBVFVTX1VQREFURV9URU1QTEFURSA9IChcbiAgICBcIllvdSBhcmUge2FnZW50X25hbWV9LlxcblwiXG4gICAgXCJZb3VyIGNvcmUgY2hhcmFjdGVyaXN0aWNzIGFyZToge2FnZW50X3RyYWl0c31cXG5cIlxuICAgIFwiWW91ciBwcmV2aW91cyBzdGF0dXMgd2FzOiB7cHJldmlvdXNfc3RhdHVzfVxcblwiXG4gICAgXCJZb3UganVzdCBwZXJmb3JtZWQgdGhlIGFjdGlvbjoge2FjdGlvbl90YWtlbn1cXG5cIlxuICAgIFwiQmFzZWQgb24gdGhpcyBhY3Rpb24sIHdoYXQgaXMgeW91ciBjb25jaXNlLCB1cGRhdGVkIHN0YXR1cz8gRGVzY3JpYmUgaXQgaW4gdGhlIGZpcnN0IHBlcnNvbiAoZS5nLiwgJ1N0YW5kaW5nIGFsZXJ0LicsICdTaXR0aW5nIGFuZCBvYnNlcnZpbmcuJykuXCJcbiAgICBcIlxcblVwZGF0ZWQgU3RhdHVzOlwiXG4pXG5cbkVOVElUWV9FWFRSQUNUSU9OX1RFTVBMQVRFID0gKFxuICAgIFwiSW4gdGhlIGZvbGxvd2luZyBvYnNlcnZhdGlvbiwgaWRlbnRpZnkgdGhlIG1haW4gZW50aXR5IG9yIHBlcnNvbiBPVEhFUiBUSEFOIHthZ2VudF9uYW1lfSB3aG8gaXMgYmVpbmcgb2JzZXJ2ZWQuIFwiXG4gICAgXCJJZiB0aGVyZSBhcmUgbXVsdGlwbGUgZW50aXRpZXMsIGlkZW50aWZ5IHRoZSBtb3N0IHByb21pbmVudCBvbmUuIFwiXG4gICAgXCJJZiB0aGVyZSBpcyBubyBlbnRpdHkgb3RoZXIgdGhhbiB7YWdlbnRfbmFtZX0sIHJlc3BvbmQgd2l0aCAnbm8gb3RoZXIgZW50aXR5Jy5cXG5cXG5cIlxuICAgIFwiT2JzZXJ2YXRpb246IHtvYnNlcnZhdGlvbn1cXG5cXG5cIlxuICAgIFwiTWFpbiBlbnRpdHkgKG5vdCB7YWdlbnRfbmFtZX0pOlwiXG4pXG5cbkVOVElUWV9BQ1RJT05fVEVNUExBVEUgPSAoXG4gICAgXCJCYXNlZCBvbiB0aGUgZm9sbG93aW5nIG9ic2VydmF0aW9uLCB3aGF0IGlzIHtlbnRpdHl9IGRvaW5nPyBEZXNjcmliZSB0aGVpciBhY3Rpb25zIGNvbmNpc2VseS5cXG5cXG5cIlxuICAgIFwiT2JzZXJ2YXRpb246IHtvYnNlcnZhdGlvbn1cXG5cXG5cIlxuICAgIFwiV2hhdCB7ZW50aXR5fSBpcyBkb2luZzpcIlxuKVxuXG5SRUxBVElPTlNISVBfU1VNTUFSWV9URU1QTEFURSA9IChcbiAgICBcIkJhc2VkIG9uIHlvdXIgbWVtb3JpZXMsIHdoYXQgaXMgeW91ciByZWxhdGlvbnNoaXAgb3Iga25vd2xlZGdlIGFib3V0IHtlbnRpdHlfbmFtZX0/XFxuXCJcbiAgICBcIkNvbnNpZGVyOlxcblwiXG4gICAgXCIxLiBIYXZlIHlvdSBtZXQge2VudGl0eV9uYW1lfSBiZWZvcmU/XFxuXCJcbiAgICBcIjIuIERvIHlvdSBoYXZlIGFueSBoaXN0b3J5IHdpdGgge2VudGl0eV9uYW1lfT9cXG5cIlxuICAgIFwiMy4gRG8geW91IGhhdmUgYW55IGZlZWxpbmdzIG9yIG9waW5pb25zIGFib3V0IHtlbnRpdHlfbmFtZX0/XFxuXCJcbiAgICBcIjQuIElzIHRoZXJlIGFueXRoaW5nIG5vdGFibGUgYWJvdXQge2VudGl0eV9uYW1lfT9cXG5cXG5cIlxuICAgIFwiQ29udGV4dCBmcm9tIHlvdXIgbWVtb3JpZXM6XFxue3JlbGV2YW50X21lbW9yaWVzfVxcblxcblwiXG4gICAgXCJDdXJyZW50IG9ic2VydmF0aW9uOiB7ZW50aXR5X25hbWV9IGlzIHtlbnRpdHlfYWN0aW9ufVxcblxcblwiXG4gICAgXCJSZWxhdGlvbnNoaXAgd2l0aCB7ZW50aXR5X25hbWV9IChiZSBjb25jaXNlLCBpZiBubyByZWxhdGlvbnNoaXAgZXhpc3RzLCBzdGF0ZSB0aGF0IGNsZWFybHkpOlwiXG4pXG5cblBPSUdOQU5DWV9TQ09SSU5HX0ZBTExCQUNLX1RFTVBMQVRFID0gKFxuICAgIFwiUmF0ZSB0aGUgcG9pZ25hbmN5IG9mIHRoaXMgb2JzZXJ2YXRpb24gb24gYSBzY2FsZSBvZiAxIHRvIDEwIChpbnRlZ2VyKToge29ic2VydmF0aW9ufVxcblJhdGluZzpcIlxuKVxuLi4uXG5QYXRoOiByZXF1aXJlbWVudHMudHh0XG4jIGNvcmUgd2ViIGZyYW1ld29ya1xuZmFzdGFwaVthbGxdXG5cbiMgTGFuZ0NoYWluIHByaW1pdGl2ZXNcbmxhbmdjaGFpbn49MC4yICAgICAgICAgICMgY29yZVxubGFuZ2NoYWluLWV4cGVyaW1lbnRhbH49MC4yICAjIGNvbnRhaW5zIGdlbmVyYXRpdmVfYWdlbnRzXG5sYW5nY2hhaW4tY29tbXVuaXR5fj0wLjJcbmxhbmdjaGFpbi1vcGVuYWl+PTAuMSAgIyBob3VzZXMgQ2hhdE9wZW5BSSAmIE9wZW5BSUVtYmVkZGluZ3NcblxuIyBMTE0gKyBlbWJlZGRpbmdzIChwaWNrIHRoZSBwcm92aWRlciB5b3XigJlsbCByZWFsbHkgdXNlKVxub3BlbmFpPj0xLjI1LjBcbnRpa3Rva2VuPj0wLjYuMFxuXG4jIHNpbXBsZSBpbuKAkXByb2Nlc3MgdmVjdG9yIHN0b3JlIGZvciBhZ2VudCBtZW1vcnlcbmZhaXNzLWNwdT49MS44LjBcbi4uLlxuUGF0aDogYWdlbnRfZmFjdG9yeS5weVxuIyBGaWxlOiBhZ2VudF9mYWN0b3J5LnB5XG5pbXBvcnQgdHJhY2ViYWNrXG5mcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWxcblxuaW1wb3J0IGZhaXNzXG5mcm9tIGZhc3RhcGkgaW1wb3J0IEhUVFBFeGNlcHRpb25cbmZyb20gbGFuZ2NoYWluX29wZW5haSBpbXBvcnQgQ2hhdE9wZW5BSSwgT3BlbkFJRW1iZWRkaW5nc1xuZnJvbSBsYW5nY2hhaW5fY29tbXVuaXR5LnZlY3RvcnN0b3JlcyBpbXBvcnQgRkFJU1NcbmZyb20gbGFuZ2NoYWluX2NvbW11bml0eS5kb2NzdG9yZS5pbl9tZW1vcnkgaW1wb3J0IEluTWVtb3J5RG9jc3RvcmVcbmZyb20gbGFuZ2NoYWluLnJldHJpZXZlcnMgaW1wb3J0IFRpbWVXZWlnaHRlZFZlY3RvclN0b3JlUmV0cmlldmVyXG5mcm9tIGxhbmdjaGFpbl9leHBlcmltZW50YWwuZ2VuZXJhdGl2ZV9hZ2VudHMgaW1wb3J0IEdlbmVyYXRpdmVBZ2VudE1lbW9yeVxuZnJvbSBsYW5nY2hhaW5fY29tbXVuaXR5LnZlY3RvcnN0b3Jlcy51dGlscyBpbXBvcnQgRGlzdGFuY2VTdHJhdGVneVxuXG5mcm9tIGN1c3RvbV9hZ2VudCBpbXBvcnQgQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudFxuZnJvbSB1dGlscyBpbXBvcnQgQkNvbG9yc1xuZnJvbSBjb25maWcgaW1wb3J0IERFRkFVTFRfQ0hBVF9NT0RFTCwgREVGQVVMVF9FTUJFRERJTkdfTU9ERUxcblxuXG5kZWYgY3JlYXRlX25ld19hZ2VudF9pbnN0YW5jZShcbiAgICBuYW1lOiBzdHIsXG4gICAgYWdlOiBpbnQsXG4gICAgdHJhaXRzOiBzdHIsXG4gICAgc3RhdHVzOiBzdHIsXG4gICAgc3VtbWFyeV9yZWZyZXNoX3NlY29uZHM6IGludCxcbiAgICByZWZsZWN0aW9uX3RocmVzaG9sZDogaW50LFxuICAgIHZlcmJvc2U6IGJvb2wsXG4gICAgbGxtX21vZGVsX25hbWU6IE9wdGlvbmFsW3N0cl0gPSBOb25lLFxuICAgIGVtYmVkZGluZ19tb2RlbF9uYW1lOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuKSAtPiBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50OlxuICAgIHByaW50KGZcIntCQ29sb3JzLk9LQkxVRX1ERUJVRzogY3JlYXRlX25ld19hZ2VudF9pbnN0YW5jZSBjYWxsZWQgZm9yIGFnZW50ICd7QkNvbG9ycy5CT0xEfXtuYW1lfXtCQ29sb3JzLkVOREN9e0JDb2xvcnMuT0tCTFVFfSd7QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuXG4gICAgZWZmZWN0aXZlX2xsbV9tb2RlbCA9IGxsbV9tb2RlbF9uYW1lIGlmIGxsbV9tb2RlbF9uYW1lIGFuZCBsbG1fbW9kZWxfbmFtZS5zdHJpcCgpIGVsc2UgREVGQVVMVF9DSEFUX01PREVMXG4gICAgdHJ5OlxuICAgICAgICBhZ2VudF9sbG0gPSBDaGF0T3BlbkFJKG1vZGVsX25hbWU9ZWZmZWN0aXZlX2xsbV9tb2RlbCwgdGVtcGVyYXR1cmU9MC43KVxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuRkFJTH1FUlJPUl9TVEFDS1RSQUNFOiBGYWlsZWQgdG8gaW5pdGlhbGl6ZSBMTE0gZm9yIGFnZW50ICd7bmFtZX0nIHdpdGggbW9kZWwgJ3tlZmZlY3RpdmVfbGxtX21vZGVsfSc6IHtlfXtCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgICAgIHRyYWNlYmFjay5wcmludF9leGMoKVxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTUwMCwgZGV0YWlsPWZcIkZhaWxlZCB0byBpbml0aWFsaXplIExMTSB3aXRoIG1vZGVsICd7ZWZmZWN0aXZlX2xsbV9tb2RlbH0nOiB7ZX1cIilcblxuICAgIGVmZmVjdGl2ZV9lbWJlZGRpbmdfbW9kZWwgPSBlbWJlZGRpbmdfbW9kZWxfbmFtZSBpZiBlbWJlZGRpbmdfbW9kZWxfbmFtZSBhbmQgZW1iZWRkaW5nX21vZGVsX25hbWUuc3RyaXAoKSBlbHNlIERFRkFVTFRfRU1CRURESU5HX01PREVMXG4gICAgZGltID0gMFxuICAgIHRyeTpcbiAgICAgICAgYWdlbnRfZW1iZWRkaW5ncyA9IE9wZW5BSUVtYmVkZGluZ3MobW9kZWw9ZWZmZWN0aXZlX2VtYmVkZGluZ19tb2RlbClcbiAgICAgICAgcHJvYmVfZm9yX2RpbSA9IGFnZW50X2VtYmVkZGluZ3MuZW1iZWRfcXVlcnkoXCJnZXRfZGltX3Byb2JlX2Zvcl9hZ2VudFwiKVxuICAgICAgICBkaW0gPSBsZW4ocHJvYmVfZm9yX2RpbSlcbiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLkZBSUx9RVJST1JfU1RBQ0tUUkFDRTogRmFpbGVkIHRvIGluaXRpYWxpemUgb3IgdGVzdCBPcGVuQUlFbWJlZGRpbmdzIGZvciBhZ2VudCAne25hbWV9JyB3aXRoIG1vZGVsICd7ZWZmZWN0aXZlX2VtYmVkZGluZ19tb2RlbH0nOiB7ZX17QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKClcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJGYWlsZWQgdG8gaW5pdGlhbGl6ZS90ZXN0IGVtYmVkZGluZ3Mgd2l0aCBtb2RlbCAne2VmZmVjdGl2ZV9lbWJlZGRpbmdfbW9kZWx9Jzoge2V9XCIpXG5cbiAgICBwcmludChmXCJ7QkNvbG9ycy5ESU19REVCVUc6IFNldHRpbmcgdXAgRkFJU1MgaW5kZXggZm9yIGFnZW50ICd7bmFtZX0nIChkaW06IHtkaW19KS4gVXNpbmcgSW5uZXIgUHJvZHVjdCAoZm9yIENvc2luZSkue0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICB0cnk6XG4gICAgICAgIGluZGV4ID0gZmFpc3MuSW5kZXhGbGF0SVAoZGltKVxuICAgICAgICB2ZWN0b3JzdG9yZSA9IEZBSVNTKFxuICAgICAgICAgICAgZW1iZWRkaW5nX2Z1bmN0aW9uPWFnZW50X2VtYmVkZGluZ3MsXG4gICAgICAgICAgICBpbmRleD1pbmRleCxcbiAgICAgICAgICAgIGRvY3N0b3JlPUluTWVtb3J5RG9jc3RvcmUoe30pLFxuICAgICAgICAgICAgaW5kZXhfdG9fZG9jc3RvcmVfaWQ9e30sXG4gICAgICAgICAgICBub3JtYWxpemVfTDI9VHJ1ZSxcbiAgICAgICAgICAgIGRpc3RhbmNlX3N0cmF0ZWd5PURpc3RhbmNlU3RyYXRlZ3kuTUFYX0lOTkVSX1BST0RVQ1RcbiAgICAgICAgKVxuICAgICAgICByZXRyaWV2ZXIgPSBUaW1lV2VpZ2h0ZWRWZWN0b3JTdG9yZVJldHJpZXZlcihcbiAgICAgICAgICAgIHZlY3RvcnN0b3JlPXZlY3RvcnN0b3JlLCBrPTE1LCBkZWNheV9yYXRlPTAuMDFcbiAgICAgICAgKVxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuRkFJTH1FUlJPUl9TVEFDS1RSQUNFOiBGYWlsZWQgZHVyaW5nIEZBSVNTIHNldHVwIGZvciBhZ2VudCAne25hbWV9Jzoge2V9e0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICAgICAgdHJhY2ViYWNrLnByaW50X2V4YygpXG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZlwiRmFpbGVkIGR1cmluZyBGQUlTUyBzZXR1cDoge2V9XCIpXG5cbiAgICBwcmludChmXCJ7QkNvbG9ycy5ESU19REVCVUc6IFNldHRpbmcgdXAgR2VuZXJhdGl2ZUFnZW50TWVtb3J5IGZvciBhZ2VudCAne25hbWV9Jy4uLntCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgdHJ5OlxuICAgICAgICBhY3R1YWxfcmVmbGVjdF9mb3JfbWVtb3J5ID0gZmxvYXQocmVmbGVjdGlvbl90aHJlc2hvbGQpIGlmIHJlZmxlY3Rpb25fdGhyZXNob2xkID4gMCBlbHNlIE5vbmVcbiAgICAgICAgbWVtb3J5X2luc3RhbmNlID0gR2VuZXJhdGl2ZUFnZW50TWVtb3J5KFxuICAgICAgICAgICAgbGxtPWFnZW50X2xsbSxcbiAgICAgICAgICAgIG1lbW9yeV9yZXRyaWV2ZXI9cmV0cmlldmVyLFxuICAgICAgICAgICAgcmVmbGVjdGlvbl90aHJlc2hvbGQ9YWN0dWFsX3JlZmxlY3RfZm9yX21lbW9yeSxcbiAgICAgICAgICAgIHZlcmJvc2U9dmVyYm9zZSxcbiAgICAgICAgKVxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuRkFJTH1FUlJPUl9TVEFDS1RSQUNFOiBGYWlsZWQgZHVyaW5nIEdlbmVyYXRpdmVBZ2VudE1lbW9yeSBzZXR1cCBmb3IgYWdlbnQgJ3tuYW1lfSc6IHtlfXtCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgICAgIHRyYWNlYmFjay5wcmludF9leGMoKVxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTUwMCwgZGV0YWlsPWZcIkZhaWxlZCBkdXJpbmcgR2VuZXJhdGl2ZUFnZW50TWVtb3J5IHNldHVwOiB7ZX1cIilcblxuICAgIHByaW50KGZcIntCQ29sb3JzLkRJTX1ERUJVRzogSW5pdGlhbGl6aW5nIEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnQgJ3tuYW1lfScuLi57QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgIHRyeTpcbiAgICAgICAgYWdlbnQgPSBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50KFxuICAgICAgICAgICAgbmFtZT1uYW1lLFxuICAgICAgICAgICAgYWdlPWFnZSxcbiAgICAgICAgICAgIHRyYWl0cz10cmFpdHMsXG4gICAgICAgICAgICBzdGF0dXM9c3RhdHVzLFxuICAgICAgICAgICAgbWVtb3J5PW1lbW9yeV9pbnN0YW5jZSxcbiAgICAgICAgICAgIGxsbT1hZ2VudF9sbG0sXG4gICAgICAgICAgICBzdW1tYXJ5X3JlZnJlc2hfc2Vjb25kcz1zdW1tYXJ5X3JlZnJlc2hfc2Vjb25kcyxcbiAgICAgICAgICAgIHZlcmJvc2U9dmVyYm9zZSxcbiAgICAgICAgKVxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5PS0dSRUVOfURFQlVHOiBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50ICd7bmFtZX0nIGluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseS57QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgICAgICByZXR1cm4gYWdlbnRcbiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLkZBSUx9RVJST1JfU1RBQ0tUUkFDRTogRmFpbGVkIGR1cmluZyBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50IGluaXRpYWxpemF0aW9uIGZvciBhZ2VudCAne25hbWV9Jzoge2V9e0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICAgICAgdHJhY2ViYWNrLnByaW50X2V4YygpXG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZlwiRmFpbGVkIGR1cmluZyBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50IGluaXRpYWxpemF0aW9uOiB7ZX1cIilcbi4uLlxuUGF0aDogc2NoZW1hcy5weVxuIyBGaWxlOiBzY2hlbWFzLnB5XG5mcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwsIExpc3QsIERpY3QsIEFueVxuZnJvbSBweWRhbnRpYyBpbXBvcnQgQmFzZU1vZGVsLCBGaWVsZFxuXG5jbGFzcyBDcmVhdGVBZ2VudFJlcShCYXNlTW9kZWwpOlxuICAgIG5hbWU6IHN0clxuICAgIGFnZTogaW50XG4gICAgdHJhaXRzOiBzdHJcbiAgICBzdGF0dXM6IHN0clxuICAgIGFnZW50X2lkOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuICAgIHN1bW1hcnlfcmVmcmVzaF9zZWNvbmRzOiBpbnQgPSBGaWVsZChkZWZhdWx0PTM2MDAsIGdlPTApXG4gICAgcmVmbGVjdGlvbl90aHJlc2hvbGQ6IGludCA9IEZpZWxkKGRlZmF1bHQ9MCwgZ2U9MClcbiAgICB2ZXJib3NlOiBib29sID0gRmFsc2VcbiAgICBtb2RlbF9uYW1lOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuICAgIGVtYmVkZGluZ19tb2RlbF9uYW1lOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuXG5jbGFzcyBHZW5lcmF0ZVJlc3BvbnNlUmVxKEJhc2VNb2RlbCk6XG4gICAgcHJvbXB0OiBzdHJcbiAgICBrOiBPcHRpb25hbFtpbnRdID0gRmllbGQoZGVmYXVsdD1Ob25lLCBndD0wKVxuXG5jbGFzcyBHZW5lcmF0ZVJlYWN0aW9uUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBhZ2VudF9uYW1lOiBzdHJcbiAgICByZWFjdGlvbl90eXBlOiBzdHIgIyBTQVksIFRISU5LLCBETywgSUdOT1JFLCBVTktOT1dOXG4gICAgY29udGVudDogc3RyXG4gICAgb2JzZXJ2YXRpb25fd2FzX2ltcG9ydGFudDogYm9vbFxuXG5jbGFzcyBBZGRNZW1vcnlSZXEoQmFzZU1vZGVsKTpcbiAgICB0ZXh0X3RvX21lbW9yaXplOiBzdHJcblxuY2xhc3MgRmV0Y2hNZW1vcmllc1JlcShCYXNlTW9kZWwpOlxuICAgIG9ic2VydmF0aW9uOiBzdHJcbiAgICBrOiBPcHRpb25hbFtpbnRdID0gRmllbGQoZGVmYXVsdD1Ob25lLCBndD0wKVxuXG5jbGFzcyBVcGRhdGVTdGF0dXNSZXEoQmFzZU1vZGVsKTpcbiAgICBuZXdfc3RhdHVzOiBzdHJcblxuY2xhc3MgQWdlbnREZXRhaWwoQmFzZU1vZGVsKTpcbiAgICBhZ2VudF9pZDogc3RyXG4gICAgbmFtZTogc3RyXG4gICAgc3RhdHVzOiBzdHJcbiAgICBsbG1fbW9kZWw6IHN0clxuICAgIGVtYmVkZGluZ19tb2RlbDogc3RyXG5cbmNsYXNzIEFnZW50TGlzdFJlc3BvbnNlKEJhc2VNb2RlbCk6XG4gICAgYWdlbnRzOiBMaXN0W0FnZW50RGV0YWlsXVxuXG5jbGFzcyBBZ2VudENyZWF0aW9uUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBhZ2VudF9pZDogc3RyXG4gICAgbmFtZTogc3RyXG4gICAgbGxtX21vZGVsX3VzZWQ6IHN0clxuICAgIGVtYmVkZGluZ19tb2RlbF91c2VkOiBzdHJcblxuY2xhc3MgU2ltcGxlU3RhdHVzUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBzdGF0dXM6IHN0clxuICAgIG1lc3NhZ2U6IE9wdGlvbmFsW3N0cl0gPSBOb25lXG5cbmNsYXNzIEFkZGVkTWVtb3J5UmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBzdGF0dXM6IHN0clxuICAgIGFkZGVkX21lbW9yeTogc3RyXG5cbmNsYXNzIEZldGNoZWRNZW1vcmllc0RvY3VtZW50KEJhc2VNb2RlbCk6XG4gICAgY29udGVudDogc3RyXG4gICAgbWV0YWRhdGE6IERpY3Rbc3RyLCBBbnldXG4gICAgcmVsZXZhbmNlX3Njb3JlOiBmbG9hdFxuXG5jbGFzcyBGZXRjaGVkTWVtb3JpZXNSZXNwb25zZShCYXNlTW9kZWwpOlxuICAgIG1lbW9yaWVzOiBMaXN0W0ZldGNoZWRNZW1vcmllc0RvY3VtZW50XVxuLi4uXG5QYXRoOiBjb25maWcucHlcbiMgRmlsZTogY29uZmlnLnB5XG5pbXBvcnQgb3NcblxuREVGQVVMVF9DSEFUX01PREVMID0gXCJncHQtNG8tbWluaVwiXG5ERUZBVUxUX0VNQkVERElOR19NT0RFTCA9IFwidGV4dC1lbWJlZGRpbmctMy1zbWFsbFwiXG5cbk9QRU5BSV9BUElfS0VZX1NFVCA9IGJvb2wob3MuZ2V0ZW52KFwiT1BFTkFJX0FQSV9LRVlcIikpXG4uLi5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjIyZDFiMDMyLTQ5ODAtNGE0NS1iZmZkLWRiODAyYTIwNTEzMjt0b29sdV92cnR4XzAxQlBpUGJyVnpkSzVnd0xBMjFmc3AxWCI6eyJyZXF1ZXN0SWQiOiIyMmQxYjAzMi00OTgwLTRhNDUtYmZmZC1kYjgwMmEyMDUxMzIiLCJ0b29sVXNlSWQiOiJ0b29sdV92cnR4XzAxQlBpUGJyVnpkSzVnd0xBMjFmc3AxWCIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6Ii0gW0EgRGVlcCBEaXZlIEludG8gTGFuZ0NoYWluJ3MgR2VuZXJhdGl2ZSBBZ2VudHMgfCBibG9nX3Bvc3RzIC4uLl0oaHR0cHM6Ly93YW5kYi5haS92aW5jZW50dHUvYmxvZ19wb3N0cy9yZXBvcnRzL0EtRGVlcC1EaXZlLUludG8tTGFuZ0NoYWluLXMtR2VuZXJhdGl2ZS1BZ2VudHMtLVZtbGxkem8xTXpNd05qSTMpXG4gIFNlcCA3LCAyMDIzIC4uLiAuLi4gTGFuZ0NoYWluJ3MgaW1wbGVtZW50YXRpb24gb2YgZ2VuZXJhdGl2ZSBhZ2VudHMgLi4uIGFkZF9tZW1vcnk6IEdpdmVuIGEgc3RyaW5nIG1lbW9yeV9jb250ZW50IGFuZCBhIGRhdGV0aW1lIG5vdywgZmlyc3QsIHNjb3JlIHRoZSBtZW1vcnknc8KgLi4uXG5cbi0gW2xhbmdjaGFpbl9leHBlcmltZW50YWwgMC4wLjY1IOKAlCBMYW5nQ2hhaW4gMC4yLjE3XShodHRwczovL2FwaS5weXRob24ubGFuZ2NoYWluLmNvbS9lbi9sYXRlc3QvZXhwZXJpbWVudGFsX2FwaV9yZWZlcmVuY2UuaHRtbClcbiAgQWdlbnQgYXMgYSBjaGFyYWN0ZXIgd2l0aCBtZW1vcnkgYW5kIGlubmF0ZSBjaGFyYWN0ZXJpc3RpY3MuIGdlbmVyYXRpdmVfYWdlbnRzLm1lbW9yeS5HZW5lcmF0aXZlQWdlbnRNZW1vcnkuIE1lbW9yeSBmb3IgdGhlIGdlbmVyYXRpdmUgYWdlbnQuXG5cbi0gW2xhbmdjaGFpbi1leHBlcmltZW50YWw6IDAuMy41cmMxIOKAlCBMYW5nQ2hhaW4gZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9weXRob24ubGFuZ2NoYWluLmNvbS9hcGlfcmVmZXJlbmNlL2V4cGVyaW1lbnRhbC9pbmRleC5odG1sKVxuICBDYXVzYWwgcHJvZ3JhbS1haWRlZCBsYW5ndWFnZSAoQ1BBTCkgY2hhaW4gaW1wbGVtZW50YXRpb24uIC4uLiBBZ2VudCBhcyBhIGNoYXJhY3RlciB3aXRoIG1lbW9yeSBhbmQgaW5uYXRlIGNoYXJhY3RlcmlzdGljcy4gZ2VuZXJhdGl2ZV9hZ2VudHMubWVtb3J5LlxuXG4tIFtJbXBsZW1lbnRpbmcgR2VuZXJhdGl2ZSBBZ2VudCBXaXRoIExvY2FsIExMTSwgR3VpZGFuY2UsIGFuZCAuLi5dKGh0dHBzOi8vbWVkaXVtLmNvbS9iZXR0ZXItcHJvZ3JhbW1pbmcvaW1wbGVtZW50LWdlbmVyYXRpdmUtYWdlbnQtd2l0aC1sb2NhbC1sbG0tZ3VpZGFuY2UtYW5kLWxhbmdjaGFpbi1mdWxsLWZlYXR1cmVzLWZhNTc2NTVmM2RlMSlcbiAgSnVuIDIsIDIwMjMgLi4uIFNvLCB0aGVyZSBhcmUgdHdvIG1haW4gcGFydHMgb2YgZ2VuZXJhdGl2ZSBhZ2VudHM6IG1lbW9yeSBhbmQgbG9naWNhbCBjb21wb25lbnRzIChQbGFubmluZywgUmVmbGVjdGlvbiwgUmVhY3RpbmcsIGV0Yy4pLiBNZW1vcnkgaXMgdGhlIG9uZcKgLi4uXG5cbi0gW0F1dG9ub21vdXMgQWdlbnRzICYgQWdlbnQgU2ltdWxhdGlvbnNdKGh0dHBzOi8vYmxvZy5sYW5nY2hhaW4uZGV2L2FnZW50cy1yb3VuZC8pXG4gIEFwciAxOCwgMjAyMyAuLi4gU3BlY2lmaWNhbGx5LCBwcm9qZWN0cyBsaWtlIEF1dG9HUFQsIEJhYnlBR0ksIENBTUVMLCBhbmQgR2VuZXJhdGl2ZSBBZ2VudHMgaGF2ZSBwb3BwZWQgdXAuIC4uLiBMYW5nQ2hhaW4gTWVtb3J5IEltcGxlbWVudGF0aW9uLiBXaGF0IGlzIG5vdmVswqAuLi4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJmYTYyNmYxMi1hZmFjLTRlMTQtYmQ0Zi0yYTMzZDk3OGRlMmQ7dG9vbHVfdnJ0eF8wMUJ0bXZGNnBUTmNja2FUZ3pDdXptN2QiOnsicmVxdWVzdElkIjoiZmE2MjZmMTItYWZhYy00ZTE0LWJkNGYtMmEzM2Q5NzhkZTJkIiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMUJ0bXZGNnBUTmNja2FUZ3pDdXptN2QiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiIgICAgICAgICAgICAgICAgICAgRmlsZSBub3QgZm91bmQgwrcgR2l0SHViICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXG5bU2tpcCB0byBjb250ZW50XSgjc3RhcnQtb2YtY29udGVudCkgICBcblxuTmF2aWdhdGlvbiBNZW51XG4tLS0tLS0tLS0tLS0tLS1cblxuVG9nZ2xlIG5hdmlnYXRpb25cblxuW10oLylcblxuW1NpZ24gaW5dKC9sb2dpbj9yZXR1cm5fdG89aHR0cHMlM0ElMkYlMkZnaXRodWIuY29tJTJGbGFuZ2NoYWluLWFpJTJGbGFuZ2NoYWluJTJGYmxvYiUyRm1hc3RlciUyRmxpYnMlMkZleHBlcmltZW50YWwlMkZsYW5nY2hhaW5fZXhwZXJpbWVudGFsJTJGZ2VuZXJhdGl2ZV9hZ2VudHMlMkZtZW1vcnkucHkpXG5cbiogICBQcm9kdWN0XG4gICAgXG4gICAgKiAgIFtcbiAgICAgICAgXG4gICAgICAgIEdpdEh1YiBDb3BpbG90XG4gICAgICAgIFxuICAgICAgICBXcml0ZSBiZXR0ZXIgY29kZSB3aXRoIEFJXG4gICAgICAgIFxuICAgICAgICBdKGh0dHBzOi8vZ2l0aHViLmNvbS9mZWF0dXJlcy9jb3BpbG90KVxuICAgICogICBbXG4gICAgICAgIFxuICAgICAgICBHaXRIdWIgQWR2YW5jZWQgU2VjdXJpdHlcbiAgICAgICAgXG4gICAgICAgIEZpbmQgYW5kIGZpeCB2dWxuZXJhYmlsaXRpZXNcbiAgICAgICAgXG4gICAgICAgIF0oaHR0cHM6Ly9naXRodWIuY29tL3NlY3VyaXR5L2FkdmFuY2VkLXNlY3VyaXR5KVxuICAgICogICBbXG4gICAgICAgIFxuICAgICAgICBBY3Rpb25zXG4gICAgICAgIFxuICAgICAgICBBdXRvbWF0ZSBhbnkgd29ya2Zsb3dcbiAgICAgICAgXG4gICAgICAgIF0oaHR0cHM6Ly9naXRodWIuY29tL2ZlYXR1cmVzL2FjdGlvbnMpXG4gICAgKiAgIFtcbiAgICAgICAgXG4gICAgICAgIENvZGVzcGFjZXNcbiAgICAgICAgXG4gICAgICAgIEluc3RhbnQgZGV2IGVudmlyb25tZW50c1xuICAgICAgICBcbiAgICAgICAgXShodHRwczovL2dpdGh1Yi5jb20vZmVhdHVyZXMvY29kZXNwYWNlcylcbiAgICAqICAgW1xuICAgICAgICBcbiAgICAgICAgSXNzdWVzXG4gICAgICAgIFxuICAgICAgICBQbGFuIGFuZCB0cmFjayB3b3JrXG4gICAgICAgIFxuICAgICAgICBdKGh0dHBzOi8vZ2l0aHViLmNvbS9mZWF0dXJlcy9pc3N1ZXMpXG4gICAgKiAgIFtcbiAgICAgICAgXG4gICAgICAgIENvZGUgUmV2aWV3XG4gICAgICAgIFxuICAgICAgICBNYW5hZ2UgY29kZSBjaGFuZ2VzXG4gICAgICAgIFxuICAgICAgICBdKGh0dHBzOi8vZ2l0aHViLmNvbS9mZWF0dXJlcy9jb2RlLXJldmlldylcbiAgICAqICAgW1xuICAgICAgICBcbiAgICAgICAgRGlzY3Vzc2lvbnNcbiAgICAgICAgXG4gICAgICAgIENvbGxhYm9yYXRlIG91dHNpZGUgb2YgY29kZVxuICAgICAgICBcbiAgICAgICAgXShodHRwczovL2dpdGh1Yi5jb20vZmVhdHVyZXMvZGlzY3Vzc2lvbnMpXG4gICAgKiAgIFtcbiAgICAgICAgXG4gICAgICAgIENvZGUgU2VhcmNoXG4gICAgICAgIFxuICAgICAgICBGaW5kIG1vcmUsIHNlYXJjaCBsZXNzXG4gICAgICAgIFxuICAgICAgICBdKGh0dHBzOi8vZ2l0aHViLmNvbS9mZWF0dXJlcy9jb2RlLXNlYXJjaClcbiAgICBcbiAgICBFeHBsb3JlXG4gICAgXG4gICAgKiAgIFtXaHkgR2l0SHViXShodHRwczovL2dpdGh1Yi5jb20vd2h5LWdpdGh1YilcbiAgICAqICAgW0FsbCBmZWF0dXJlc10oaHR0cHM6Ly9naXRodWIuY29tL2ZlYXR1cmVzKVxuICAgICogICBbRG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20pXG4gICAgKiAgIFtHaXRIdWIgU2tpbGxzXShodHRwczovL3NraWxscy5naXRodWIuY29tKVxuICAgICogICBbQmxvZ10oaHR0cHM6Ly9naXRodWIuYmxvZylcbiAgICBcbiogICBTb2x1dGlvbnNcbiAgICBcbiAgICBCeSBjb21wYW55IHNpemVcbiAgICBcbiAgICAqICAgW0VudGVycHJpc2VzXShodHRwczovL2dpdGh1Yi5jb20vZW50ZXJwcmlzZSlcbiAgICAqICAgW1NtYWxsIGFuZCBtZWRpdW0gdGVhbXNdKGh0dHBzOi8vZ2l0aHViLmNvbS90ZWFtKVxuICAgICogICBbU3RhcnR1cHNdKGh0dHBzOi8vZ2l0aHViLmNvbS9lbnRlcnByaXNlL3N0YXJ0dXBzKVxuICAgICogICBbTm9ucHJvZml0c10oL3NvbHV0aW9ucy9pbmR1c3RyeS9ub25wcm9maXRzKVxuICAgIFxuICAgIEJ5IHVzZSBjYXNlXG4gICAgXG4gICAgKiAgIFtEZXZTZWNPcHNdKC9zb2x1dGlvbnMvdXNlLWNhc2UvZGV2c2Vjb3BzKVxuICAgICogICBbRGV2T3BzXSgvc29sdXRpb25zL3VzZS1jYXNlL2Rldm9wcylcbiAgICAqICAgW0NJL0NEXSgvc29sdXRpb25zL3VzZS1jYXNlL2NpLWNkKVxuICAgICogICBbVmlldyBhbGwgdXNlIGNhc2VzXSgvc29sdXRpb25zL3VzZS1jYXNlKVxuICAgIFxuICAgIEJ5IGluZHVzdHJ5XG4gICAgXG4gICAgKiAgIFtIZWFsdGhjYXJlXSgvc29sdXRpb25zL2luZHVzdHJ5L2hlYWx0aGNhcmUpXG4gICAgKiAgIFtGaW5hbmNpYWwgc2VydmljZXNdKC9zb2x1dGlvbnMvaW5kdXN0cnkvZmluYW5jaWFsLXNlcnZpY2VzKVxuICAgICogICBbTWFudWZhY3R1cmluZ10oL3NvbHV0aW9ucy9pbmR1c3RyeS9tYW51ZmFjdHVyaW5nKVxuICAgICogICBbR292ZXJubWVudF0oL3NvbHV0aW9ucy9pbmR1c3RyeS9nb3Zlcm5tZW50KVxuICAgICogICBbVmlldyBhbGwgaW5kdXN0cmllc10oL3NvbHV0aW9ucy9pbmR1c3RyeSlcbiAgICBcbiAgICBbVmlldyBhbGwgc29sdXRpb25zXSgvc29sdXRpb25zKVxuICAgIFxuKiAgIFJlc291cmNlc1xuICAgIFxuICAgIFRvcGljc1xuICAgIFxuICAgICogICBbQUldKC9yZXNvdXJjZXMvYXJ0aWNsZXMvYWkpXG4gICAgKiAgIFtEZXZPcHNdKC9yZXNvdXJjZXMvYXJ0aWNsZXMvZGV2b3BzKVxuICAgICogICBbU2VjdXJpdHldKC9yZXNvdXJjZXMvYXJ0aWNsZXMvc2VjdXJpdHkpXG4gICAgKiAgIFtTb2Z0d2FyZSBEZXZlbG9wbWVudF0oL3Jlc291cmNlcy9hcnRpY2xlcy9zb2Z0d2FyZS1kZXZlbG9wbWVudClcbiAgICAqICAgW1ZpZXcgYWxsXSgvcmVzb3VyY2VzL2FydGljbGVzKVxuICAgIFxuICAgIEV4cGxvcmVcbiAgICBcbiAgICAqICAgW0xlYXJuaW5nIFBhdGh3YXlzXShodHRwczovL3Jlc291cmNlcy5naXRodWIuY29tL2xlYXJuL3BhdGh3YXlzKVxuICAgICogICBbRXZlbnRzICYgV2ViaW5hcnNdKGh0dHBzOi8vcmVzb3VyY2VzLmdpdGh1Yi5jb20pXG4gICAgKiAgIFtFYm9va3MgJiBXaGl0ZXBhcGVyc10oaHR0cHM6Ly9naXRodWIuY29tL3Jlc291cmNlcy93aGl0ZXBhcGVycylcbiAgICAqICAgW0N1c3RvbWVyIFN0b3JpZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9jdXN0b21lci1zdG9yaWVzKVxuICAgICogICBbUGFydG5lcnNdKGh0dHBzOi8vcGFydG5lci5naXRodWIuY29tKVxuICAgICogICBbRXhlY3V0aXZlIEluc2lnaHRzXShodHRwczovL2dpdGh1Yi5jb20vc29sdXRpb25zL2V4ZWN1dGl2ZS1pbnNpZ2h0cylcbiAgICBcbiogICBPcGVuIFNvdXJjZVxuICAgIFxuICAgICogICBbXG4gICAgICAgIFxuICAgICAgICBHaXRIdWIgU3BvbnNvcnNcbiAgICAgICAgXG4gICAgICAgIEZ1bmQgb3BlbiBzb3VyY2UgZGV2ZWxvcGVyc1xuICAgICAgICBcbiAgICAgICAgXSgvc3BvbnNvcnMpXG4gICAgXG4gICAgKiAgIFtcbiAgICAgICAgXG4gICAgICAgIFRoZSBSZWFkTUUgUHJvamVjdFxuICAgICAgICBcbiAgICAgICAgR2l0SHViIGNvbW11bml0eSBhcnRpY2xlc1xuICAgICAgICBcbiAgICAgICAgXShodHRwczovL2dpdGh1Yi5jb20vcmVhZG1lKVxuICAgIFxuICAgIFJlcG9zaXRvcmllc1xuICAgIFxuICAgICogICBbVG9waWNzXShodHRwczovL2dpdGh1Yi5jb20vdG9waWNzKVxuICAgICogICBbVHJlbmRpbmddKGh0dHBzOi8vZ2l0aHViLmNvbS90cmVuZGluZylcbiAgICAqICAgW0NvbGxlY3Rpb25zXShodHRwczovL2dpdGh1Yi5jb20vY29sbGVjdGlvbnMpXG4gICAgXG4qICAgRW50ZXJwcmlzZVxuICAgIFxuICAgICogICBbXG4gICAgICAgIFxuICAgICAgICBFbnRlcnByaXNlIHBsYXRmb3JtXG4gICAgICAgIFxuICAgICAgICBBSS1wb3dlcmVkIGRldmVsb3BlciBwbGF0Zm9ybVxuICAgICAgICBcbiAgICAgICAgXSgvZW50ZXJwcmlzZSlcbiAgICBcbiAgICBBdmFpbGFibGUgYWRkLW9uc1xuICAgIFxuICAgICogICBbXG4gICAgICAgIFxuICAgICAgICBHaXRIdWIgQWR2YW5jZWQgU2VjdXJpdHlcbiAgICAgICAgXG4gICAgICAgIEVudGVycHJpc2UtZ3JhZGUgc2VjdXJpdHkgZmVhdHVyZXNcbiAgICAgICAgXG4gICAgICAgIF0oaHR0cHM6Ly9naXRodWIuY29tL3NlY3VyaXR5L2FkdmFuY2VkLXNlY3VyaXR5KVxuICAgICogICBbXG4gICAgICAgIFxuICAgICAgICBDb3BpbG90IGZvciBidXNpbmVzc1xuICAgICAgICBcbiAgICAgICAgRW50ZXJwcmlzZS1ncmFkZSBBSSBmZWF0dXJlc1xuICAgICAgICBcbiAgICAgICAgXSgvZmVhdHVyZXMvY29waWxvdC9jb3BpbG90LWJ1c2luZXNzKVxuICAgICogICBbXG4gICAgICAgIFxuICAgICAgICBQcmVtaXVtIFN1cHBvcnRcbiAgICAgICAgXG4gICAgICAgIEVudGVycHJpc2UtZ3JhZGUgMjQvNyBzdXBwb3J0XG4gICAgICAgIFxuICAgICAgICBdKC9wcmVtaXVtLXN1cHBvcnQpXG4gICAgXG4qICAgW1ByaWNpbmddKGh0dHBzOi8vZ2l0aHViLmNvbS9wcmljaW5nKVxuXG5TZWFyY2ggb3IganVtcCB0by4uLlxuXG5TZWFyY2ggY29kZSwgcmVwb3NpdG9yaWVzLCB1c2VycywgaXNzdWVzLCBwdWxsIHJlcXVlc3RzLi4uXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblNlYXJjaFxuXG5DbGVhclxuXG5bU2VhcmNoIHN5bnRheCB0aXBzXShodHRwczovL2RvY3MuZ2l0aHViLmNvbS9zZWFyY2gtZ2l0aHViL2dpdGh1Yi1jb2RlLXNlYXJjaC91bmRlcnN0YW5kaW5nLWdpdGh1Yi1jb2RlLXNlYXJjaC1zeW50YXgpXG5cblByb3ZpZGUgZmVlZGJhY2tcbj09PT09PT09PT09PT09PT1cblxuV2UgcmVhZCBldmVyeSBwaWVjZSBvZiBmZWVkYmFjaywgYW5kIHRha2UgeW91ciBpbnB1dCB2ZXJ5IHNlcmlvdXNseS5cblxuIEluY2x1ZGUgbXkgZW1haWwgYWRkcmVzcyBzbyBJIGNhbiBiZSBjb250YWN0ZWRcblxuQ2FuY2VsIFN1Ym1pdCBmZWVkYmFja1xuXG5TYXZlZCBzZWFyY2hlc1xuPT09PT09PT09PT09PT1cblxuVXNlIHNhdmVkIHNlYXJjaGVzIHRvIGZpbHRlciB5b3VyIHJlc3VsdHMgbW9yZSBxdWlja2x5XG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuTmFtZSAgXG5cblF1ZXJ5IFxuXG5UbyBzZWUgYWxsIGF2YWlsYWJsZSBxdWFsaWZpZXJzLCBzZWUgb3VyIFtkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3MuZ2l0aHViLmNvbS9zZWFyY2gtZ2l0aHViL2dpdGh1Yi1jb2RlLXNlYXJjaC91bmRlcnN0YW5kaW5nLWdpdGh1Yi1jb2RlLXNlYXJjaC1zeW50YXgpLlxuXG5DYW5jZWwgQ3JlYXRlIHNhdmVkIHNlYXJjaFxuXG5bU2lnbiBpbl0oL2xvZ2luP3JldHVybl90bz1odHRwcyUzQSUyRiUyRmdpdGh1Yi5jb20lMkZsYW5nY2hhaW4tYWklMkZsYW5nY2hhaW4lMkZibG9iJTJGbWFzdGVyJTJGbGlicyUyRmV4cGVyaW1lbnRhbCUyRmxhbmdjaGFpbl9leHBlcmltZW50YWwlMkZnZW5lcmF0aXZlX2FnZW50cyUyRm1lbW9yeS5weSlcblxuIyMjIyBTaWduIGluIHRvIEdpdEh1YlxuXG4gIFVzZXJuYW1lIG9yIGVtYWlsIGFkZHJlc3MgXG5cblBhc3N3b3JkICBbRm9yZ290IHBhc3N3b3JkP10oL3Bhc3N3b3JkX3Jlc2V0KSAgICAgICAgICAgIFxuXG5bb3Igc2lnbiBpbiB3aXRoIGEgcGFzc2tleV0oL2xvZ2luP3Bhc3NrZXk9dHJ1ZSZyZXR1cm5fdG89aHR0cHMlM0ElMkYlMkZnaXRodWIuY29tJTJGbGFuZ2NoYWluLWFpJTJGbGFuZ2NoYWluJTJGYmxvYiUyRm1hc3RlciUyRmxpYnMlMkZleHBlcmltZW50YWwlMkZsYW5nY2hhaW5fZXhwZXJpbWVudGFsJTJGZ2VuZXJhdGl2ZV9hZ2VudHMlMkZtZW1vcnkucHkpXG5cbltTaWduIHVwXSgvc2lnbnVwP3JlZl9jdGE9U2lnbit1cCZyZWZfbG9jPWhlYWRlcitsb2dnZWQrb3V0JnJlZl9wYWdlPSUyRiUzQ3VzZXItbmFtZSUzRSUyRiUzQ3JlcG8tbmFtZSUzRSUyRmJsb2IlMkZzaG93JnNvdXJjZT1oZWFkZXItcmVwbyZzb3VyY2VfcmVwbz1sYW5nY2hhaW4tYWklMkZsYW5nY2hhaW4pIFJlc2V0aW5nIGZvY3VzXG5cbllvdSBzaWduZWQgaW4gd2l0aCBhbm90aGVyIHRhYiBvciB3aW5kb3cuIFJlbG9hZCB0byByZWZyZXNoIHlvdXIgc2Vzc2lvbi4gWW91IHNpZ25lZCBvdXQgaW4gYW5vdGhlciB0YWIgb3Igd2luZG93LiBSZWxvYWQgdG8gcmVmcmVzaCB5b3VyIHNlc3Npb24uIFlvdSBzd2l0Y2hlZCBhY2NvdW50cyBvbiBhbm90aGVyIHRhYiBvciB3aW5kb3cuIFJlbG9hZCB0byByZWZyZXNoIHlvdXIgc2Vzc2lvbi4gRGlzbWlzcyBhbGVydFxuXG5bbGFuZ2NoYWluLWFpXSgvbGFuZ2NoYWluLWFpKSAvICoqW2xhbmdjaGFpbl0oL2xhbmdjaGFpbi1haS9sYW5nY2hhaW4pKiogUHVibGljXG5cbiogICBbTm90aWZpY2F0aW9uc10oL2xvZ2luP3JldHVybl90bz0lMkZsYW5nY2hhaW4tYWklMkZsYW5nY2hhaW4pIFlvdSBtdXN0IGJlIHNpZ25lZCBpbiB0byBjaGFuZ2Ugbm90aWZpY2F0aW9uIHNldHRpbmdzXG4qICAgW0ZvcmsgMTcuNGtdKC9sb2dpbj9yZXR1cm5fdG89JTJGbGFuZ2NoYWluLWFpJTJGbGFuZ2NoYWluKVxuKiAgIFtTdGFyIDEwN2tdKC9sb2dpbj9yZXR1cm5fdG89JTJGbGFuZ2NoYWluLWFpJTJGbGFuZ2NoYWluKVxuICAgIFxuXG4qICAgW0NvZGVdKC9sYW5nY2hhaW4tYWkvbGFuZ2NoYWluKVxuKiAgIFtJc3N1ZXMgMjg2XSgvbGFuZ2NoYWluLWFpL2xhbmdjaGFpbi9pc3N1ZXMpXG4qICAgW1B1bGwgcmVxdWVzdHMgNTFdKC9sYW5nY2hhaW4tYWkvbGFuZ2NoYWluL3B1bGxzKVxuKiAgIFtEaXNjdXNzaW9uc10oL2xhbmdjaGFpbi1haS9sYW5nY2hhaW4vZGlzY3Vzc2lvbnMpXG4qICAgW0FjdGlvbnNdKC9sYW5nY2hhaW4tYWkvbGFuZ2NoYWluL2FjdGlvbnMpXG4qICAgW1Byb2plY3RzIDJdKC9sYW5nY2hhaW4tYWkvbGFuZ2NoYWluL3Byb2plY3RzKVxuKiAgIFtTZWN1cml0eV0oL2xhbmdjaGFpbi1haS9sYW5nY2hhaW4vc2VjdXJpdHkpXG4qICAgW0luc2lnaHRzXSgvbGFuZ2NoYWluLWFpL2xhbmdjaGFpbi9wdWxzZSlcblxuQWRkaXRpb25hbCBuYXZpZ2F0aW9uIG9wdGlvbnNcblxuKiAgIFtDb2RlXSgvbGFuZ2NoYWluLWFpL2xhbmdjaGFpbilcbiogICBbSXNzdWVzXSgvbGFuZ2NoYWluLWFpL2xhbmdjaGFpbi9pc3N1ZXMpXG4qICAgW1B1bGwgcmVxdWVzdHNdKC9sYW5nY2hhaW4tYWkvbGFuZ2NoYWluL3B1bGxzKVxuKiAgIFtEaXNjdXNzaW9uc10oL2xhbmdjaGFpbi1haS9sYW5nY2hhaW4vZGlzY3Vzc2lvbnMpXG4qICAgW0FjdGlvbnNdKC9sYW5nY2hhaW4tYWkvbGFuZ2NoYWluL2FjdGlvbnMpXG4qICAgW1Byb2plY3RzXSgvbGFuZ2NoYWluLWFpL2xhbmdjaGFpbi9wcm9qZWN0cylcbiogICBbU2VjdXJpdHldKC9sYW5nY2hhaW4tYWkvbGFuZ2NoYWluL3NlY3VyaXR5KVxuKiAgIFtJbnNpZ2h0c10oL2xhbmdjaGFpbi1haS9sYW5nY2hhaW4vcHVsc2UpXG5cbkZvb3RlclxuLS0tLS0tXG5cbltdKGh0dHBzOi8vZ2l0aHViLmNvbSBcIkdpdEh1YlwiKcKpIDIwMjUgR2l0SHViLMKgSW5jLlxuXG4jIyMgRm9vdGVyIG5hdmlnYXRpb25cblxuKiAgIFtUZXJtc10oaHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vc2l0ZS1wb2xpY3kvZ2l0aHViLXRlcm1zL2dpdGh1Yi10ZXJtcy1vZi1zZXJ2aWNlKVxuKiAgIFtQcml2YWN5XShodHRwczovL2RvY3MuZ2l0aHViLmNvbS9zaXRlLXBvbGljeS9wcml2YWN5LXBvbGljaWVzL2dpdGh1Yi1wcml2YWN5LXN0YXRlbWVudClcbiogICBbU2VjdXJpdHldKGh0dHBzOi8vZ2l0aHViLmNvbS9zZWN1cml0eSlcbiogICBbU3RhdHVzXShodHRwczovL3d3dy5naXRodWJzdGF0dXMuY29tLylcbiogICBbRG9jc10oaHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vKVxuKiAgIFtDb250YWN0XShodHRwczovL3N1cHBvcnQuZ2l0aHViLmNvbT90YWdzPWRvdGNvbS1mb290ZXIpXG4qICAgTWFuYWdlIGNvb2tpZXNcbiogICBEbyBub3Qgc2hhcmUgbXkgcGVyc29uYWwgaW5mb3JtYXRpb25cblxuWW91IGNhbuKAmXQgcGVyZm9ybSB0aGF0IGFjdGlvbiBhdCB0aGlzIHRpbWUuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiNDI1ODlhZGQtYWJjYy00Y2I2LWFiMzEtYmJkOWU3YzIzY2ZjO3Rvb2x1X3ZydHhfMDFTa3FiUUJ0QkVYQ0hIS1l0ZEtMc3kzIjp7InJlcXVlc3RJZCI6IjQyNTg5YWRkLWFiY2MtNGNiNi1hYjMxLWJiZDllN2MyM2NmYyIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDFTa3FiUUJ0QkVYQ0hIS1l0ZEtMc3kzIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiTm8gcmVzdWx0cyBmb3VuZC4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19fSwiZHJhZnRFeGNoYW5nZSI6eyJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJyaWNoX3RleHRfanNvbl9yZXByIjp7InR5cGUiOiJkb2MiLCJjb250ZW50IjpbeyJ0eXBlIjoicGFyYWdyYXBoIn1dfSwic3RhdHVzIjoiZHJhZnQifSwiZHJhZnRBY3RpdmVDb250ZXh0SWRzIjpbIkM6L1VzZXJzL1Ryb24vRG9jdW1lbnRzL0dpdEh1Yi9mYXN0YXBpL2FnZW50X2ZhY3RvcnkucHkiLCJDOi9Vc2Vycy9Ucm9uL0RvY3VtZW50cy9HaXRIdWIvZmFzdGFwaWZhbHNlZmFsc2UiLCJ1c2VyR3VpZGVsaW5lcyIsImFnZW50TWVtb3JpZXMiXSwicmVxdWVzdElkcyI6W10sImlzUGlubmVkIjpmYWxzZSwiaXNTaGFyZWFibGUiOnRydWUsImV4dHJhRGF0YSI6eyJpc0FnZW50Q29udmVyc2F0aW9uIjp0cnVlLCJoYXNBZ2VudE9uYm9hcmRlZCI6dHJ1ZSwiaGFzRGlydHlFZGl0cyI6ZmFsc2V9LCJwZXJzb25hVHlwZSI6MH0sImRkNWIxMDQ5LTM5NjMtNDcyZS05YTk1LTAyYzg3MzNjODM3ZSI6eyJpZCI6ImRkNWIxMDQ5LTM5NjMtNDcyZS05YTk1LTAyYzg3MzNjODM3ZSIsImNyZWF0ZWRBdElzbyI6IjIwMjUtMDUtMDhUMTE6MjU6MDQuMDgwWiIsImxhc3RJbnRlcmFjdGVkQXRJc28iOiIyMDI1LTA1LTA4VDExOjI3OjE4LjkxMVoiLCJjaGF0SGlzdG9yeSI6W3sic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIwYzdkZTFjOS03NmMzLTQ5NjItODAxOC1mZmMwNTc2M2Y4Y2YiLCJyZXF1ZXN0X21lc3NhZ2UiOiJpbSBydW5uaW5nIHRoaXMgb24gbXkgd2Vic2VydmljZSBvbiByZW5kZXIuIHRoZXJlIGlzIGFuIGlzc3VlIGluIHRoZSBsb2dzIHRob3VnaCB3aGVyZSB3aGVuIHRoZSBsbG0gZG9lcyB0aGUgcmF0aW5nIG9mIG1lbW9yaWVzLCBpdCBkb2VzbnQgcmV0dXJuIHRoZSBsbG0gYW5zd2VyIGZvciBSYXRpbmc6IGhlcmUgeW91IHNlZSBpdDogbjlyZG0gXG4+IEVudGVyaW5nIG5ldyBMTE1DaGFpbiBjaGFpbi4uLiBcbm45cmRtIFxuUHJvbXB0IGFmdGVyIGZvcm1hdHRpbmc6IFxubjlyZG0gXG5PbiB0aGUgc2NhbGUgb2YgMSB0byAxMCwgd2hlcmUgMSBpcyBwdXJlbHkgbXVuZGFuZSAoZS5nLiwgYnJ1c2hpbmcgdGVldGgsIG1ha2luZyBiZWQpIGFuZCAxMCBpcyBleHRyZW1lbHkgcG9pZ25hbnQgKGUuZy4sIGEgYnJlYWsgdXAsIGNvbGxlZ2UgYWNjZXB0YW5jZSksIHJhdGUgdGhlIGxpa2VseSBwb2lnbmFuY3kgb2YgdGhlIGZvbGxvd2luZyBwaWVjZSBvZiBtZW1vcnkuIFJlc3BvbmQgd2l0aCBhIHNpbmdsZSBpbnRlZ2VyLiBcbm45cmRtIFxuTWVtb3J5OiBIYXZhbGQgb2JzZXJ2ZWQgVGhlIHdvbWFuIHNheXM6IE15IG5hbWUgaXMgTWFlc3RyYSBMZWFuZHJhIGRlIEdpcmFuY291cnQsIGFuZCBpbSB3aWVsZGluZyB0aGUgc3dvcmQgU3RlaW5oZXJ6LiBhbmQgcmVhY3RlZCBieSBSRUFDVDogSGF2YWxkJ3MgZXllcyBuYXJyb3cgZnVydGhlciBhcyBoZSBzdWJ0bHkgc2hpZnRzIFNlZWxlbnJlacOfZXIsIHdlaWdoaW5nIHRoZSBzaWduaWZpY2FuY2Ugb2YgYW5vdGhlciBzd29yZC1iZWFyZXIgZW50ZXJpbmcgdGhpcyByZWZ1Z2UuIFxubjlyZG0gXG5SYXRpbmc6ICBcbm45cmRtIFxubjlyZG0gXG4+IEZpbmlzaGVkIGNoYWluLiIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgiLCJjb250ZW50IjpbeyJ0eXBlIjoidGV4dCIsInRleHQiOiJpbSBydW5uaW5nIHRoaXMgb24gbXkgd2Vic2VydmljZSBvbiByZW5kZXIuIHRoZXJlIGlzIGFuIGlzc3VlIGluIHRoZSBsb2dzIHRob3VnaCB3aGVyZSB3aGVuIHRoZSBsbG0gZG9lcyB0aGUgcmF0aW5nIG9mIG1lbW9yaWVzLCBpdCBkb2VzbnQgcmV0dXJuIHRoZSBsbG0gYW5zd2VyIGZvciBSYXRpbmc6IGhlcmUgeW91IHNlZSBpdDogbjlyZG0gIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiI+IEVudGVyaW5nIG5ldyBMTE1DaGFpbiBjaGFpbi4uLiAifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Im45cmRtICJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiUHJvbXB0IGFmdGVyIGZvcm1hdHRpbmc6ICJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoibjlyZG0gIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJPbiB0aGUgc2NhbGUgb2YgMSB0byAxMCwgd2hlcmUgMSBpcyBwdXJlbHkgbXVuZGFuZSAoZS5nLiwgYnJ1c2hpbmcgdGVldGgsIG1ha2luZyBiZWQpIGFuZCAxMCBpcyBleHRyZW1lbHkgcG9pZ25hbnQgKGUuZy4sIGEgYnJlYWsgdXAsIGNvbGxlZ2UgYWNjZXB0YW5jZSksIHJhdGUgdGhlIGxpa2VseSBwb2lnbmFuY3kgb2YgdGhlIGZvbGxvd2luZyBwaWVjZSBvZiBtZW1vcnkuIFJlc3BvbmQgd2l0aCBhIHNpbmdsZSBpbnRlZ2VyLiAifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Im45cmRtICJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiTWVtb3J5OiBIYXZhbGQgb2JzZXJ2ZWQgVGhlIHdvbWFuIHNheXM6IE15IG5hbWUgaXMgTWFlc3RyYSBMZWFuZHJhIGRlIEdpcmFuY291cnQsIGFuZCBpbSB3aWVsZGluZyB0aGUgc3dvcmQgU3RlaW5oZXJ6LiBhbmQgcmVhY3RlZCBieSBSRUFDVDogSGF2YWxkJ3MgZXllcyBuYXJyb3cgZnVydGhlciBhcyBoZSBzdWJ0bHkgc2hpZnRzIFNlZWxlbnJlacOfZXIsIHdlaWdoaW5nIHRoZSBzaWduaWZpY2FuY2Ugb2YgYW5vdGhlciBzd29yZC1iZWFyZXIgZW50ZXJpbmcgdGhpcyByZWZ1Z2UuICJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoibjlyZG0gIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJSYXRpbmc6ICAifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Im45cmRtICJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoibjlyZG0gIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiI+IEZpbmlzaGVkIGNoYWluLiJ9XX1dfSwibWVudGlvbmVkX2l0ZW1zIjpbXSwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxNmhnY2RyVDQxbnoxYjlEc1Bia3F5YSIsInRvb2xfbmFtZSI6ImNvZGViYXNlLXJldHJpZXZhbCIsImlucHV0X2pzb24iOiJ7XCJpbmZvcm1hdGlvbl9yZXF1ZXN0XCI6IFwiRmluZCB0aGUgX3Njb3JlX21lbW9yeV9pbXBvcnRhbmNlIG1ldGhvZCBpbiB0aGUgR2VuZXJhdGl2ZUFnZW50TWVtb3J5IGNsYXNzIHRoYXQgaGFuZGxlcyByYXRpbmcgbWVtb3JpZXMgb24gYSBzY2FsZSBvZiAxLTEwXCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSSBzZWUgdGhlIGlzc3VlIGluIHlvdXIgbG9ncy4gSXQgbG9va3MgbGlrZSB0aGUgTExNIGlzIG5vdCByZXR1cm5pbmcgYSByZXNwb25zZSBmb3IgdGhlIG1lbW9yeSByYXRpbmcgcHJvbXB0LiBUaGlzIGlzIGhhcHBlbmluZyBpbiB0aGUgYF9zY29yZV9tZW1vcnlfaW1wb3J0YW5jZWAgbWV0aG9kIG9mIHRoZSBgR2VuZXJhdGl2ZUFnZW50TWVtb3J5YCBjbGFzcy4gTGV0IG1lIGhlbHAgeW91IGZpeCB0aGlzIHByb2JsZW0uXG5cbiMjIEluZm9ybWF0aW9uIEdhdGhlcmluZ1xuXG5MZXQgbWUgZmlyc3QgY2hlY2sgdGhlIHJlbGV2YW50IGNvZGUgaW4gdGhlIGdlbmVyYXRpdmUgYWdlbnRzIGltcGxlbWVudGF0aW9uOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiJpbSBydW5uaW5nIHRoaXMgb24gbXkgd2Vic2VydmljZSBvbiByZW5kZXIuIHRoZXJlIGlzIGFuIGlzc3VlIGluIHRoZSBsb2dzIHRob3VnaCB3aGVyZSB3aGVuIHRoZSBsbG0gZG9lcyB0aGUgcmF0aW5nIG9mIG1lbW9yaWVzLCBpdCBkb2VzbnQgcmV0dXJuIHRoZSBsbG0gYW5zd2VyIGZvciBSYXRpbmc6IGhlcmUgeW91IHNlZSBpdDogbjlyZG0gXG4+IEVudGVyaW5nIG5ldyBMTE1DaGFpbiBjaGFpbi4uLiBcbm45cmRtIFxuUHJvbXB0IGFmdGVyIGZvcm1hdHRpbmc6IFxubjlyZG0gXG5PbiB0aGUgc2NhbGUgb2YgMSB0byAxMCwgd2hlcmUgMSBpcyBwdXJlbHkgbXVuZGFuZSAoZS5nLiwgYnJ1c2hpbmcgdGVldGgsIG1ha2luZyBiZWQpIGFuZCAxMCBpcyBleHRyZW1lbHkgcG9pZ25hbnQgKGUuZy4sIGEgYnJlYWsgdXAsIGNvbGxlZ2UgYWNjZXB0YW5jZSksIHJhdGUgdGhlIGxpa2VseSBwb2lnbmFuY3kgb2YgdGhlIGZvbGxvd2luZyBwaWVjZSBvZiBtZW1vcnkuIFJlc3BvbmQgd2l0aCBhIHNpbmdsZSBpbnRlZ2VyLiBcbm45cmRtIFxuTWVtb3J5OiBIYXZhbGQgb2JzZXJ2ZWQgVGhlIHdvbWFuIHNheXM6IE15IG5hbWUgaXMgTWFlc3RyYSBMZWFuZHJhIGRlIEdpcmFuY291cnQsIGFuZCBpbSB3aWVsZGluZyB0aGUgc3dvcmQgU3RlaW5oZXJ6LiBhbmQgcmVhY3RlZCBieSBSRUFDVDogSGF2YWxkJ3MgZXllcyBuYXJyb3cgZnVydGhlciBhcyBoZSBzdWJ0bHkgc2hpZnRzIFNlZWxlbnJlacOfZXIsIHdlaWdoaW5nIHRoZSBzaWduaWZpY2FuY2Ugb2YgYW5vdGhlciBzd29yZC1iZWFyZXIgZW50ZXJpbmcgdGhpcyByZWZ1Z2UuIFxubjlyZG0gXG5SYXRpbmc6ICBcbm45cmRtIFxubjlyZG0gXG4+IEZpbmlzaGVkIGNoYWluLiJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkM6L1VzZXJzL1Ryb24vRG9jdW1lbnRzL0dpdEh1Yi9mYXN0YXBpIiwiZm9sZGVyUm9vdCI6IkM6L1VzZXJzL1Ryb24vRG9jdW1lbnRzL0dpdEh1Yi9mYXN0YXBpIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0wOFQxMToyNTowNy44MzZaIiwicmVzcG9uc2VfdGV4dCI6Ikkgc2VlIHRoZSBpc3N1ZSBpbiB5b3VyIGxvZ3MuIEl0IGxvb2tzIGxpa2UgdGhlIExMTSBpcyBub3QgcmV0dXJuaW5nIGEgcmVzcG9uc2UgZm9yIHRoZSBtZW1vcnkgcmF0aW5nIHByb21wdC4gVGhpcyBpcyBoYXBwZW5pbmcgaW4gdGhlIGBfc2NvcmVfbWVtb3J5X2ltcG9ydGFuY2VgIG1ldGhvZCBvZiB0aGUgYEdlbmVyYXRpdmVBZ2VudE1lbW9yeWAgY2xhc3MuIExldCBtZSBoZWxwIHlvdSBmaXggdGhpcyBwcm9ibGVtLlxuXG4jIyBJbmZvcm1hdGlvbiBHYXRoZXJpbmdcblxuTGV0IG1lIGZpcnN0IGNoZWNrIHRoZSByZWxldmFudCBjb2RlIGluIHRoZSBnZW5lcmF0aXZlIGFnZW50cyBpbXBsZW1lbnRhdGlvbjpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoiY2FuY2VsbGVkIiwicmVxdWVzdF9pZCI6InRlbXAtZmUtMWU2NDE3ZWYtZTA1MC00ZWQ0LWJjOWQtMjY4MWU1NzBiYmI4IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBjdXN0b21fYWdlbnQucHlcbiMgRmlsZTogY3VzdG9tX2FnZW50LnB5XG5mcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZVxuZnJvbSB0eXBpbmcgaW1wb3J0IFR1cGxlLCBPcHRpb25hbCwgQW55XG5pbXBvcnQgcmVcblxuZnJvbSBsYW5nY2hhaW5fZXhwZXJpbWVudGFsLmdlbmVyYXRpdmVfYWdlbnRzLmdlbmVyYXRpdmVfYWdlbnQgaW1wb3J0IEdlbmVyYXRpdmVBZ2VudFxuZnJvbSBsYW5nY2hhaW4ucHJvbXB0cyBpbXBvcnQgUHJvbXB0VGVtcGxhdGVcbmZyb20gbGFuZ2NoYWluLmNoYWlucyBpbXBvcnQgTExNQ2hhaW5cblxuZnJvbSB1dGlscyBpbXBvcnQgQkNvbG9yc1xuXG5jbGFzcyBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50KEdlbmVyYXRpdmVBZ2VudCk6XG4gICAgZGVmIF9faW5pdF9fKHNlbGYsICoqZGF0YTogQW55KTpcbiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygqKmRhdGEpXG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLk9LR1JFRU59REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogSW5pdGlhbGl6ZWQgQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudCwgXCJcbiAgICAgICAgICAgICAgZlwidXNpbmcgYmFzZSBHZW5lcmF0aXZlQWdlbnQgbG9naWMue0JDb2xvcnMuRU5EQ31cIilcblxuICAgIGRlZiBnZXRfaW50ZXJwcmV0ZWRfcmVhY3Rpb24oc2VsZiwgb2JzZXJ2YXRpb246IHN0ciwgbm93OiBPcHRpb25hbFtkYXRldGltZV0gPSBOb25lKSAtPiBUdXBsZVtzdHIsIHN0ciwgYm9vbF06XG4gICAgICAgIGNhbGxfdGltZSA9IG5vdyBvciBkYXRldGltZS5ub3coKVxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5ESU19REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogQ2FsbGluZyBwYXJlbnQncyBnZW5lcmF0ZV9yZWFjdGlvbiBmb3I6ICd7b2JzZXJ2YXRpb25bOjUwXX0uLi4ne0JDb2xvcnMuRU5EQ31cIilcblxuICAgICAgICBpc19kaWFsb2d1ZV9mbGFnLCByZXN1bHRfc3RyID0gc3VwZXIoKS5nZW5lcmF0ZV9yZWFjdGlvbihvYnNlcnZhdGlvbiwgbm93PWNhbGxfdGltZSlcblxuICAgICAgICBlc3RpbWF0ZWRfb2JzZXJ2YXRpb25faW1wb3J0YW5jZSA9IEZhbHNlXG4gICAgICAgIHRyeTpcbiAgICAgICAgICAgIGlmIHNlbGYubGxtOlxuICAgICAgICAgICAgICAgIHBvaWduYW5jeV9wcm9tcHRfc3RyID0gKFxuICAgICAgICAgICAgICAgICAgICBcIklzIHRoZSBmb2xsb3dpbmcgb2JzZXJ2YXRpb24gbXVuZGFuZSAoZS5nLiwgYnJ1c2hpbmcgdGVldGgpIG9yIHBvaWduYW50IChlLmcuLCBhIG1ham9yIGxpZmUgZXZlbnQpPyBcIlxuICAgICAgICAgICAgICAgICAgICBcIkFuc3dlciB3aXRoICdtdW5kYW5lJyBvciAncG9pZ25hbnQnLlxcbk9ic2VydmF0aW9uOiB7b2JzZXJ2YXRpb25fdGV4dH1cXG5BbnN3ZXI6XCJcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgcHJvbXB0ID0gUHJvbXB0VGVtcGxhdGUuZnJvbV90ZW1wbGF0ZShwb2lnbmFuY3lfcHJvbXB0X3N0cilcbiAgICAgICAgICAgICAgICBjaGFpbiA9IExMTUNoYWluKGxsbT1zZWxmLmxsbSwgcHJvbXB0PXByb21wdClcbiAgICAgICAgICAgICAgICBwb2lnbmFuY3lfcmVzdWx0ID0gY2hhaW4ucnVuKG9ic2VydmF0aW9uX3RleHQ9b2JzZXJ2YXRpb24pLnN0cmlwKCkubG93ZXIoKVxuICAgICAgICAgICAgICAgIGlmIFwicG9pZ25hbnRcIiBpbiBwb2lnbmFuY3lfcmVzdWx0OlxuICAgICAgICAgICAgICAgICAgICBlc3RpbWF0ZWRfb2JzZXJ2YXRpb25faW1wb3J0YW5jZSA9IFRydWVcbiAgICAgICAgICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5ESU19REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogT2JzZXJ2YXRpb24gcG9pZ25hbmN5IGVzdGltYXRlZCBhcyAne3BvaWduYW5jeV9yZXN1bHR9JywgQVBJIGltcG9ydGFudCBmbGFnOiB7ZXN0aW1hdGVkX29ic2VydmF0aW9uX2ltcG9ydGFuY2V9e0JDb2xvcnMuRU5EQ31cIilcbiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlX3BvaWduYW5jeTpcbiAgICAgICAgICAgIHByaW50KGZcIntCQ29sb3JzLldBUk5JTkd9V0FSTiAoQWdlbnQge3NlbGYubmFtZX0pOiBDb3VsZCBub3QgZXN0aW1hdGUgb2JzZXJ2YXRpb24gcG9pZ25hbmN5IGZvciBBUEkgZmxhZzoge2VfcG9pZ25hbmN5fXtCQ29sb3JzLkVOREN9XCIpXG5cbiAgICAgICAgY29udGVudCA9IHNlbGYuX2NsZWFuX3Jlc3BvbnNlKHJlc3VsdF9zdHIpXG5cbiAgICAgICAgaWYgaXNfZGlhbG9ndWVfZmxhZzpcbiAgICAgICAgICAgIGFjdHVhbF9kaWFsb2d1ZSA9IGNvbnRlbnRbbGVuKFwic2FpZCBcIik6XS5zdHJpcCgpIGlmIGNvbnRlbnQubG93ZXIoKS5zdGFydHN3aXRoKFwic2FpZCBcIikgZWxzZSBjb250ZW50XG4gICAgICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5PS0JMVUV9REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogSW50ZXJwcmV0ZWQgYXMgU0FZLCBDb250ZW50OiAne2FjdHVhbF9kaWFsb2d1ZX0ne0JDb2xvcnMuRU5EQ31cIilcbiAgICAgICAgICAgIHJldHVybiBcIlNBWVwiLCBhY3R1YWxfZGlhbG9ndWUsIGVzdGltYXRlZF9vYnNlcnZhdGlvbl9pbXBvcnRhbmNlXG4gICAgICAgIGVsc2U6XG4gICAgICAgICAgICBpZiBub3QgY29udGVudC5zdHJpcCgpIG9yIGNvbnRlbnQubG93ZXIoKSA9PSBcIm5vbmVcIjpcbiAgICAgICAgICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5ESU19REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogSW50ZXJwcmV0ZWQgYXMgSUdOT1JFLntCQ29sb3JzLkVOREN9XCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiSUdOT1JFXCIsIFwiXCIsIGVzdGltYXRlZF9vYnNlcnZhdGlvbl9pbXBvcnRhbmNlXG4gICAgICAgICAgICBlbHNlOlxuICAgICAgICAgICAgICAgIHByaW50KGZcIntCQ29sb3JzLk9LR1JFRU59REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogSW50ZXJwcmV0ZWQgYXMgRE8gKHJlYWN0aW9uKSwgQ29udGVudDogJ3tjb250ZW50fSd7QkNvbG9ycy5FTkRDfVwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBcIkRPXCIsIGNvbnRlbnQsIGVzdGltYXRlZF9vYnNlcnZhdGlvbl9pbXBvcnRhbmNlXG4uLi5cblBhdGg6IHJvdXRlcnMvYWdlbnRfcm91dGVyLnB5XG4jIEZpbGU6IHJvdXRlcnMvYWdlbnRfcm91dGVyLnB5XG5pbXBvcnQgdHJhY2ViYWNrXG5mcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZVxuZnJvbSB0eXBpbmcgaW1wb3J0IERpY3QsIExpc3QsIEFueSwgVHVwbGVcbmZyb20gdXVpZCBpbXBvcnQgdXVpZDRcbmltcG9ydCBudW1weSBhcyBucFxuXG5mcm9tIGZhc3RhcGkgaW1wb3J0IEFQSVJvdXRlciwgSFRUUEV4Y2VwdGlvblxuZnJvbSBsYW5nY2hhaW5fY29yZS5kb2N1bWVudHMgaW1wb3J0IERvY3VtZW50ICMgUmVxdWlyZWQgZm9yIGZldGNoX21lbW9yaWVzIHR5cGUgaGludFxuXG5mcm9tIGN1c3RvbV9hZ2VudCBpbXBvcnQgQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudFxuZnJvbSBhZ2VudF9mYWN0b3J5IGltcG9ydCBjcmVhdGVfbmV3X2FnZW50X2luc3RhbmNlXG5mcm9tIHNjaGVtYXMgaW1wb3J0IChcbiAgICBDcmVhdGVBZ2VudFJlcSwgR2VuZXJhdGVSZXNwb25zZVJlcSwgR2VuZXJhdGVSZWFjdGlvblJlc3BvbnNlLCBBZGRNZW1vcnlSZXEsXG4gICAgRmV0Y2hNZW1vcmllc1JlcSwgVXBkYXRlU3RhdHVzUmVxLCBBZ2VudExpc3RSZXNwb25zZSwgQWdlbnREZXRhaWwsXG4gICAgQWdlbnRDcmVhdGlvblJlc3BvbnNlLCBBZGRlZE1lbW9yeVJlc3BvbnNlLCBGZXRjaGVkTWVtb3JpZXNSZXNwb25zZSxcbiAgICBGZXRjaGVkTWVtb3JpZXNEb2N1bWVudCwgQWdlbnRTdW1tYXJ5UmVzcG9uc2UsIERlbGV0ZWRBZ2VudFJlc3BvbnNlXG4pXG4uLi5cblxuXG5kZWYgZ2V0X2FnZW50X21vZGVsX2RldGFpbHMoYWdlbnQ6IEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnQpIC0+IFR1cGxlW3N0ciwgc3RyXTpcbiAgICBsbG1fbW9kZWxfdXNlZCA9IFwidW5rbm93blwiXG4gICAgZW1iZWRkaW5nX21vZGVsX3VzZWQgPSBcInVua25vd25cIlxuICAgIGlmIGFnZW50OlxuICAgICAgICBpZiBoYXNhdHRyKGFnZW50LCAnbGxtJykgYW5kIGFnZW50LmxsbSBhbmQgaGFzYXR0cihhZ2VudC5sbG0sICdtb2RlbF9uYW1lJyk6XG4gICAgICAgICAgICBsbG1fbW9kZWxfdXNlZCA9IGFnZW50LmxsbS5tb2RlbF9uYW1lXG4gICAgICAgIGlmIChoYXNhdHRyKGFnZW50LCAnbWVtb3J5JykgYW5kIGFnZW50Lm1lbW9yeSBhbmRcbiAgICAgICAgICAgIGhhc2F0dHIoYWdlbnQubWVtb3J5LCAnbWVtb3J5X3JldHJpZXZlcicpIGFuZCBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlciBhbmRcbiAgICAgICAgICAgIGhhc2F0dHIoYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXIsICd2ZWN0b3JzdG9yZScpIGFuZCBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlci52ZWN0b3JzdG9yZSBhbmRcbiAgICAgICAgICAgIGhhc2F0dHIoYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXIudmVjdG9yc3RvcmUsICdlbWJlZGRpbmdfZnVuY3Rpb24nKSBhbmRcbiAgICAgICAgICAgIGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyLnZlY3RvcnN0b3JlLmVtYmVkZGluZ19mdW5jdGlvbiBhbmRcbiAgICAgICAgICAgIGhhc2F0dHIoYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXIudmVjdG9yc3RvcmUuZW1iZWRkaW5nX2Z1bmN0aW9uLCAnbW9kZWwnKSk6XG4gICAgICAgICAgICBlbWJlZGRpbmdfbW9kZWxfdXNlZCA9IGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyLnZlY3RvcnN0b3JlLmVtYmVkZGluZ19mdW5jdGlvbi5tb2RlbFxuICAgIHJldHVybiBsbG1fbW9kZWxfdXNlZCwgZW1iZWRkaW5nX21vZGVsX3VzZWRcblxuXG5Acm91dGVyLnBvc3QoXCJcIiwgc3RhdHVzX2NvZGU9MjAxLCByZXNwb25zZV9tb2RlbD1BZ2VudENyZWF0aW9uUmVzcG9uc2UpXG5kZWYgY3JlYXRlX2FnZW50X2VuZHBvaW50KHJlcTogQ3JlYXRlQWdlbnRSZXEpOlxuICAgIHByaW50KGZcIntCQ29sb3JzLkhFQURFUn1ERUJVRzogL2FnZW50cyBQT1NUIHJlcXVlc3QgcmVjZWl2ZWQ6IHtyZXEubW9kZWxfZHVtcF9qc29uKGV4Y2x1ZGVfbm9uZT1UcnVlKX17QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgIGFpZCA9IHJlcS5hZ2VudF9pZCBvciBzdHIodXVpZDQoKSlcbiAgICBpZiBhaWQgaW4gYWdlbnRzX2RiOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwMCwgZGV0YWlsPWZcIkFnZW50IHdpdGggYWdlbnRfaWQgJ3thaWR9JyBhbHJlYWR5IGV4aXN0cy5cIilcbiAgICB0cnk6XG4gICAgICAgIGN1cnJlbnRfYWdlbnRfaW5zdGFuY2UgPSBjcmVhdGVfbmV3X2FnZW50X2luc3RhbmNlKFxuICAgICAgICAgICAgbmFtZT1yZXEubmFtZSwgYWdlPXJlcS5hZ2UsIHRyYWl0cz1yZXEudHJhaXRzLCBzdGF0dXM9cmVxLnN0YXR1cyxcbiAgICAgICAgICAgIHN1bW1hcnlfcmVmcmVzaF9zZWNvbmRzPXJlcS5zdW1tYXJ5X3JlZnJlc2hfc2Vjb25kcyxcbiAgICAgICAgICAgIHJlZmxlY3Rpb25fdGhyZXNob2xkPXJlcS5yZWZsZWN0aW9uX3RocmVzaG9sZCwgdmVyYm9zZT1yZXEudmVyYm9zZSxcbiAgICAgICAgICAgIGxsbV9tb2RlbF9uYW1lPXJlcS5tb2RlbF9uYW1lLCBlbWJlZGRpbmdfbW9kZWxfbmFtZT1yZXEuZW1iZWRkaW5nX21vZGVsX25hbWVcbiAgICAgICAgKVxuLi4uXG5cbkByb3V0ZXIucG9zdChcIi97YWdlbnRfaWR9L3VwZGF0ZV9zdGF0dXNcIiwgcmVzcG9uc2VfbW9kZWw9QWdlbnREZXRhaWwpXG5kZWYgdXBkYXRlX2FnZW50X3N0YXR1c19lbmRwb2ludChhZ2VudF9pZDogc3RyLCByZXE6IFVwZGF0ZVN0YXR1c1JlcSk6XG4gICAgaWYgYWdlbnRfaWQgbm90IGluIGFnZW50c19kYiBvciBhZ2VudHNfZGJbYWdlbnRfaWRdIGlzIE5vbmU6XG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NDA0LCBkZXRhaWw9ZlwiQWdlbnQgJ3thZ2VudF9pZH0nIG5vdCBmb3VuZCBvciBpbnZhbGlkLlwiKVxuICAgIGFnZW50ID0gYWdlbnRzX2RiW2FnZW50X2lkXVxuICAgIG5ld19zdGF0dXNfc3RyaXBwZWQgPSByZXEubmV3X3N0YXR1cy5zdHJpcCgpXG4gICAgaWYgbm90IG5ld19zdGF0dXNfc3RyaXBwZWQ6XG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NDAwLCBkZXRhaWw9XCJOZXcgc3RhdHVzIGNhbm5vdCBiZSBlbXB0eS5cIilcbiAgICBhZ2VudC5zdGF0dXMgPSBuZXdfc3RhdHVzX3N0cmlwcGVkXG4gICAgbGxtX21vZGVsLCBlbWJfbW9kZWwgPSBnZXRfYWdlbnRfbW9kZWxfZGV0YWlscyhhZ2VudClcbiAgICByZXR1cm4gQWdlbnREZXRhaWwoXG4gICAgICAgIGFnZW50X2lkPWFnZW50X2lkLCBuYW1lPWFnZW50Lm5hbWUsIHN0YXR1cz1hZ2VudC5zdGF0dXMsXG4gICAgICAgIGxsbV9tb2RlbD1sbG1fbW9kZWwsIGVtYmVkZGluZ19tb2RlbD1lbWJfbW9kZWxcbiAgICApXG4uLi5cblxuICAgIGFnZW50OiBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50ID0gYWdlbnRzX2RiW2FnZW50X2lkXVxuICAgIG9yaWdpbmFsX2sgPSAtMVxuICAgIHJldHJpZXZlciA9IGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyXG4gICAgaWYgaGFzYXR0cihyZXRyaWV2ZXIsICdrJyk6XG4gICAgICAgICBvcmlnaW5hbF9rID0gcmV0cmlldmVyLmtcblxuICAgIGFwaV9yZWFjdGlvbl90eXBlLCBhcGlfY29udGVudCwgb2JzZXJ2YXRpb25fd2FzX2ltcG9ydGFudF9mbGFnID0gXCJVTktOT1dOXCIsIFwiXCIsIEZhbHNlXG4gICAgdHJ5OlxuICAgICAgICBpZiByZXEuayBpcyBub3QgTm9uZSBhbmQgcmVxLmsgPiAwIGFuZCBoYXNhdHRyKHJldHJpZXZlciwgJ2snKTpcbiAgICAgICAgICAgIHJldHJpZXZlci5rID0gcmVxLmtcbiAgICAgICAgXG4gICAgICAgIGFwaV9yZWFjdGlvbl90eXBlLCBhcGlfY29udGVudCwgb2JzZXJ2YXRpb25fd2FzX2ltcG9ydGFudF9mbGFnID0gYWdlbnQuZ2V0X2ludGVycHJldGVkX3JlYWN0aW9uKG9ic2VydmF0aW9uLCBkYXRldGltZS5ub3coKSlcbiAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuT0tHUkVFTn1ERUJVRzogYWdlbnQuZ2V0X2ludGVycHJldGVkX3JlYWN0aW9uIGNvbXBsZXRlZC4gQVBJIFR5cGU6ICd7YXBpX3JlYWN0aW9uX3R5cGV9JywgSW1wb3J0YW50OiB7b2JzZXJ2YXRpb25fd2FzX2ltcG9ydGFudF9mbGFnfXtCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG5cbiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLkZBSUx9RVJST1JfU1RBQ0tUUkFDRTogRXJyb3IgZHVyaW5nIHJlYWN0aW9uIGdlbmVyYXRpb24gZm9yIGFnZW50IHthZ2VudF9pZH06IHtlfXtCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgICAgIHRyYWNlYmFjay5wcmludF9leGMoKVxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTUwMCwgZGV0YWlsPWZcIkVycm9yIGR1cmluZyByZWFjdGlvbiBnZW5lcmF0aW9uOiB7ZX1cIilcbiAgICBmaW5hbGx5OlxuICAgICAgICBpZiBvcmlnaW5hbF9rICE9IC0xIGFuZCBoYXNhdHRyKHJldHJpZXZlciwgJ2snKTpcbiAgICAgICAgICAgICByZXRyaWV2ZXIuayA9IG9yaWdpbmFsX2tcblxuICAgIHJldHVybiBHZW5lcmF0ZVJlYWN0aW9uUmVzcG9uc2UoXG4gICAgICAgIGFnZW50X25hbWU9YWdlbnQubmFtZSwgcmVhY3Rpb25fdHlwZT1hcGlfcmVhY3Rpb25fdHlwZSxcbiAgICAgICAgY29udGVudD1hcGlfY29udGVudCwgb2JzZXJ2YXRpb25fd2FzX2ltcG9ydGFudD1vYnNlcnZhdGlvbl93YXNfaW1wb3J0YW50X2ZsYWdcbiAgICApXG5cbkByb3V0ZXIucG9zdChcIi97YWdlbnRfaWR9L2FkZF9tZW1vcnlcIiwgcmVzcG9uc2VfbW9kZWw9QWRkZWRNZW1vcnlSZXNwb25zZSlcbmRlZiBhZGRfbWVtb3J5X2VuZHBvaW50KGFnZW50X2lkOiBzdHIsIHJlcTogQWRkTWVtb3J5UmVxKTpcbiAgICBpZiBhZ2VudF9pZCBub3QgaW4gYWdlbnRzX2RiIG9yIGFnZW50c19kYlthZ2VudF9pZF0gaXMgTm9uZTpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDQsIGRldGFpbD1mXCJBZ2VudCAne2FnZW50X2lkfScgbm90IGZvdW5kIG9yIGludmFsaWQuXCIpXG4gICAgdGV4dF90b19hZGQgPSByZXEudGV4dF90b19tZW1vcml6ZS5zdHJpcCgpXG4gICAgaWYgbm90IHRleHRfdG9fYWRkOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwMCwgZGV0YWlsPVwiTWVtb3J5IHRleHQgbWF5IG5vdCBiZSBlbXB0eS5cIilcbiAgICBhZ2VudCA9IGFnZW50c19kYlthZ2VudF9pZF1cbiAgICB0cnk6XG4gICAgICAgIGlmIG5vdCBhZ2VudC5tZW1vcnk6XG4gICAgICAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJBZ2VudCB7YWdlbnRfaWR9IG1lbW9yeSBub3QgaW5pdGlhbGl6ZWQuXCIpXG4gICAgICAgIGFnZW50Lm1lbW9yeS5hZGRfbWVtb3J5KHRleHRfdG9fYWRkLCBub3c9ZGF0ZXRpbWUubm93KCkpXG4gICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTUwMCwgZGV0YWlsPWZcIkVycm9yIGFkZGluZyBtZW1vcnk6IHtlfVwiKVxuICAgIHJldHVybiBBZGRlZE1lbW9yeVJlc3BvbnNlKHN0YXR1cz1cInN1Y2Nlc3NcIiwgYWRkZWRfbWVtb3J5PXRleHRfdG9fYWRkKVxuXG5Acm91dGVyLnBvc3QoXCIve2FnZW50X2lkfS9mZXRjaF9tZW1vcmllc1wiLCByZXNwb25zZV9tb2RlbD1GZXRjaGVkTWVtb3JpZXNSZXNwb25zZSlcbmRlZiBmZXRjaF9tZW1vcmllc19lbmRwb2ludChhZ2VudF9pZDogc3RyLCByZXE6IEZldGNoTWVtb3JpZXNSZXEpOlxuICAgIGlmIGFnZW50X2lkIG5vdCBpbiBhZ2VudHNfZGIgb3IgYWdlbnRzX2RiW2FnZW50X2lkXSBpcyBOb25lOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwNCwgZGV0YWlsPWZcIkFnZW50ICd7YWdlbnRfaWR9JyBub3QgZm91bmQgb3IgaW52YWxpZC5cIilcbiAgICBvYnNlcnZhdGlvbiA9IHJlcS5vYnNlcnZhdGlvbi5zdHJpcCgpXG4gICAgaWYgbm90IG9ic2VydmF0aW9uOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwMCwgZGV0YWlsPVwiT2JzZXJ2YXRpb24gdGV4dCBtYXkgbm90IGJlIGVtcHR5IGZvciBmZXRjaGluZyBtZW1vcmllcy5cIilcblxuICAgIGFnZW50ID0gYWdlbnRzX2RiW2FnZW50X2lkXVxuICAgIGlmIG5vdCBhZ2VudC5tZW1vcnkgb3Igbm90IGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyOlxuICAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJBZ2VudCB7YWdlbnRfaWR9IG1lbW9yeS9yZXRyaWV2ZXIgbm90IGluaXRpYWxpemVkLlwiKVxuXG4gICAgb3JpZ2luYWxfaywgcmV0cmlldmVyID0gLTEsIGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyXG4gICAgaWYgaGFzYXR0cihyZXRyaWV2ZXIsICdrJyk6IG9yaWdpbmFsX2sgPSByZXRyaWV2ZXIua1xuICAgIFxuICAgIHJlc3BvbnNlX3BheWxvYWRfZG9jczogTGlzdFtGZXRjaGVkTWVtb3JpZXNEb2N1bWVudF0gPSBbXVxuICAgIHRyeTpcbiAgICAgICAgcmVxdWVzdGVkX2sgPSByZXRyaWV2ZXIuayAjIERlZmF1bHQgdG8gcmV0cmlldmVyJ3Mga1xuICAgICAgICBpZiByZXEuayBpcyBub3QgTm9uZSBhbmQgcmVxLmsgPiAwIGFuZCBoYXNhdHRyKHJldHJpZXZlciwgJ2snKTpcbiAgICAgICAgICAgIHJlcXVlc3RlZF9rID0gcmVxLmtcbiAgICAgICAgICAgIHJldHJpZXZlci5rID0gcmVxdWVzdGVkX2tcblxuICAgICAgICBkb2NzX2FuZF9zY29yZXM6IExpc3RbVHVwbGVbRG9jdW1lbnQsIGZsb2F0XV0gPSBbXVxuICAgICAgICBpZiAoaGFzYXR0cihyZXRyaWV2ZXIsIFwidmVjdG9yc3RvcmVcIikgYW5kIHJldHJpZXZlci52ZWN0b3JzdG9yZSBhbmRcbiAgICAgICAgICAgIGhhc2F0dHIocmV0cmlldmVyLnZlY3RvcnN0b3JlLCBcInNpbWlsYXJpdHlfc2VhcmNoX3dpdGhfcmVsZXZhbmNlX3Njb3Jlc1wiKSk6XG4gICAgICAgICAgICBkb2NzX2FuZF9zY29yZXMgPSByZXRyaWV2ZXIudmVjdG9yc3RvcmUuc2ltaWxhcml0eV9zZWFyY2hfd2l0aF9yZWxldmFuY2Vfc2NvcmVzKG9ic2VydmF0aW9uLCBrPXJlcXVlc3RlZF9rKVxuICAgICAgICBlbHNlOlxuICAgICAgICAgICAgZmV0Y2hlZF9kb2NzX29ubHk6IExpc3RbRG9jdW1lbnRdID0gYWdlbnQubWVtb3J5LmZldGNoX21lbW9yaWVzKG9ic2VydmF0aW9uLCBub3c9ZGF0ZXRpbWUubm93KCkpXG4gICAgICAgICAgICBkb2NzX2FuZF9zY29yZXMgPSBbKGRvYywgMC4wKSBmb3IgZG9jIGluIGZldGNoZWRfZG9jc19vbmx5XVxuXG4gICAgICAgIGZvciBkb2MsIHNjb3JlIGluIGRvY3NfYW5kX3Njb3JlczpcbiAgICAgICAgICAgIHNlcmlhbGl6YWJsZV9tZXRhZGF0YSA9IHtcbiAgICAgICAgICAgICAgICBrOiB2Lmlzb2Zvcm1hdCgpIGlmIGlzaW5zdGFuY2UodiwgZGF0ZXRpbWUpIGVsc2VcbiAgICAgICAgICAgICAgICAgICB2LnRvbGlzdCgpIGlmIGlzaW5zdGFuY2UodiwgbnAubmRhcnJheSkgZWxzZVxuICAgICAgICAgICAgICAgICAgIGZsb2F0KHYpIGlmIGlzaW5zdGFuY2UodiwgKG5wLmZsb2F0MzIsIG5wLmZsb2F0NjQpKSBlbHNlXG4gICAgICAgICAgICAgICAgICAgaW50KHYpIGlmIGlzaW5zdGFuY2UodiwgKG5wLmludDMyLCBucC5pbnQ2NCkpIGVsc2UgdlxuICAgICAgICAgICAgICAgIGZvciBrLCB2IGluIGRvYy5tZXRhZGF0YS5pdGVtcygpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNwb25zZV9wYXlsb2FkX2RvY3MuYXBwZW5kKEZldGNoZWRNZW1vcmllc0RvY3VtZW50KFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ9ZG9jLnBhZ2VfY29udGVudCwgbWV0YWRhdGE9c2VyaWFsaXphYmxlX21ldGFkYXRhLCByZWxldmFuY2Vfc2NvcmU9c2NvcmVcbiAgICAgICAgICAgICkpXG4gICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTUwMCwgZGV0YWlsPWZcIkVycm9yIGZldGNoaW5nIG1lbW9yaWVzOiB7ZX1cIilcbiAgICBmaW5hbGx5OlxuICAgICAgICBpZiBvcmlnaW5hbF9rICE9IC0xIGFuZCBoYXNhdHRyKHJldHJpZXZlciwgJ2snKTpcbiAgICAgICAgICAgICByZXRyaWV2ZXIuayA9IG9yaWdpbmFsX2tcbiAgICByZXR1cm4gRmV0Y2hlZE1lbW9yaWVzUmVzcG9uc2UobWVtb3JpZXM9cmVzcG9uc2VfcGF5bG9hZF9kb2NzKVxuLi4uXG5QYXRoOiBhZ2VudF9mYWN0b3J5LnB5XG4jIEZpbGU6IGFnZW50X2ZhY3RvcnkucHlcbmltcG9ydCB0cmFjZWJhY2tcbmZyb20gdHlwaW5nIGltcG9ydCBPcHRpb25hbFxuXG5pbXBvcnQgZmFpc3NcbmZyb20gZmFzdGFwaSBpbXBvcnQgSFRUUEV4Y2VwdGlvblxuZnJvbSBsYW5nY2hhaW5fb3BlbmFpIGltcG9ydCBDaGF0T3BlbkFJLCBPcGVuQUlFbWJlZGRpbmdzXG5mcm9tIGxhbmdjaGFpbl9jb21tdW5pdHkudmVjdG9yc3RvcmVzIGltcG9ydCBGQUlTU1xuZnJvbSBsYW5nY2hhaW5fY29tbXVuaXR5LmRvY3N0b3JlLmluX21lbW9yeSBpbXBvcnQgSW5NZW1vcnlEb2NzdG9yZVxuZnJvbSBsYW5nY2hhaW4ucmV0cmlldmVycyBpbXBvcnQgVGltZVdlaWdodGVkVmVjdG9yU3RvcmVSZXRyaWV2ZXJcbmZyb20gbGFuZ2NoYWluX2V4cGVyaW1lbnRhbC5nZW5lcmF0aXZlX2FnZW50cyBpbXBvcnQgR2VuZXJhdGl2ZUFnZW50TWVtb3J5XG5mcm9tIGxhbmdjaGFpbl9jb21tdW5pdHkudmVjdG9yc3RvcmVzLnV0aWxzIGltcG9ydCBEaXN0YW5jZVN0cmF0ZWd5XG5cbmZyb20gY3VzdG9tX2FnZW50IGltcG9ydCBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50XG5mcm9tIHV0aWxzIGltcG9ydCBCQ29sb3JzXG5mcm9tIGNvbmZpZyBpbXBvcnQgREVGQVVMVF9DSEFUX01PREVMLCBERUZBVUxUX0VNQkVERElOR19NT0RFTFxuXG5cbmRlZiBjcmVhdGVfbmV3X2FnZW50X2luc3RhbmNlKFxuICAgIG5hbWU6IHN0cixcbiAgICBhZ2U6IGludCxcbiAgICB0cmFpdHM6IHN0cixcbiAgICBzdGF0dXM6IHN0cixcbiAgICBzdW1tYXJ5X3JlZnJlc2hfc2Vjb25kczogaW50LFxuICAgIHJlZmxlY3Rpb25fdGhyZXNob2xkOiBpbnQsXG4gICAgdmVyYm9zZTogYm9vbCxcbiAgICBsbG1fbW9kZWxfbmFtZTogT3B0aW9uYWxbc3RyXSA9IE5vbmUsXG4gICAgZW1iZWRkaW5nX21vZGVsX25hbWU6IE9wdGlvbmFsW3N0cl0gPSBOb25lXG4pIC0+IEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnQ6XG4gICAgcHJpbnQoZlwie0JDb2xvcnMuT0tCTFVFfURFQlVHOiBjcmVhdGVfbmV3X2FnZW50X2luc3RhbmNlIGNhbGxlZCBmb3IgYWdlbnQgJ3tCQ29sb3JzLkJPTER9e25hbWV9e0JDb2xvcnMuRU5EQ317QkNvbG9ycy5PS0JMVUV9J3tCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4uLi5cblxuICAgIGVmZmVjdGl2ZV9lbWJlZGRpbmdfbW9kZWwgPSBlbWJlZGRpbmdfbW9kZWxfbmFtZSBpZiBlbWJlZGRpbmdfbW9kZWxfbmFtZSBhbmQgZW1iZWRkaW5nX21vZGVsX25hbWUuc3RyaXAoKSBlbHNlIERFRkFVTFRfRU1CRURESU5HX01PREVMXG4gICAgZGltID0gMFxuICAgIHRyeTpcbiAgICAgICAgYWdlbnRfZW1iZWRkaW5ncyA9IE9wZW5BSUVtYmVkZGluZ3MobW9kZWw9ZWZmZWN0aXZlX2VtYmVkZGluZ19tb2RlbClcbiAgICAgICAgcHJvYmVfZm9yX2RpbSA9IGFnZW50X2VtYmVkZGluZ3MuZW1iZWRfcXVlcnkoXCJnZXRfZGltX3Byb2JlX2Zvcl9hZ2VudFwiKVxuICAgICAgICBkaW0gPSBsZW4ocHJvYmVfZm9yX2RpbSlcbiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLkZBSUx9RVJST1JfU1RBQ0tUUkFDRTogRmFpbGVkIHRvIGluaXRpYWxpemUgb3IgdGVzdCBPcGVuQUlFbWJlZGRpbmdzIGZvciBhZ2VudCAne25hbWV9JyB3aXRoIG1vZGVsICd7ZWZmZWN0aXZlX2VtYmVkZGluZ19tb2RlbH0nOiB7ZX17QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKClcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJGYWlsZWQgdG8gaW5pdGlhbGl6ZS90ZXN0IGVtYmVkZGluZ3Mgd2l0aCBtb2RlbCAne2VmZmVjdGl2ZV9lbWJlZGRpbmdfbW9kZWx9Jzoge2V9XCIpXG5cbiAgICBwcmludChmXCJ7QkNvbG9ycy5ESU19REVCVUc6IFNldHRpbmcgdXAgRkFJU1MgaW5kZXggZm9yIGFnZW50ICd7bmFtZX0nIChkaW06IHtkaW19KS4gVXNpbmcgSW5uZXIgUHJvZHVjdCAoZm9yIENvc2luZSkue0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICB0cnk6XG4gICAgICAgIGluZGV4ID0gZmFpc3MuSW5kZXhGbGF0SVAoZGltKVxuICAgICAgICB2ZWN0b3JzdG9yZSA9IEZBSVNTKFxuICAgICAgICAgICAgZW1iZWRkaW5nX2Z1bmN0aW9uPWFnZW50X2VtYmVkZGluZ3MsXG4gICAgICAgICAgICBpbmRleD1pbmRleCxcbiAgICAgICAgICAgIGRvY3N0b3JlPUluTWVtb3J5RG9jc3RvcmUoe30pLFxuICAgICAgICAgICAgaW5kZXhfdG9fZG9jc3RvcmVfaWQ9e30sXG4gICAgICAgICAgICBub3JtYWxpemVfTDI9VHJ1ZSxcbiAgICAgICAgICAgIGRpc3RhbmNlX3N0cmF0ZWd5PURpc3RhbmNlU3RyYXRlZ3kuTUFYX0lOTkVSX1BST0RVQ1RcbiAgICAgICAgKVxuICAgICAgICByZXRyaWV2ZXIgPSBUaW1lV2VpZ2h0ZWRWZWN0b3JTdG9yZVJldHJpZXZlcihcbiAgICAgICAgICAgIHZlY3RvcnN0b3JlPXZlY3RvcnN0b3JlLCBrPTE1LCBkZWNheV9yYXRlPTAuMDFcbiAgICAgICAgKVxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuRkFJTH1FUlJPUl9TVEFDS1RSQUNFOiBGYWlsZWQgZHVyaW5nIEZBSVNTIHNldHVwIGZvciBhZ2VudCAne25hbWV9Jzoge2V9e0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICAgICAgdHJhY2ViYWNrLnByaW50X2V4YygpXG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZlwiRmFpbGVkIGR1cmluZyBGQUlTUyBzZXR1cDoge2V9XCIpXG5cbiAgICBwcmludChmXCJ7QkNvbG9ycy5ESU19REVCVUc6IFNldHRpbmcgdXAgR2VuZXJhdGl2ZUFnZW50TWVtb3J5IGZvciBhZ2VudCAne25hbWV9Jy4uLntCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgdHJ5OlxuICAgICAgICBhY3R1YWxfcmVmbGVjdF9mb3JfbWVtb3J5ID0gZmxvYXQocmVmbGVjdGlvbl90aHJlc2hvbGQpIGlmIHJlZmxlY3Rpb25fdGhyZXNob2xkID4gMCBlbHNlIE5vbmVcbiAgICAgICAgbWVtb3J5X2luc3RhbmNlID0gR2VuZXJhdGl2ZUFnZW50TWVtb3J5KFxuICAgICAgICAgICAgbGxtPWFnZW50X2xsbSxcbiAgICAgICAgICAgIG1lbW9yeV9yZXRyaWV2ZXI9cmV0cmlldmVyLFxuICAgICAgICAgICAgcmVmbGVjdGlvbl90aHJlc2hvbGQ9YWN0dWFsX3JlZmxlY3RfZm9yX21lbW9yeSxcbiAgICAgICAgICAgIHZlcmJvc2U9dmVyYm9zZSxcbiAgICAgICAgKVxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuRkFJTH1FUlJPUl9TVEFDS1RSQUNFOiBGYWlsZWQgZHVyaW5nIEdlbmVyYXRpdmVBZ2VudE1lbW9yeSBzZXR1cCBmb3IgYWdlbnQgJ3tuYW1lfSc6IHtlfXtCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgICAgIHRyYWNlYmFjay5wcmludF9leGMoKVxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTUwMCwgZGV0YWlsPWZcIkZhaWxlZCBkdXJpbmcgR2VuZXJhdGl2ZUFnZW50TWVtb3J5IHNldHVwOiB7ZX1cIilcbi4uLlxuUGF0aDogc2NoZW1hcy5weVxuIyBGaWxlOiBzY2hlbWFzLnB5XG5mcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwsIExpc3QsIERpY3QsIEFueVxuZnJvbSBweWRhbnRpYyBpbXBvcnQgQmFzZU1vZGVsLCBGaWVsZFxuXG5jbGFzcyBDcmVhdGVBZ2VudFJlcShCYXNlTW9kZWwpOlxuICAgIG5hbWU6IHN0clxuICAgIGFnZTogaW50XG4gICAgdHJhaXRzOiBzdHJcbiAgICBzdGF0dXM6IHN0clxuICAgIGFnZW50X2lkOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuICAgIHN1bW1hcnlfcmVmcmVzaF9zZWNvbmRzOiBpbnQgPSBGaWVsZChkZWZhdWx0PTM2MDAsIGdlPTApXG4gICAgcmVmbGVjdGlvbl90aHJlc2hvbGQ6IGludCA9IEZpZWxkKGRlZmF1bHQ9MCwgZ2U9MClcbiAgICB2ZXJib3NlOiBib29sID0gRmFsc2VcbiAgICBtb2RlbF9uYW1lOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuICAgIGVtYmVkZGluZ19tb2RlbF9uYW1lOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuXG5jbGFzcyBHZW5lcmF0ZVJlc3BvbnNlUmVxKEJhc2VNb2RlbCk6XG4gICAgcHJvbXB0OiBzdHJcbiAgICBrOiBPcHRpb25hbFtpbnRdID0gRmllbGQoZGVmYXVsdD1Ob25lLCBndD0wKVxuXG5jbGFzcyBHZW5lcmF0ZVJlYWN0aW9uUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBhZ2VudF9uYW1lOiBzdHJcbiAgICByZWFjdGlvbl90eXBlOiBzdHIgIyBTQVksIFRISU5LLCBETywgSUdOT1JFLCBVTktOT1dOXG4gICAgY29udGVudDogc3RyXG4gICAgb2JzZXJ2YXRpb25fd2FzX2ltcG9ydGFudDogYm9vbFxuXG5jbGFzcyBBZGRNZW1vcnlSZXEoQmFzZU1vZGVsKTpcbiAgICB0ZXh0X3RvX21lbW9yaXplOiBzdHJcblxuY2xhc3MgRmV0Y2hNZW1vcmllc1JlcShCYXNlTW9kZWwpOlxuICAgIG9ic2VydmF0aW9uOiBzdHJcbiAgICBrOiBPcHRpb25hbFtpbnRdID0gRmllbGQoZGVmYXVsdD1Ob25lLCBndD0wKVxuXG5jbGFzcyBVcGRhdGVTdGF0dXNSZXEoQmFzZU1vZGVsKTpcbiAgICBuZXdfc3RhdHVzOiBzdHJcblxuY2xhc3MgQWdlbnREZXRhaWwoQmFzZU1vZGVsKTpcbiAgICBhZ2VudF9pZDogc3RyXG4gICAgbmFtZTogc3RyXG4gICAgc3RhdHVzOiBzdHJcbiAgICBsbG1fbW9kZWw6IHN0clxuICAgIGVtYmVkZGluZ19tb2RlbDogc3RyXG5cbmNsYXNzIEFnZW50TGlzdFJlc3BvbnNlKEJhc2VNb2RlbCk6XG4gICAgYWdlbnRzOiBMaXN0W0FnZW50RGV0YWlsXVxuXG5jbGFzcyBBZ2VudENyZWF0aW9uUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBhZ2VudF9pZDogc3RyXG4gICAgbmFtZTogc3RyXG4gICAgbGxtX21vZGVsX3VzZWQ6IHN0clxuICAgIGVtYmVkZGluZ19tb2RlbF91c2VkOiBzdHJcblxuY2xhc3MgU2ltcGxlU3RhdHVzUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBzdGF0dXM6IHN0clxuICAgIG1lc3NhZ2U6IE9wdGlvbmFsW3N0cl0gPSBOb25lXG5cbmNsYXNzIEFkZGVkTWVtb3J5UmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBzdGF0dXM6IHN0clxuICAgIGFkZGVkX21lbW9yeTogc3RyXG5cbmNsYXNzIEZldGNoZWRNZW1vcmllc0RvY3VtZW50KEJhc2VNb2RlbCk6XG4gICAgY29udGVudDogc3RyXG4gICAgbWV0YWRhdGE6IERpY3Rbc3RyLCBBbnldXG4gICAgcmVsZXZhbmNlX3Njb3JlOiBmbG9hdFxuXG5jbGFzcyBGZXRjaGVkTWVtb3JpZXNSZXNwb25zZShCYXNlTW9kZWwpOlxuICAgIG1lbW9yaWVzOiBMaXN0W0ZldGNoZWRNZW1vcmllc0RvY3VtZW50XVxuLi4uXG5QYXRoOiBwcm9tcHRzLnB5XG4jIEZpbGU6IHByb21wdHMucHlcblxuIyAtLS0gQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudCBQcm9tcHRzIC0tLVxuXG5ERUNJU0lPTl9URU1QTEFURSA9IChcbiAgICBcIllvdSBhcmUge2FnZW50X25hbWV9LlxcblwiXG4gICAgXCJZb3VyIGNvcmUgY2hhcmFjdGVyaXN0aWNzIGFyZToge2FnZW50X3RyYWl0c31cXG5cIlxuICAgIFwiSXQgaXMge2N1cnJlbnRfdGltZX0uXFxuXCJcbiAgICBcIllvdXIgc3RhdHVzIGlzOiB7YWdlbnRfc3RhdHVzfVxcblwiXG4gICAgXCJZb3Ugb2JzZXJ2ZToge29ic2VydmF0aW9ufVxcblwiXG4gICAgXCJSZWxldmFudCByZWNlbnQgbWVtb3JpZXM6XFxue21lbW9yeV9jb250ZXh0fVxcblxcblwiXG4gICAgXCJDb25zaWRlcmluZyB5b3VyIHBlcnNvbmFsaXR5IChlc3BlY2lhbGx5IHRyYWl0cyBsaWtlIHthZ2VudF90cmFpdHN9KSwgdGhlIG9ic2VydmF0aW9uLCBhbmQgcmVjZW50IG1lbW9yaWVzLCBcIlxuICAgIFwid2hhdCBpcyB0aGUgKm1vc3QgbGlrZWx5IHR5cGUqIG9mIGltbWVkaWF0ZSByZWFjdGlvbiB5b3Ugd291bGQgaGF2ZT8gQ2hvb3NlICpvbmUqIGZyb206IFwiXG4gICAgXCInU0FZJyAoc3BlYWsgYWxvdWQpLCAnVEhJTksnIChpbnRlcm5hbCB0aG91Z2h0IG9ubHkpLCAnRE8nIChwZXJmb3JtIGEgcGh5c2ljYWwgYWN0aW9uKSwgJ0lHTk9SRScgKG5vIHNpZ25pZmljYW50IHJlYWN0aW9uLCByZW1haW4gaW4gY3VycmVudCBzdGF0dXMpLlwiXG4gICAgXCJcXG5SZWFjdGlvbiBUeXBlIENob2ljZTpcIlxuKVxuXG5USE9VR0hUX1RFTVBMQVRFID0gKFxuICAgIFwiWW91IGFyZSB7YWdlbnRfbmFtZX0uXFxuXCJcbiAgICBcIllvdXIgY29yZSBjaGFyYWN0ZXJpc3RpY3MgYXJlOiB7YWdlbnRfdHJhaXRzfVxcblwiXG4gICAgXCJJdCBpcyB7Y3VycmVudF90aW1lfS5cXG5cIlxuICAgIFwiWW91ciBzdGF0dXMgaXM6IHthZ2VudF9zdGF0dXN9XFxuXCJcbiAgICBcIllvdSBvYnNlcnZlOiB7b2JzZXJ2YXRpb259XFxuXCJcbiAgICBcIlJlbGV2YW50IHJlY2VudCBtZW1vcmllczpcXG57bWVtb3J5X2NvbnRleHR9XFxuXCJcbiAgICBcIlJlbGF0aW9uc2hpcCBjb250ZXh0OiB7cmVsYXRpb25zaGlwX2NvbnRleHR9XFxuXFxuXCJcbiAgICBcIkNvbnNpZGVyaW5nIHlvdXIgcGVyc29uYWxpdHkgYW5kIHRoZSBzaXR1YXRpb24sIHdoYXQgaXMgeW91ciAqaW50ZXJuYWwgdGhvdWdodCogb3IgKmFzc2Vzc21lbnQqIHJpZ2h0IG5vdyBpbiByZXNwb25zZSB0byB0aGUgb2JzZXJ2YXRpb24/IFwiXG4gICAgXCJEZXNjcmliZSB0aGUgdGhvdWdodCBjb25jaXNlbHkuIERvICpub3QqIGRlc2NyaWJlIGFjdGlvbnMgb3Igc3BlZWNoLiBFeGFtcGxlOiAoSW50ZXJuYWwgdGhvdWdodCkgVGhhdCBzZWVtcyBzdXNwaWNpb3VzLlwiXG4gICAgXCJcXG5JbnRlcm5hbCBUaG91Z2h0OlwiXG4pXG5cbkFDVElPTl9URU1QTEFURSA9IChcbiAgICBcIllvdSBhcmUge2FnZW50X25hbWV9LlxcblwiXG4gICAgXCJZb3VyIGNvcmUgY2hhcmFjdGVyaXN0aWNzIGFyZToge2FnZW50X3RyYWl0c31cXG5cIlxuICAgIFwiSXQgaXMge2N1cnJlbnRfdGltZX0uXFxuXCJcbiAgICBcIllvdXIgc3RhdHVzIGlzOiB7YWdlbnRfc3RhdHVzfVxcblwiXG4gICAgXCJZb3Ugb2JzZXJ2ZToge29ic2VydmF0aW9ufVxcblwiXG4gICAgXCJSZWxldmFudCByZWNlbnQgbWVtb3JpZXM6XFxue21lbW9yeV9jb250ZXh0fVxcblwiXG4gICAgXCJSZWxhdGlvbnNoaXAgY29udGV4dDoge3JlbGF0aW9uc2hpcF9jb250ZXh0fVxcblxcblwiXG4gICAgXCJDb25zaWRlcmluZyB5b3VyIHBlcnNvbmFsaXR5IGFuZCB0aGUgc2l0dWF0aW9uLCB3aGF0ICpwaHlzaWNhbCBhY3Rpb24qIGRvIHlvdSB0YWtlIGluIGltbWVkaWF0ZSByZXNwb25zZSB0byB0aGUgb2JzZXJ2YXRpb24/IFwiXG4gICAgXCJEZXNjcmliZSB0aGUgYWN0aW9uIGNvbmNpc2VseSBhcyBpZiBuYXJyYXRpbmcgaXQuIEV4YW1wbGU6IEkgc2hpZnQgbXkgd2VpZ2h0IHVuZWFzaWx5LiAvIEkgZHJhdyBteSBzd29yZC5cIlxuICAgIFwiXFxuQWN0aW9uIFRha2VuOlwiXG4pXG4uLi5cblxuRU5USVRZX0FDVElPTl9URU1QTEFURSA9IChcbiAgICBcIkJhc2VkIG9uIHRoZSBmb2xsb3dpbmcgb2JzZXJ2YXRpb24sIHdoYXQgaXMge2VudGl0eX0gZG9pbmc/IERlc2NyaWJlIHRoZWlyIGFjdGlvbnMgY29uY2lzZWx5LlxcblxcblwiXG4gICAgXCJPYnNlcnZhdGlvbjoge29ic2VydmF0aW9ufVxcblxcblwiXG4gICAgXCJXaGF0IHtlbnRpdHl9IGlzIGRvaW5nOlwiXG4pXG5cblJFTEFUSU9OU0hJUF9TVU1NQVJZX1RFTVBMQVRFID0gKFxuICAgIFwiQmFzZWQgb24geW91ciBtZW1vcmllcywgd2hhdCBpcyB5b3VyIHJlbGF0aW9uc2hpcCBvciBrbm93bGVkZ2UgYWJvdXQge2VudGl0eV9uYW1lfT9cXG5cIlxuICAgIFwiQ29uc2lkZXI6XFxuXCJcbiAgICBcIjEuIEhhdmUgeW91IG1ldCB7ZW50aXR5X25hbWV9IGJlZm9yZT9cXG5cIlxuICAgIFwiMi4gRG8geW91IGhhdmUgYW55IGhpc3Rvcnkgd2l0aCB7ZW50aXR5X25hbWV9P1xcblwiXG4gICAgXCIzLiBEbyB5b3UgaGF2ZSBhbnkgZmVlbGluZ3Mgb3Igb3BpbmlvbnMgYWJvdXQge2VudGl0eV9uYW1lfT9cXG5cIlxuICAgIFwiNC4gSXMgdGhlcmUgYW55dGhpbmcgbm90YWJsZSBhYm91dCB7ZW50aXR5X25hbWV9P1xcblxcblwiXG4gICAgXCJDb250ZXh0IGZyb20geW91ciBtZW1vcmllczpcXG57cmVsZXZhbnRfbWVtb3JpZXN9XFxuXFxuXCJcbiAgICBcIkN1cnJlbnQgb2JzZXJ2YXRpb246IHtlbnRpdHlfbmFtZX0gaXMge2VudGl0eV9hY3Rpb259XFxuXFxuXCJcbiAgICBcIlJlbGF0aW9uc2hpcCB3aXRoIHtlbnRpdHlfbmFtZX0gKGJlIGNvbmNpc2UsIGlmIG5vIHJlbGF0aW9uc2hpcCBleGlzdHMsIHN0YXRlIHRoYXQgY2xlYXJseSk6XCJcbilcblxuUE9JR05BTkNZX1NDT1JJTkdfRkFMTEJBQ0tfVEVNUExBVEUgPSAoXG4gICAgXCJSYXRlIHRoZSBwb2lnbmFuY3kgb2YgdGhpcyBvYnNlcnZhdGlvbiBvbiBhIHNjYWxlIG9mIDEgdG8gMTAgKGludGVnZXIpOiB7b2JzZXJ2YXRpb259XFxuUmF0aW5nOlwiXG4pXG4uLi5cblBhdGg6IHJlcXVpcmVtZW50cy50eHRcbiMgY29yZSB3ZWIgZnJhbWV3b3JrXG5mYXN0YXBpW2FsbF1cblxuIyBMYW5nQ2hhaW4gcHJpbWl0aXZlc1xubGFuZ2NoYWlufj0wLjIgICAgICAgICAgIyBjb3JlXG5sYW5nY2hhaW4tZXhwZXJpbWVudGFsfj0wLjIgICMgY29udGFpbnMgZ2VuZXJhdGl2ZV9hZ2VudHNcbmxhbmdjaGFpbi1jb21tdW5pdHl+PTAuMlxubGFuZ2NoYWluLW9wZW5haX49MC4xICAjIGhvdXNlcyBDaGF0T3BlbkFJICYgT3BlbkFJRW1iZWRkaW5nc1xuXG4jIExMTSArIGVtYmVkZGluZ3MgKHBpY2sgdGhlIHByb3ZpZGVyIHlvdeKAmWxsIHJlYWxseSB1c2UpXG5vcGVuYWk+PTEuMjUuMFxudGlrdG9rZW4+PTAuNi4wXG5cbiMgc2ltcGxlIGlu4oCRcHJvY2VzcyB2ZWN0b3Igc3RvcmUgZm9yIGFnZW50IG1lbW9yeVxuZmFpc3MtY3B1Pj0xLjguMFxuLi4uXG5QYXRoOiBtYWluLnB5XG4uLi5cblxuIyAtLS0gQVBJIEtleSBDaGVjayAtLS1cbmlmIG5vdCBPUEVOQUlfQVBJX0tFWV9TRVQ6XG4gICAgcHJpbnQoZlwie0JDb2xvcnMuRkFJTH1DUklUSUNBTF9XQVJOSU5HOiBPUEVOQUlfQVBJX0tFWSBlbnZpcm9ubWVudCB2YXJpYWJsZSBpcyBOT1QgU0VULiBPcGVuQUkgY2FsbHMgbGlrZWx5IGZhaWwue0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbmVsc2U6XG4gICAgcHJpbnQoZlwie0JDb2xvcnMuT0tHUkVFTn1ERUJVRzogT1BFTkFJX0FQSV9LRVkgZW52aXJvbm1lbnQgdmFyaWFibGUgaXMgZGV0ZWN0ZWQue0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcblxuXG4jIC0tLSBIZWFsdGggQ2hlY2sgLS0tXG5AYXBwLmdldChcIi9cIilcbmFzeW5jIGRlZiBoZWFsdGhfY2hlY2soKTpcbiAgICBwcmludChmXCJ7QkNvbG9ycy5PS0dSRUVOfURFQlVHOiBIZWFsdGggY2hlY2sgJy8nIGVuZHBvaW50IGhpdC57QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgIHJldHVybiB7Li4uIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxNmhnY2RyVDQxbnoxYjlEc1Bia3F5YSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkM6L1VzZXJzL1Ryb24vRG9jdW1lbnRzL0dpdEh1Yi9mYXN0YXBpIiwiZm9sZGVyUm9vdCI6IkM6L1VzZXJzL1Ryb24vRG9jdW1lbnRzL0dpdEh1Yi9mYXN0YXBpIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0wOFQxMToyNToyNC42MDdaIn0seyJyZXF1ZXN0X2lkIjoiZDM2NjMyZjItMTUzOC00ZjYwLWIzZjAtNDE5ZTc0NThjMzQ0Iiwic3RhdHVzIjoiY2FuY2VsbGVkIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy10dXJuLWRlbGltaXRlciJ9LHsicmVxdWVzdF9pZCI6IjEwMmY2ZjQxLTM3MmYtNDBiOS04NjMyLTA2MDVkNjg2YjYwYSIsInN0YXR1cyI6ImNhbmNlbGxlZCIsImNoYXRJdGVtVHlwZSI6ImFnZW50aWMtdHVybi1kZWxpbWl0ZXIifSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiNDZlN2I3MmMtNmJhMC00NjIxLWE4OGItM2I4NWQwODM3Zjg1IiwicmVxdWVzdF9tZXNzYWdlIjoiYnV0IGluIHRoZSBvcGVuIGFpIGxvZyBpbmRpY2F0ZSBpdCBkb2VzIHJldHVybiBhbiBhbnN3ZXIsIGl0cyBqdXN0IG5vdCBkaXNwbGF5ZWQgaW4gdGhlIGxvZ3Mgb2YgdGhlIHdlYnNlcnZpY2U6IElucHV0XHJcbjk0dFxyXG51c2VyXHJcbk9uIHRoZSBzY2FsZSBvZiAxIHRvIDEwLCB3aGVyZSAxIGlzIHB1cmVseSBtdW5kYW5lIChlLmcuLCBicnVzaGluZyB0ZWV0aCwgbWFraW5nIGJlZCkgYW5kIDEwIGlzIGV4dHJlbWVseSBwb2lnbmFudCAoZS5nLiwgYSBicmVhayB1cCwgY29sbGVnZSBhY2NlcHRhbmNlKSwgcmF0ZSB0aGUgbGlrZWx5IHBvaWduYW5jeSBvZiB0aGUgZm9sbG93aW5nIHBpZWNlIG9mIG1lbW9yeS4gUmVzcG9uZCB3aXRoIGEgc2luZ2xlIGludGVnZXIuIE1lbW9yeTogXCJJIHByZWZlciB0aGlzIHRhYmxlIG5lYXIgdGhlIGNvdW50ZXI7IGl0IG9mZmVycyBhIGdvb2QgdmlldyBvZiB0aGUgZW50cmFuY2UgYW5kIHRoZSByb29tLlwiIFJhdGluZzpcclxuT3V0cHV0XHJcbjJ0XHJcbmFzc2lzdGFudFxyXG4yIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6ImJ1dCBpbiB0aGUgb3BlbiBhaSBsb2cgaW5kaWNhdGUgaXQgZG9lcyByZXR1cm4gYW4gYW5zd2VyLCBpdHMganVzdCBub3QgZGlzcGxheWVkIGluIHRoZSBsb2dzIG9mIHRoZSB3ZWJzZXJ2aWNlOiBJbnB1dFxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiI5NHRcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoidXNlclxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJPbiB0aGUgc2NhbGUgb2YgMSB0byAxMCwgd2hlcmUgMSBpcyBwdXJlbHkgbXVuZGFuZSAoZS5nLiwgYnJ1c2hpbmcgdGVldGgsIG1ha2luZyBiZWQpIGFuZCAxMCBpcyBleHRyZW1lbHkgcG9pZ25hbnQgKGUuZy4sIGEgYnJlYWsgdXAsIGNvbGxlZ2UgYWNjZXB0YW5jZSksIHJhdGUgdGhlIGxpa2VseSBwb2lnbmFuY3kgb2YgdGhlIGZvbGxvd2luZyBwaWVjZSBvZiBtZW1vcnkuIFJlc3BvbmQgd2l0aCBhIHNpbmdsZSBpbnRlZ2VyLiBNZW1vcnk6IFwiSSBwcmVmZXIgdGhpcyB0YWJsZSBuZWFyIHRoZSBjb3VudGVyOyBpdCBvZmZlcnMgYSBnb29kIHZpZXcgb2YgdGhlIGVudHJhbmNlIGFuZCB0aGUgcm9vbS5cIiBSYXRpbmc6XHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ik91dHB1dFxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIydFxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJhc3Npc3RhbnRcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiMiJ9XX1dfSwibWVudGlvbmVkX2l0ZW1zIjpbXSwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxTTZvbmJHZHdSTGhqTXoyYjFLY2ZuRiIsInRvb2xfbmFtZSI6ImNvZGViYXNlLXJldHJpZXZhbCIsImlucHV0X2pzb24iOiJ7XCJpbmZvcm1hdGlvbl9yZXF1ZXN0XCI6IFwiRmluZCB0aGUgX3Njb3JlX21lbW9yeV9pbXBvcnRhbmNlIG1ldGhvZCBpbiB0aGUgR2VuZXJhdGl2ZUFnZW50TWVtb3J5IGNsYXNzIHRoYXQgaGFuZGxlcyByYXRpbmcgbWVtb3JpZXMgb24gYSBzY2FsZSBvZiAxLTEwLCBhbmQgYWxzbyBjaGVjayBob3cgbG9nZ2luZyBpcyBpbXBsZW1lbnRlZCBpbiB0aGlzIGNsYXNzXCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSSB1bmRlcnN0YW5kIHRoZSBpc3N1ZSBub3cuIFRoZSBMTE0gaXMgYWN0dWFsbHkgcmV0dXJuaW5nIGFuIGFuc3dlciAoaW4gdGhpcyBjYXNlLCBcIjJcIiksIGJ1dCBpdCdzIG5vdCBiZWluZyBkaXNwbGF5ZWQgcHJvcGVybHkgaW4geW91ciB3ZWIgc2VydmljZSBsb2dzLiBUaGlzIGlzIGxpa2VseSBhIGxvZ2dpbmcgaXNzdWUgcmF0aGVyIHRoYW4gYSBwcm9ibGVtIHdpdGggdGhlIGFjdHVhbCBmdW5jdGlvbmFsaXR5LlxuXG5MZXQncyBleGFtaW5lIHRoZSByZWxldmFudCBjb2RlIGluIHRoZSBgR2VuZXJhdGl2ZUFnZW50TWVtb3J5YCBjbGFzcyB0byBzZWUgaG93IHdlIGNhbiBpbXByb3ZlIHRoZSBsb2dnaW5nOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiJidXQgaW4gdGhlIG9wZW4gYWkgbG9nIGluZGljYXRlIGl0IGRvZXMgcmV0dXJuIGFuIGFuc3dlciwgaXRzIGp1c3Qgbm90IGRpc3BsYXllZCBpbiB0aGUgbG9ncyBvZiB0aGUgd2Vic2VydmljZTogSW5wdXRcclxuOTR0XHJcbnVzZXJcclxuT24gdGhlIHNjYWxlIG9mIDEgdG8gMTAsIHdoZXJlIDEgaXMgcHVyZWx5IG11bmRhbmUgKGUuZy4sIGJydXNoaW5nIHRlZXRoLCBtYWtpbmcgYmVkKSBhbmQgMTAgaXMgZXh0cmVtZWx5IHBvaWduYW50IChlLmcuLCBhIGJyZWFrIHVwLCBjb2xsZWdlIGFjY2VwdGFuY2UpLCByYXRlIHRoZSBsaWtlbHkgcG9pZ25hbmN5IG9mIHRoZSBmb2xsb3dpbmcgcGllY2Ugb2YgbWVtb3J5LiBSZXNwb25kIHdpdGggYSBzaW5nbGUgaW50ZWdlci4gTWVtb3J5OiBcIkkgcHJlZmVyIHRoaXMgdGFibGUgbmVhciB0aGUgY291bnRlcjsgaXQgb2ZmZXJzIGEgZ29vZCB2aWV3IG9mIHRoZSBlbnRyYW5jZSBhbmQgdGhlIHJvb20uXCIgUmF0aW5nOlxyXG5PdXRwdXRcclxuMnRcclxuYXNzaXN0YW50XHJcbjIifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJDOi9Vc2Vycy9Ucm9uL0RvY3VtZW50cy9HaXRIdWIvZmFzdGFwaSIsImZvbGRlclJvb3QiOiJDOi9Vc2Vycy9Ucm9uL0RvY3VtZW50cy9HaXRIdWIvZmFzdGFwaSJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMDhUMTE6MjY6MTYuMTQyWiIsInJlc3BvbnNlX3RleHQiOiJJIHVuZGVyc3RhbmQgdGhlIGlzc3VlIG5vdy4gVGhlIExMTSBpcyBhY3R1YWxseSByZXR1cm5pbmcgYW4gYW5zd2VyIChpbiB0aGlzIGNhc2UsIFwiMlwiKSwgYnV0IGl0J3Mgbm90IGJlaW5nIGRpc3BsYXllZCBwcm9wZXJseSBpbiB5b3VyIHdlYiBzZXJ2aWNlIGxvZ3MuIFRoaXMgaXMgbGlrZWx5IGEgbG9nZ2luZyBpc3N1ZSByYXRoZXIgdGhhbiBhIHByb2JsZW0gd2l0aCB0aGUgYWN0dWFsIGZ1bmN0aW9uYWxpdHkuXG5cbkxldCdzIGV4YW1pbmUgdGhlIHJlbGV2YW50IGNvZGUgaW4gdGhlIGBHZW5lcmF0aXZlQWdlbnRNZW1vcnlgIGNsYXNzIHRvIHNlZSBob3cgd2UgY2FuIGltcHJvdmUgdGhlIGxvZ2dpbmc6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiZGZhM2I3MDUtODEzYS00MGY1LTk4MzMtMWQ5OTNjODNlNzg0IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxVE1oUHhKYXRqbzQ0WHhyTXdxUXI2OSIsInRvb2xfbmFtZSI6IndlYi1zZWFyY2giLCJpbnB1dF9qc29uIjoie1wicXVlcnlcIjogXCJsYW5nY2hhaW4gR2VuZXJhdGl2ZUFnZW50TWVtb3J5IF9zY29yZV9tZW1vcnlfaW1wb3J0YW5jZSBtZXRob2RcIn0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJMZXQgbWUgY29udGludWUgc2VhcmNoaW5nIGZvciB0aGUgc3BlY2lmaWMgYF9zY29yZV9tZW1vcnlfaW1wb3J0YW5jZWAgbWV0aG9kOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogY3VzdG9tX2FnZW50LnB5XG4jIEZpbGU6IGN1c3RvbV9hZ2VudC5weVxuZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWVcbmZyb20gdHlwaW5nIGltcG9ydCBUdXBsZSwgT3B0aW9uYWwsIEFueVxuaW1wb3J0IHJlXG5cbmZyb20gbGFuZ2NoYWluX2V4cGVyaW1lbnRhbC5nZW5lcmF0aXZlX2FnZW50cy5nZW5lcmF0aXZlX2FnZW50IGltcG9ydCBHZW5lcmF0aXZlQWdlbnRcbmZyb20gbGFuZ2NoYWluLnByb21wdHMgaW1wb3J0IFByb21wdFRlbXBsYXRlXG5mcm9tIGxhbmdjaGFpbi5jaGFpbnMgaW1wb3J0IExMTUNoYWluXG5cbmZyb20gdXRpbHMgaW1wb3J0IEJDb2xvcnNcblxuY2xhc3MgQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudChHZW5lcmF0aXZlQWdlbnQpOlxuICAgIGRlZiBfX2luaXRfXyhzZWxmLCAqKmRhdGE6IEFueSk6XG4gICAgICAgIHN1cGVyKCkuX19pbml0X18oKipkYXRhKVxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5PS0dSRUVOfURFQlVHIChBZ2VudCB7c2VsZi5uYW1lfSk6IEluaXRpYWxpemVkIEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnQsIFwiXG4gICAgICAgICAgICAgIGZcInVzaW5nIGJhc2UgR2VuZXJhdGl2ZUFnZW50IGxvZ2ljLntCQ29sb3JzLkVOREN9XCIpXG5cbiAgICBkZWYgZ2V0X2ludGVycHJldGVkX3JlYWN0aW9uKHNlbGYsIG9ic2VydmF0aW9uOiBzdHIsIG5vdzogT3B0aW9uYWxbZGF0ZXRpbWVdID0gTm9uZSkgLT4gVHVwbGVbc3RyLCBzdHIsIGJvb2xdOlxuICAgICAgICBjYWxsX3RpbWUgPSBub3cgb3IgZGF0ZXRpbWUubm93KClcbiAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuRElNfURFQlVHIChBZ2VudCB7c2VsZi5uYW1lfSk6IENhbGxpbmcgcGFyZW50J3MgZ2VuZXJhdGVfcmVhY3Rpb24gZm9yOiAne29ic2VydmF0aW9uWzo1MF19Li4uJ3tCQ29sb3JzLkVOREN9XCIpXG5cbiAgICAgICAgaXNfZGlhbG9ndWVfZmxhZywgcmVzdWx0X3N0ciA9IHN1cGVyKCkuZ2VuZXJhdGVfcmVhY3Rpb24ob2JzZXJ2YXRpb24sIG5vdz1jYWxsX3RpbWUpXG5cbiAgICAgICAgZXN0aW1hdGVkX29ic2VydmF0aW9uX2ltcG9ydGFuY2UgPSBGYWxzZVxuICAgICAgICB0cnk6XG4gICAgICAgICAgICBpZiBzZWxmLmxsbTpcbiAgICAgICAgICAgICAgICBwb2lnbmFuY3lfcHJvbXB0X3N0ciA9IChcbiAgICAgICAgICAgICAgICAgICAgXCJJcyB0aGUgZm9sbG93aW5nIG9ic2VydmF0aW9uIG11bmRhbmUgKGUuZy4sIGJydXNoaW5nIHRlZXRoKSBvciBwb2lnbmFudCAoZS5nLiwgYSBtYWpvciBsaWZlIGV2ZW50KT8gXCJcbiAgICAgICAgICAgICAgICAgICAgXCJBbnN3ZXIgd2l0aCAnbXVuZGFuZScgb3IgJ3BvaWduYW50Jy5cXG5PYnNlcnZhdGlvbjoge29ic2VydmF0aW9uX3RleHR9XFxuQW5zd2VyOlwiXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIHByb21wdCA9IFByb21wdFRlbXBsYXRlLmZyb21fdGVtcGxhdGUocG9pZ25hbmN5X3Byb21wdF9zdHIpXG4gICAgICAgICAgICAgICAgY2hhaW4gPSBMTE1DaGFpbihsbG09c2VsZi5sbG0sIHByb21wdD1wcm9tcHQpXG4gICAgICAgICAgICAgICAgcG9pZ25hbmN5X3Jlc3VsdCA9IGNoYWluLnJ1bihvYnNlcnZhdGlvbl90ZXh0PW9ic2VydmF0aW9uKS5zdHJpcCgpLmxvd2VyKClcbiAgICAgICAgICAgICAgICBpZiBcInBvaWduYW50XCIgaW4gcG9pZ25hbmN5X3Jlc3VsdDpcbiAgICAgICAgICAgICAgICAgICAgZXN0aW1hdGVkX29ic2VydmF0aW9uX2ltcG9ydGFuY2UgPSBUcnVlXG4gICAgICAgICAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuRElNfURFQlVHIChBZ2VudCB7c2VsZi5uYW1lfSk6IE9ic2VydmF0aW9uIHBvaWduYW5jeSBlc3RpbWF0ZWQgYXMgJ3twb2lnbmFuY3lfcmVzdWx0fScsIEFQSSBpbXBvcnRhbnQgZmxhZzoge2VzdGltYXRlZF9vYnNlcnZhdGlvbl9pbXBvcnRhbmNlfXtCQ29sb3JzLkVOREN9XCIpXG4gICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZV9wb2lnbmFuY3k6XG4gICAgICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5XQVJOSU5HfVdBUk4gKEFnZW50IHtzZWxmLm5hbWV9KTogQ291bGQgbm90IGVzdGltYXRlIG9ic2VydmF0aW9uIHBvaWduYW5jeSBmb3IgQVBJIGZsYWc6IHtlX3BvaWduYW5jeX17QkNvbG9ycy5FTkRDfVwiKVxuXG4gICAgICAgIGNvbnRlbnQgPSBzZWxmLl9jbGVhbl9yZXNwb25zZShyZXN1bHRfc3RyKVxuXG4gICAgICAgIGlmIGlzX2RpYWxvZ3VlX2ZsYWc6XG4gICAgICAgICAgICBhY3R1YWxfZGlhbG9ndWUgPSBjb250ZW50W2xlbihcInNhaWQgXCIpOl0uc3RyaXAoKSBpZiBjb250ZW50Lmxvd2VyKCkuc3RhcnRzd2l0aChcInNhaWQgXCIpIGVsc2UgY29udGVudFxuICAgICAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuT0tCTFVFfURFQlVHIChBZ2VudCB7c2VsZi5uYW1lfSk6IEludGVycHJldGVkIGFzIFNBWSwgQ29udGVudDogJ3thY3R1YWxfZGlhbG9ndWV9J3tCQ29sb3JzLkVOREN9XCIpXG4gICAgICAgICAgICByZXR1cm4gXCJTQVlcIiwgYWN0dWFsX2RpYWxvZ3VlLCBlc3RpbWF0ZWRfb2JzZXJ2YXRpb25faW1wb3J0YW5jZVxuICAgICAgICBlbHNlOlxuICAgICAgICAgICAgaWYgbm90IGNvbnRlbnQuc3RyaXAoKSBvciBjb250ZW50Lmxvd2VyKCkgPT0gXCJub25lXCI6XG4gICAgICAgICAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuRElNfURFQlVHIChBZ2VudCB7c2VsZi5uYW1lfSk6IEludGVycHJldGVkIGFzIElHTk9SRS57QkNvbG9ycy5FTkRDfVwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBcIklHTk9SRVwiLCBcIlwiLCBlc3RpbWF0ZWRfb2JzZXJ2YXRpb25faW1wb3J0YW5jZVxuICAgICAgICAgICAgZWxzZTpcbiAgICAgICAgICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5PS0dSRUVOfURFQlVHIChBZ2VudCB7c2VsZi5uYW1lfSk6IEludGVycHJldGVkIGFzIERPIChyZWFjdGlvbiksIENvbnRlbnQ6ICd7Y29udGVudH0ne0JDb2xvcnMuRU5EQ31cIilcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJET1wiLCBjb250ZW50LCBlc3RpbWF0ZWRfb2JzZXJ2YXRpb25faW1wb3J0YW5jZVxuLi4uXG5QYXRoOiBhZ2VudF9mYWN0b3J5LnB5XG4jIEZpbGU6IGFnZW50X2ZhY3RvcnkucHlcbmltcG9ydCB0cmFjZWJhY2tcbmZyb20gdHlwaW5nIGltcG9ydCBPcHRpb25hbFxuXG5pbXBvcnQgZmFpc3NcbmZyb20gZmFzdGFwaSBpbXBvcnQgSFRUUEV4Y2VwdGlvblxuZnJvbSBsYW5nY2hhaW5fb3BlbmFpIGltcG9ydCBDaGF0T3BlbkFJLCBPcGVuQUlFbWJlZGRpbmdzXG5mcm9tIGxhbmdjaGFpbl9jb21tdW5pdHkudmVjdG9yc3RvcmVzIGltcG9ydCBGQUlTU1xuZnJvbSBsYW5nY2hhaW5fY29tbXVuaXR5LmRvY3N0b3JlLmluX21lbW9yeSBpbXBvcnQgSW5NZW1vcnlEb2NzdG9yZVxuZnJvbSBsYW5nY2hhaW4ucmV0cmlldmVycyBpbXBvcnQgVGltZVdlaWdodGVkVmVjdG9yU3RvcmVSZXRyaWV2ZXJcbmZyb20gbGFuZ2NoYWluX2V4cGVyaW1lbnRhbC5nZW5lcmF0aXZlX2FnZW50cyBpbXBvcnQgR2VuZXJhdGl2ZUFnZW50TWVtb3J5XG5mcm9tIGxhbmdjaGFpbl9jb21tdW5pdHkudmVjdG9yc3RvcmVzLnV0aWxzIGltcG9ydCBEaXN0YW5jZVN0cmF0ZWd5XG5cbmZyb20gY3VzdG9tX2FnZW50IGltcG9ydCBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50XG5mcm9tIHV0aWxzIGltcG9ydCBCQ29sb3JzXG5mcm9tIGNvbmZpZyBpbXBvcnQgREVGQVVMVF9DSEFUX01PREVMLCBERUZBVUxUX0VNQkVERElOR19NT0RFTFxuXG5cbmRlZiBjcmVhdGVfbmV3X2FnZW50X2luc3RhbmNlKFxuICAgIG5hbWU6IHN0cixcbiAgICBhZ2U6IGludCxcbiAgICB0cmFpdHM6IHN0cixcbiAgICBzdGF0dXM6IHN0cixcbiAgICBzdW1tYXJ5X3JlZnJlc2hfc2Vjb25kczogaW50LFxuICAgIHJlZmxlY3Rpb25fdGhyZXNob2xkOiBpbnQsXG4gICAgdmVyYm9zZTogYm9vbCxcbiAgICBsbG1fbW9kZWxfbmFtZTogT3B0aW9uYWxbc3RyXSA9IE5vbmUsXG4gICAgZW1iZWRkaW5nX21vZGVsX25hbWU6IE9wdGlvbmFsW3N0cl0gPSBOb25lXG4pIC0+IEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnQ6XG4gICAgcHJpbnQoZlwie0JDb2xvcnMuT0tCTFVFfURFQlVHOiBjcmVhdGVfbmV3X2FnZW50X2luc3RhbmNlIGNhbGxlZCBmb3IgYWdlbnQgJ3tCQ29sb3JzLkJPTER9e25hbWV9e0JDb2xvcnMuRU5EQ317QkNvbG9ycy5PS0JMVUV9J3tCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG5cbiAgICBlZmZlY3RpdmVfbGxtX21vZGVsID0gbGxtX21vZGVsX25hbWUgaWYgbGxtX21vZGVsX25hbWUgYW5kIGxsbV9tb2RlbF9uYW1lLnN0cmlwKCkgZWxzZSBERUZBVUxUX0NIQVRfTU9ERUxcbiAgICB0cnk6XG4gICAgICAgIGFnZW50X2xsbSA9IENoYXRPcGVuQUkobW9kZWxfbmFtZT1lZmZlY3RpdmVfbGxtX21vZGVsLCB0ZW1wZXJhdHVyZT0wLjcpXG4gICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5GQUlMfUVSUk9SX1NUQUNLVFJBQ0U6IEZhaWxlZCB0byBpbml0aWFsaXplIExMTSBmb3IgYWdlbnQgJ3tuYW1lfScgd2l0aCBtb2RlbCAne2VmZmVjdGl2ZV9sbG1fbW9kZWx9Jzoge2V9e0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICAgICAgdHJhY2ViYWNrLnByaW50X2V4YygpXG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZlwiRmFpbGVkIHRvIGluaXRpYWxpemUgTExNIHdpdGggbW9kZWwgJ3tlZmZlY3RpdmVfbGxtX21vZGVsfSc6IHtlfVwiKVxuXG4gICAgZWZmZWN0aXZlX2VtYmVkZGluZ19tb2RlbCA9IGVtYmVkZGluZ19tb2RlbF9uYW1lIGlmIGVtYmVkZGluZ19tb2RlbF9uYW1lIGFuZCBlbWJlZGRpbmdfbW9kZWxfbmFtZS5zdHJpcCgpIGVsc2UgREVGQVVMVF9FTUJFRERJTkdfTU9ERUxcbiAgICBkaW0gPSAwXG4gICAgdHJ5OlxuICAgICAgICBhZ2VudF9lbWJlZGRpbmdzID0gT3BlbkFJRW1iZWRkaW5ncyhtb2RlbD1lZmZlY3RpdmVfZW1iZWRkaW5nX21vZGVsKVxuICAgICAgICBwcm9iZV9mb3JfZGltID0gYWdlbnRfZW1iZWRkaW5ncy5lbWJlZF9xdWVyeShcImdldF9kaW1fcHJvYmVfZm9yX2FnZW50XCIpXG4gICAgICAgIGRpbSA9IGxlbihwcm9iZV9mb3JfZGltKVxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuRkFJTH1FUlJPUl9TVEFDS1RSQUNFOiBGYWlsZWQgdG8gaW5pdGlhbGl6ZSBvciB0ZXN0IE9wZW5BSUVtYmVkZGluZ3MgZm9yIGFnZW50ICd7bmFtZX0nIHdpdGggbW9kZWwgJ3tlZmZlY3RpdmVfZW1iZWRkaW5nX21vZGVsfSc6IHtlfXtCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgICAgIHRyYWNlYmFjay5wcmludF9leGMoKVxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTUwMCwgZGV0YWlsPWZcIkZhaWxlZCB0byBpbml0aWFsaXplL3Rlc3QgZW1iZWRkaW5ncyB3aXRoIG1vZGVsICd7ZWZmZWN0aXZlX2VtYmVkZGluZ19tb2RlbH0nOiB7ZX1cIilcblxuICAgIHByaW50KGZcIntCQ29sb3JzLkRJTX1ERUJVRzogU2V0dGluZyB1cCBGQUlTUyBpbmRleCBmb3IgYWdlbnQgJ3tuYW1lfScgKGRpbToge2RpbX0pLiBVc2luZyBJbm5lciBQcm9kdWN0IChmb3IgQ29zaW5lKS57QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgIHRyeTpcbiAgICAgICAgaW5kZXggPSBmYWlzcy5JbmRleEZsYXRJUChkaW0pXG4gICAgICAgIHZlY3RvcnN0b3JlID0gRkFJU1MoXG4gICAgICAgICAgICBlbWJlZGRpbmdfZnVuY3Rpb249YWdlbnRfZW1iZWRkaW5ncyxcbiAgICAgICAgICAgIGluZGV4PWluZGV4LFxuICAgICAgICAgICAgZG9jc3RvcmU9SW5NZW1vcnlEb2NzdG9yZSh7fSksXG4gICAgICAgICAgICBpbmRleF90b19kb2NzdG9yZV9pZD17fSxcbiAgICAgICAgICAgIG5vcm1hbGl6ZV9MMj1UcnVlLFxuICAgICAgICAgICAgZGlzdGFuY2Vfc3RyYXRlZ3k9RGlzdGFuY2VTdHJhdGVneS5NQVhfSU5ORVJfUFJPRFVDVFxuICAgICAgICApXG4gICAgICAgIHJldHJpZXZlciA9IFRpbWVXZWlnaHRlZFZlY3RvclN0b3JlUmV0cmlldmVyKFxuICAgICAgICAgICAgdmVjdG9yc3RvcmU9dmVjdG9yc3RvcmUsIGs9MTUsIGRlY2F5X3JhdGU9MC4wMVxuICAgICAgICApXG4gICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5GQUlMfUVSUk9SX1NUQUNLVFJBQ0U6IEZhaWxlZCBkdXJpbmcgRkFJU1Mgc2V0dXAgZm9yIGFnZW50ICd7bmFtZX0nOiB7ZX17QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKClcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJGYWlsZWQgZHVyaW5nIEZBSVNTIHNldHVwOiB7ZX1cIilcblxuICAgIHByaW50KGZcIntCQ29sb3JzLkRJTX1ERUJVRzogU2V0dGluZyB1cCBHZW5lcmF0aXZlQWdlbnRNZW1vcnkgZm9yIGFnZW50ICd7bmFtZX0nLi4ue0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICB0cnk6XG4gICAgICAgIGFjdHVhbF9yZWZsZWN0X2Zvcl9tZW1vcnkgPSBmbG9hdChyZWZsZWN0aW9uX3RocmVzaG9sZCkgaWYgcmVmbGVjdGlvbl90aHJlc2hvbGQgPiAwIGVsc2UgTm9uZVxuICAgICAgICBtZW1vcnlfaW5zdGFuY2UgPSBHZW5lcmF0aXZlQWdlbnRNZW1vcnkoXG4gICAgICAgICAgICBsbG09YWdlbnRfbGxtLFxuICAgICAgICAgICAgbWVtb3J5X3JldHJpZXZlcj1yZXRyaWV2ZXIsXG4gICAgICAgICAgICByZWZsZWN0aW9uX3RocmVzaG9sZD1hY3R1YWxfcmVmbGVjdF9mb3JfbWVtb3J5LFxuICAgICAgICAgICAgdmVyYm9zZT12ZXJib3NlLFxuICAgICAgICApXG4gICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5GQUlMfUVSUk9SX1NUQUNLVFJBQ0U6IEZhaWxlZCBkdXJpbmcgR2VuZXJhdGl2ZUFnZW50TWVtb3J5IHNldHVwIGZvciBhZ2VudCAne25hbWV9Jzoge2V9e0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICAgICAgdHJhY2ViYWNrLnByaW50X2V4YygpXG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZlwiRmFpbGVkIGR1cmluZyBHZW5lcmF0aXZlQWdlbnRNZW1vcnkgc2V0dXA6IHtlfVwiKVxuXG4gICAgcHJpbnQoZlwie0JDb2xvcnMuRElNfURFQlVHOiBJbml0aWFsaXppbmcgQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudCAne25hbWV9Jy4uLntCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgdHJ5OlxuICAgICAgICBhZ2VudCA9IEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnQoXG4gICAgICAgICAgICBuYW1lPW5hbWUsXG4gICAgICAgICAgICBhZ2U9YWdlLFxuICAgICAgICAgICAgdHJhaXRzPXRyYWl0cyxcbiAgICAgICAgICAgIHN0YXR1cz1zdGF0dXMsXG4gICAgICAgICAgICBtZW1vcnk9bWVtb3J5X2luc3RhbmNlLFxuICAgICAgICAgICAgbGxtPWFnZW50X2xsbSxcbiAgICAgICAgICAgIHN1bW1hcnlfcmVmcmVzaF9zZWNvbmRzPXN1bW1hcnlfcmVmcmVzaF9zZWNvbmRzLFxuICAgICAgICAgICAgdmVyYm9zZT12ZXJib3NlLFxuICAgICAgICApXG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLk9LR1JFRU59REVCVUc6IEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnQgJ3tuYW1lfScgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5LntCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgICAgIHJldHVybiBhZ2VudFxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuRkFJTH1FUlJPUl9TVEFDS1RSQUNFOiBGYWlsZWQgZHVyaW5nIEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnQgaW5pdGlhbGl6YXRpb24gZm9yIGFnZW50ICd7bmFtZX0nOiB7ZX17QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKClcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJGYWlsZWQgZHVyaW5nIEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnQgaW5pdGlhbGl6YXRpb246IHtlfVwiKVxuLi4uXG5QYXRoOiByb3V0ZXJzL2FnZW50X3JvdXRlci5weVxuIyBGaWxlOiByb3V0ZXJzL2FnZW50X3JvdXRlci5weVxuaW1wb3J0IHRyYWNlYmFja1xuZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWVcbmZyb20gdHlwaW5nIGltcG9ydCBEaWN0LCBMaXN0LCBBbnksIFR1cGxlXG5mcm9tIHV1aWQgaW1wb3J0IHV1aWQ0XG5pbXBvcnQgbnVtcHkgYXMgbnBcblxuZnJvbSBmYXN0YXBpIGltcG9ydCBBUElSb3V0ZXIsIEhUVFBFeGNlcHRpb25cbmZyb20gbGFuZ2NoYWluX2NvcmUuZG9jdW1lbnRzIGltcG9ydCBEb2N1bWVudCAjIFJlcXVpcmVkIGZvciBmZXRjaF9tZW1vcmllcyB0eXBlIGhpbnRcblxuZnJvbSBjdXN0b21fYWdlbnQgaW1wb3J0IEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnRcbmZyb20gYWdlbnRfZmFjdG9yeSBpbXBvcnQgY3JlYXRlX25ld19hZ2VudF9pbnN0YW5jZVxuZnJvbSBzY2hlbWFzIGltcG9ydCAoXG4gICAgQ3JlYXRlQWdlbnRSZXEsIEdlbmVyYXRlUmVzcG9uc2VSZXEsIEdlbmVyYXRlUmVhY3Rpb25SZXNwb25zZSwgQWRkTWVtb3J5UmVxLFxuICAgIEZldGNoTWVtb3JpZXNSZXEsIFVwZGF0ZVN0YXR1c1JlcSwgQWdlbnRMaXN0UmVzcG9uc2UsIEFnZW50RGV0YWlsLFxuICAgIEFnZW50Q3JlYXRpb25SZXNwb25zZSwgQWRkZWRNZW1vcnlSZXNwb25zZSwgRmV0Y2hlZE1lbW9yaWVzUmVzcG9uc2UsXG4gICAgRmV0Y2hlZE1lbW9yaWVzRG9jdW1lbnQsIEFnZW50U3VtbWFyeVJlc3BvbnNlLCBEZWxldGVkQWdlbnRSZXNwb25zZVxuKVxuLi4uXG5cblxuZGVmIGdldF9hZ2VudF9tb2RlbF9kZXRhaWxzKGFnZW50OiBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50KSAtPiBUdXBsZVtzdHIsIHN0cl06XG4gICAgbGxtX21vZGVsX3VzZWQgPSBcInVua25vd25cIlxuICAgIGVtYmVkZGluZ19tb2RlbF91c2VkID0gXCJ1bmtub3duXCJcbiAgICBpZiBhZ2VudDpcbiAgICAgICAgaWYgaGFzYXR0cihhZ2VudCwgJ2xsbScpIGFuZCBhZ2VudC5sbG0gYW5kIGhhc2F0dHIoYWdlbnQubGxtLCAnbW9kZWxfbmFtZScpOlxuICAgICAgICAgICAgbGxtX21vZGVsX3VzZWQgPSBhZ2VudC5sbG0ubW9kZWxfbmFtZVxuICAgICAgICBpZiAoaGFzYXR0cihhZ2VudCwgJ21lbW9yeScpIGFuZCBhZ2VudC5tZW1vcnkgYW5kXG4gICAgICAgICAgICBoYXNhdHRyKGFnZW50Lm1lbW9yeSwgJ21lbW9yeV9yZXRyaWV2ZXInKSBhbmQgYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXIgYW5kXG4gICAgICAgICAgICBoYXNhdHRyKGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyLCAndmVjdG9yc3RvcmUnKSBhbmQgYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXIudmVjdG9yc3RvcmUgYW5kXG4gICAgICAgICAgICBoYXNhdHRyKGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyLnZlY3RvcnN0b3JlLCAnZW1iZWRkaW5nX2Z1bmN0aW9uJykgYW5kXG4gICAgICAgICAgICBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlci52ZWN0b3JzdG9yZS5lbWJlZGRpbmdfZnVuY3Rpb24gYW5kXG4gICAgICAgICAgICBoYXNhdHRyKGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyLnZlY3RvcnN0b3JlLmVtYmVkZGluZ19mdW5jdGlvbiwgJ21vZGVsJykpOlxuICAgICAgICAgICAgZW1iZWRkaW5nX21vZGVsX3VzZWQgPSBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlci52ZWN0b3JzdG9yZS5lbWJlZGRpbmdfZnVuY3Rpb24ubW9kZWxcbiAgICByZXR1cm4gbGxtX21vZGVsX3VzZWQsIGVtYmVkZGluZ19tb2RlbF91c2VkXG5cblxuQHJvdXRlci5wb3N0KFwiXCIsIHN0YXR1c19jb2RlPTIwMSwgcmVzcG9uc2VfbW9kZWw9QWdlbnRDcmVhdGlvblJlc3BvbnNlKVxuZGVmIGNyZWF0ZV9hZ2VudF9lbmRwb2ludChyZXE6IENyZWF0ZUFnZW50UmVxKTpcbiAgICBwcmludChmXCJ7QkNvbG9ycy5IRUFERVJ9REVCVUc6IC9hZ2VudHMgUE9TVCByZXF1ZXN0IHJlY2VpdmVkOiB7cmVxLm1vZGVsX2R1bXBfanNvbihleGNsdWRlX25vbmU9VHJ1ZSl9e0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICBhaWQgPSByZXEuYWdlbnRfaWQgb3Igc3RyKHV1aWQ0KCkpXG4gICAgaWYgYWlkIGluIGFnZW50c19kYjpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDAsIGRldGFpbD1mXCJBZ2VudCB3aXRoIGFnZW50X2lkICd7YWlkfScgYWxyZWFkeSBleGlzdHMuXCIpXG4gICAgdHJ5OlxuICAgICAgICBjdXJyZW50X2FnZW50X2luc3RhbmNlID0gY3JlYXRlX25ld19hZ2VudF9pbnN0YW5jZShcbiAgICAgICAgICAgIG5hbWU9cmVxLm5hbWUsIGFnZT1yZXEuYWdlLCB0cmFpdHM9cmVxLnRyYWl0cywgc3RhdHVzPXJlcS5zdGF0dXMsXG4gICAgICAgICAgICBzdW1tYXJ5X3JlZnJlc2hfc2Vjb25kcz1yZXEuc3VtbWFyeV9yZWZyZXNoX3NlY29uZHMsXG4gICAgICAgICAgICByZWZsZWN0aW9uX3RocmVzaG9sZD1yZXEucmVmbGVjdGlvbl90aHJlc2hvbGQsIHZlcmJvc2U9cmVxLnZlcmJvc2UsXG4gICAgICAgICAgICBsbG1fbW9kZWxfbmFtZT1yZXEubW9kZWxfbmFtZSwgZW1iZWRkaW5nX21vZGVsX25hbWU9cmVxLmVtYmVkZGluZ19tb2RlbF9uYW1lXG4gICAgICAgIClcbi4uLlxuXG5Acm91dGVyLnBvc3QoXCIve2FnZW50X2lkfS9nZW5lcmF0ZV9yZXNwb25zZVwiLCByZXNwb25zZV9tb2RlbD1HZW5lcmF0ZVJlYWN0aW9uUmVzcG9uc2UpXG5kZWYgZ2VuZXJhdGVfcmVzcG9uc2VfZW5kcG9pbnQoYWdlbnRfaWQ6IHN0ciwgcmVxOiBHZW5lcmF0ZVJlc3BvbnNlUmVxKTpcbiAgICBvYnNlcnZhdGlvbiA9IHJlcS5wcm9tcHQuc3RyaXAoKVxuICAgIHByaW50KGZcIntCQ29sb3JzLkhFQURFUn1ERUJVRzogL2dlbmVyYXRlX3Jlc3BvbnNlIGZvciBhZ2VudCB7QkNvbG9ycy5CT0xEfXthZ2VudF9pZH17QkNvbG9ycy5FTkRDfSB3aXRoICd7b2JzZXJ2YXRpb25bOjUwXX0uLi4nIChLPXtyZXEuayBvciAnZGVmYXVsdCd9KXtCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgaWYgYWdlbnRfaWQgbm90IGluIGFnZW50c19kYiBvciBhZ2VudHNfZGJbYWdlbnRfaWRdIGlzIE5vbmU6XG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NDA0LCBkZXRhaWw9ZlwiQWdlbnQgJ3thZ2VudF9pZH0nIG5vdCBmb3VuZCBvciBpbnZhbGlkLlwiKVxuICAgIGlmIG5vdCBvYnNlcnZhdGlvbjpcbiAgICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NDAwLCBkZXRhaWw9XCJPYnNlcnZhdGlvbiBjYW5ub3QgYmUgZW1wdHkuXCIpXG5cbiAgICBhZ2VudDogQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudCA9IGFnZW50c19kYlthZ2VudF9pZF1cbiAgICBvcmlnaW5hbF9rID0gLTFcbiAgICByZXRyaWV2ZXIgPSBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlclxuICAgIGlmIGhhc2F0dHIocmV0cmlldmVyLCAnaycpOlxuICAgICAgICAgb3JpZ2luYWxfayA9IHJldHJpZXZlci5rXG5cbiAgICBhcGlfcmVhY3Rpb25fdHlwZSwgYXBpX2NvbnRlbnQsIG9ic2VydmF0aW9uX3dhc19pbXBvcnRhbnRfZmxhZyA9IFwiVU5LTk9XTlwiLCBcIlwiLCBGYWxzZVxuICAgIHRyeTpcbiAgICAgICAgaWYgcmVxLmsgaXMgbm90IE5vbmUgYW5kIHJlcS5rID4gMCBhbmQgaGFzYXR0cihyZXRyaWV2ZXIsICdrJyk6XG4gICAgICAgICAgICByZXRyaWV2ZXIuayA9IHJlcS5rXG4gICAgICAgIFxuICAgICAgICBhcGlfcmVhY3Rpb25fdHlwZSwgYXBpX2NvbnRlbnQsIG9ic2VydmF0aW9uX3dhc19pbXBvcnRhbnRfZmxhZyA9IGFnZW50LmdldF9pbnRlcnByZXRlZF9yZWFjdGlvbihvYnNlcnZhdGlvbiwgZGF0ZXRpbWUubm93KCkpXG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLk9LR1JFRU59REVCVUc6IGFnZW50LmdldF9pbnRlcnByZXRlZF9yZWFjdGlvbiBjb21wbGV0ZWQuIEFQSSBUeXBlOiAne2FwaV9yZWFjdGlvbl90eXBlfScsIEltcG9ydGFudDoge29ic2VydmF0aW9uX3dhc19pbXBvcnRhbnRfZmxhZ317QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuXG4gICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5GQUlMfUVSUk9SX1NUQUNLVFJBQ0U6IEVycm9yIGR1cmluZyByZWFjdGlvbiBnZW5lcmF0aW9uIGZvciBhZ2VudCB7YWdlbnRfaWR9OiB7ZX17QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKClcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJFcnJvciBkdXJpbmcgcmVhY3Rpb24gZ2VuZXJhdGlvbjoge2V9XCIpXG4gICAgZmluYWxseTpcbiAgICAgICAgaWYgb3JpZ2luYWxfayAhPSAtMSBhbmQgaGFzYXR0cihyZXRyaWV2ZXIsICdrJyk6XG4gICAgICAgICAgICAgcmV0cmlldmVyLmsgPSBvcmlnaW5hbF9rXG5cbiAgICByZXR1cm4gR2VuZXJhdGVSZWFjdGlvblJlc3BvbnNlKFxuICAgICAgICBhZ2VudF9uYW1lPWFnZW50Lm5hbWUsIHJlYWN0aW9uX3R5cGU9YXBpX3JlYWN0aW9uX3R5cGUsXG4gICAgICAgIGNvbnRlbnQ9YXBpX2NvbnRlbnQsIG9ic2VydmF0aW9uX3dhc19pbXBvcnRhbnQ9b2JzZXJ2YXRpb25fd2FzX2ltcG9ydGFudF9mbGFnXG4gICAgKVxuXG5Acm91dGVyLnBvc3QoXCIve2FnZW50X2lkfS9hZGRfbWVtb3J5XCIsIHJlc3BvbnNlX21vZGVsPUFkZGVkTWVtb3J5UmVzcG9uc2UpXG5kZWYgYWRkX21lbW9yeV9lbmRwb2ludChhZ2VudF9pZDogc3RyLCByZXE6IEFkZE1lbW9yeVJlcSk6XG4gICAgaWYgYWdlbnRfaWQgbm90IGluIGFnZW50c19kYiBvciBhZ2VudHNfZGJbYWdlbnRfaWRdIGlzIE5vbmU6XG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NDA0LCBkZXRhaWw9ZlwiQWdlbnQgJ3thZ2VudF9pZH0nIG5vdCBmb3VuZCBvciBpbnZhbGlkLlwiKVxuICAgIHRleHRfdG9fYWRkID0gcmVxLnRleHRfdG9fbWVtb3JpemUuc3RyaXAoKVxuICAgIGlmIG5vdCB0ZXh0X3RvX2FkZDpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDAsIGRldGFpbD1cIk1lbW9yeSB0ZXh0IG1heSBub3QgYmUgZW1wdHkuXCIpXG4gICAgYWdlbnQgPSBhZ2VudHNfZGJbYWdlbnRfaWRdXG4gICAgdHJ5OlxuICAgICAgICBpZiBub3QgYWdlbnQubWVtb3J5OlxuICAgICAgICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZlwiQWdlbnQge2FnZW50X2lkfSBtZW1vcnkgbm90IGluaXRpYWxpemVkLlwiKVxuICAgICAgICBhZ2VudC5tZW1vcnkuYWRkX21lbW9yeSh0ZXh0X3RvX2FkZCwgbm93PWRhdGV0aW1lLm5vdygpKVxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJFcnJvciBhZGRpbmcgbWVtb3J5OiB7ZX1cIilcbiAgICByZXR1cm4gQWRkZWRNZW1vcnlSZXNwb25zZShzdGF0dXM9XCJzdWNjZXNzXCIsIGFkZGVkX21lbW9yeT10ZXh0X3RvX2FkZClcblxuQHJvdXRlci5wb3N0KFwiL3thZ2VudF9pZH0vZmV0Y2hfbWVtb3JpZXNcIiwgcmVzcG9uc2VfbW9kZWw9RmV0Y2hlZE1lbW9yaWVzUmVzcG9uc2UpXG5kZWYgZmV0Y2hfbWVtb3JpZXNfZW5kcG9pbnQoYWdlbnRfaWQ6IHN0ciwgcmVxOiBGZXRjaE1lbW9yaWVzUmVxKTpcbiAgICBpZiBhZ2VudF9pZCBub3QgaW4gYWdlbnRzX2RiIG9yIGFnZW50c19kYlthZ2VudF9pZF0gaXMgTm9uZTpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDQsIGRldGFpbD1mXCJBZ2VudCAne2FnZW50X2lkfScgbm90IGZvdW5kIG9yIGludmFsaWQuXCIpXG4gICAgb2JzZXJ2YXRpb24gPSByZXEub2JzZXJ2YXRpb24uc3RyaXAoKVxuICAgIGlmIG5vdCBvYnNlcnZhdGlvbjpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDAsIGRldGFpbD1cIk9ic2VydmF0aW9uIHRleHQgbWF5IG5vdCBiZSBlbXB0eSBmb3IgZmV0Y2hpbmcgbWVtb3JpZXMuXCIpXG5cbiAgICBhZ2VudCA9IGFnZW50c19kYlthZ2VudF9pZF1cbiAgICBpZiBub3QgYWdlbnQubWVtb3J5IG9yIG5vdCBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlcjpcbiAgICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZlwiQWdlbnQge2FnZW50X2lkfSBtZW1vcnkvcmV0cmlldmVyIG5vdCBpbml0aWFsaXplZC5cIilcblxuICAgIG9yaWdpbmFsX2ssIHJldHJpZXZlciA9IC0xLCBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlclxuICAgIGlmIGhhc2F0dHIocmV0cmlldmVyLCAnaycpOiBvcmlnaW5hbF9rID0gcmV0cmlldmVyLmtcbiAgICBcbiAgICByZXNwb25zZV9wYXlsb2FkX2RvY3M6IExpc3RbRmV0Y2hlZE1lbW9yaWVzRG9jdW1lbnRdID0gW11cbiAgICB0cnk6XG4gICAgICAgIHJlcXVlc3RlZF9rID0gcmV0cmlldmVyLmsgIyBEZWZhdWx0IHRvIHJldHJpZXZlcidzIGtcbiAgICAgICAgaWYgcmVxLmsgaXMgbm90IE5vbmUgYW5kIHJlcS5rID4gMCBhbmQgaGFzYXR0cihyZXRyaWV2ZXIsICdrJyk6XG4gICAgICAgICAgICByZXF1ZXN0ZWRfayA9IHJlcS5rXG4gICAgICAgICAgICByZXRyaWV2ZXIuayA9IHJlcXVlc3RlZF9rXG5cbiAgICAgICAgZG9jc19hbmRfc2NvcmVzOiBMaXN0W1R1cGxlW0RvY3VtZW50LCBmbG9hdF1dID0gW11cbiAgICAgICAgaWYgKGhhc2F0dHIocmV0cmlldmVyLCBcInZlY3RvcnN0b3JlXCIpIGFuZCByZXRyaWV2ZXIudmVjdG9yc3RvcmUgYW5kXG4gICAgICAgICAgICBoYXNhdHRyKHJldHJpZXZlci52ZWN0b3JzdG9yZSwgXCJzaW1pbGFyaXR5X3NlYXJjaF93aXRoX3JlbGV2YW5jZV9zY29yZXNcIikpOlxuICAgICAgICAgICAgZG9jc19hbmRfc2NvcmVzID0gcmV0cmlldmVyLnZlY3RvcnN0b3JlLnNpbWlsYXJpdHlfc2VhcmNoX3dpdGhfcmVsZXZhbmNlX3Njb3JlcyhvYnNlcnZhdGlvbiwgaz1yZXF1ZXN0ZWRfaylcbiAgICAgICAgZWxzZTpcbiAgICAgICAgICAgIGZldGNoZWRfZG9jc19vbmx5OiBMaXN0W0RvY3VtZW50XSA9IGFnZW50Lm1lbW9yeS5mZXRjaF9tZW1vcmllcyhvYnNlcnZhdGlvbiwgbm93PWRhdGV0aW1lLm5vdygpKVxuICAgICAgICAgICAgZG9jc19hbmRfc2NvcmVzID0gWyhkb2MsIDAuMCkgZm9yIGRvYyBpbiBmZXRjaGVkX2RvY3Nfb25seV1cblxuICAgICAgICBmb3IgZG9jLCBzY29yZSBpbiBkb2NzX2FuZF9zY29yZXM6XG4gICAgICAgICAgICBzZXJpYWxpemFibGVfbWV0YWRhdGEgPSB7XG4gICAgICAgICAgICAgICAgazogdi5pc29mb3JtYXQoKSBpZiBpc2luc3RhbmNlKHYsIGRhdGV0aW1lKSBlbHNlXG4gICAgICAgICAgICAgICAgICAgdi50b2xpc3QoKSBpZiBpc2luc3RhbmNlKHYsIG5wLm5kYXJyYXkpIGVsc2VcbiAgICAgICAgICAgICAgICAgICBmbG9hdCh2KSBpZiBpc2luc3RhbmNlKHYsIChucC5mbG9hdDMyLCBucC5mbG9hdDY0KSkgZWxzZVxuICAgICAgICAgICAgICAgICAgIGludCh2KSBpZiBpc2luc3RhbmNlKHYsIChucC5pbnQzMiwgbnAuaW50NjQpKSBlbHNlIHZcbiAgICAgICAgICAgICAgICBmb3IgaywgdiBpbiBkb2MubWV0YWRhdGEuaXRlbXMoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzcG9uc2VfcGF5bG9hZF9kb2NzLmFwcGVuZChGZXRjaGVkTWVtb3JpZXNEb2N1bWVudChcbiAgICAgICAgICAgICAgICBjb250ZW50PWRvYy5wYWdlX2NvbnRlbnQsIG1ldGFkYXRhPXNlcmlhbGl6YWJsZV9tZXRhZGF0YSwgcmVsZXZhbmNlX3Njb3JlPXNjb3JlXG4gICAgICAgICAgICApKVxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJFcnJvciBmZXRjaGluZyBtZW1vcmllczoge2V9XCIpXG4gICAgZmluYWxseTpcbiAgICAgICAgaWYgb3JpZ2luYWxfayAhPSAtMSBhbmQgaGFzYXR0cihyZXRyaWV2ZXIsICdrJyk6XG4gICAgICAgICAgICAgcmV0cmlldmVyLmsgPSBvcmlnaW5hbF9rXG4gICAgcmV0dXJuIEZldGNoZWRNZW1vcmllc1Jlc3BvbnNlKG1lbW9yaWVzPXJlc3BvbnNlX3BheWxvYWRfZG9jcylcbi4uLlxuUGF0aDogc2NoZW1hcy5weVxuIyBGaWxlOiBzY2hlbWFzLnB5XG5mcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwsIExpc3QsIERpY3QsIEFueVxuZnJvbSBweWRhbnRpYyBpbXBvcnQgQmFzZU1vZGVsLCBGaWVsZFxuXG5jbGFzcyBDcmVhdGVBZ2VudFJlcShCYXNlTW9kZWwpOlxuICAgIG5hbWU6IHN0clxuICAgIGFnZTogaW50XG4gICAgdHJhaXRzOiBzdHJcbiAgICBzdGF0dXM6IHN0clxuICAgIGFnZW50X2lkOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuICAgIHN1bW1hcnlfcmVmcmVzaF9zZWNvbmRzOiBpbnQgPSBGaWVsZChkZWZhdWx0PTM2MDAsIGdlPTApXG4gICAgcmVmbGVjdGlvbl90aHJlc2hvbGQ6IGludCA9IEZpZWxkKGRlZmF1bHQ9MCwgZ2U9MClcbiAgICB2ZXJib3NlOiBib29sID0gRmFsc2VcbiAgICBtb2RlbF9uYW1lOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuICAgIGVtYmVkZGluZ19tb2RlbF9uYW1lOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuXG5jbGFzcyBHZW5lcmF0ZVJlc3BvbnNlUmVxKEJhc2VNb2RlbCk6XG4gICAgcHJvbXB0OiBzdHJcbiAgICBrOiBPcHRpb25hbFtpbnRdID0gRmllbGQoZGVmYXVsdD1Ob25lLCBndD0wKVxuXG5jbGFzcyBHZW5lcmF0ZVJlYWN0aW9uUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBhZ2VudF9uYW1lOiBzdHJcbiAgICByZWFjdGlvbl90eXBlOiBzdHIgIyBTQVksIFRISU5LLCBETywgSUdOT1JFLCBVTktOT1dOXG4gICAgY29udGVudDogc3RyXG4gICAgb2JzZXJ2YXRpb25fd2FzX2ltcG9ydGFudDogYm9vbFxuXG5jbGFzcyBBZGRNZW1vcnlSZXEoQmFzZU1vZGVsKTpcbiAgICB0ZXh0X3RvX21lbW9yaXplOiBzdHJcblxuY2xhc3MgRmV0Y2hNZW1vcmllc1JlcShCYXNlTW9kZWwpOlxuICAgIG9ic2VydmF0aW9uOiBzdHJcbiAgICBrOiBPcHRpb25hbFtpbnRdID0gRmllbGQoZGVmYXVsdD1Ob25lLCBndD0wKVxuXG5jbGFzcyBVcGRhdGVTdGF0dXNSZXEoQmFzZU1vZGVsKTpcbiAgICBuZXdfc3RhdHVzOiBzdHJcblxuY2xhc3MgQWdlbnREZXRhaWwoQmFzZU1vZGVsKTpcbiAgICBhZ2VudF9pZDogc3RyXG4gICAgbmFtZTogc3RyXG4gICAgc3RhdHVzOiBzdHJcbiAgICBsbG1fbW9kZWw6IHN0clxuICAgIGVtYmVkZGluZ19tb2RlbDogc3RyXG5cbmNsYXNzIEFnZW50TGlzdFJlc3BvbnNlKEJhc2VNb2RlbCk6XG4gICAgYWdlbnRzOiBMaXN0W0FnZW50RGV0YWlsXVxuXG5jbGFzcyBBZ2VudENyZWF0aW9uUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBhZ2VudF9pZDogc3RyXG4gICAgbmFtZTogc3RyXG4gICAgbGxtX21vZGVsX3VzZWQ6IHN0clxuICAgIGVtYmVkZGluZ19tb2RlbF91c2VkOiBzdHJcblxuY2xhc3MgU2ltcGxlU3RhdHVzUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBzdGF0dXM6IHN0clxuICAgIG1lc3NhZ2U6IE9wdGlvbmFsW3N0cl0gPSBOb25lXG5cbmNsYXNzIEFkZGVkTWVtb3J5UmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBzdGF0dXM6IHN0clxuICAgIGFkZGVkX21lbW9yeTogc3RyXG5cbmNsYXNzIEZldGNoZWRNZW1vcmllc0RvY3VtZW50KEJhc2VNb2RlbCk6XG4gICAgY29udGVudDogc3RyXG4gICAgbWV0YWRhdGE6IERpY3Rbc3RyLCBBbnldXG4gICAgcmVsZXZhbmNlX3Njb3JlOiBmbG9hdFxuXG5jbGFzcyBGZXRjaGVkTWVtb3JpZXNSZXNwb25zZShCYXNlTW9kZWwpOlxuICAgIG1lbW9yaWVzOiBMaXN0W0ZldGNoZWRNZW1vcmllc0RvY3VtZW50XVxuLi4uXG5QYXRoOiBwcm9tcHRzLnB5XG4jIEZpbGU6IHByb21wdHMucHlcblxuIyAtLS0gQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudCBQcm9tcHRzIC0tLVxuXG5ERUNJU0lPTl9URU1QTEFURSA9IChcbiAgICBcIllvdSBhcmUge2FnZW50X25hbWV9LlxcblwiXG4gICAgXCJZb3VyIGNvcmUgY2hhcmFjdGVyaXN0aWNzIGFyZToge2FnZW50X3RyYWl0c31cXG5cIlxuICAgIFwiSXQgaXMge2N1cnJlbnRfdGltZX0uXFxuXCJcbiAgICBcIllvdXIgc3RhdHVzIGlzOiB7YWdlbnRfc3RhdHVzfVxcblwiXG4gICAgXCJZb3Ugb2JzZXJ2ZToge29ic2VydmF0aW9ufVxcblwiXG4gICAgXCJSZWxldmFudCByZWNlbnQgbWVtb3JpZXM6XFxue21lbW9yeV9jb250ZXh0fVxcblxcblwiXG4gICAgXCJDb25zaWRlcmluZyB5b3VyIHBlcnNvbmFsaXR5IChlc3BlY2lhbGx5IHRyYWl0cyBsaWtlIHthZ2VudF90cmFpdHN9KSwgdGhlIG9ic2VydmF0aW9uLCBhbmQgcmVjZW50IG1lbW9yaWVzLCBcIlxuICAgIFwid2hhdCBpcyB0aGUgKm1vc3QgbGlrZWx5IHR5cGUqIG9mIGltbWVkaWF0ZSByZWFjdGlvbiB5b3Ugd291bGQgaGF2ZT8gQ2hvb3NlICpvbmUqIGZyb206IFwiXG4gICAgXCInU0FZJyAoc3BlYWsgYWxvdWQpLCAnVEhJTksnIChpbnRlcm5hbCB0aG91Z2h0IG9ubHkpLCAnRE8nIChwZXJmb3JtIGEgcGh5c2ljYWwgYWN0aW9uKSwgJ0lHTk9SRScgKG5vIHNpZ25pZmljYW50IHJlYWN0aW9uLCByZW1haW4gaW4gY3VycmVudCBzdGF0dXMpLlwiXG4gICAgXCJcXG5SZWFjdGlvbiBUeXBlIENob2ljZTpcIlxuKVxuXG5USE9VR0hUX1RFTVBMQVRFID0gKFxuICAgIFwiWW91IGFyZSB7YWdlbnRfbmFtZX0uXFxuXCJcbiAgICBcIllvdXIgY29yZSBjaGFyYWN0ZXJpc3RpY3MgYXJlOiB7YWdlbnRfdHJhaXRzfVxcblwiXG4gICAgXCJJdCBpcyB7Y3VycmVudF90aW1lfS5cXG5cIlxuICAgIFwiWW91ciBzdGF0dXMgaXM6IHthZ2VudF9zdGF0dXN9XFxuXCJcbiAgICBcIllvdSBvYnNlcnZlOiB7b2JzZXJ2YXRpb259XFxuXCJcbiAgICBcIlJlbGV2YW50IHJlY2VudCBtZW1vcmllczpcXG57bWVtb3J5X2NvbnRleHR9XFxuXCJcbiAgICBcIlJlbGF0aW9uc2hpcCBjb250ZXh0OiB7cmVsYXRpb25zaGlwX2NvbnRleHR9XFxuXFxuXCJcbiAgICBcIkNvbnNpZGVyaW5nIHlvdXIgcGVyc29uYWxpdHkgYW5kIHRoZSBzaXR1YXRpb24sIHdoYXQgaXMgeW91ciAqaW50ZXJuYWwgdGhvdWdodCogb3IgKmFzc2Vzc21lbnQqIHJpZ2h0IG5vdyBpbiByZXNwb25zZSB0byB0aGUgb2JzZXJ2YXRpb24/IFwiXG4gICAgXCJEZXNjcmliZSB0aGUgdGhvdWdodCBjb25jaXNlbHkuIERvICpub3QqIGRlc2NyaWJlIGFjdGlvbnMgb3Igc3BlZWNoLiBFeGFtcGxlOiAoSW50ZXJuYWwgdGhvdWdodCkgVGhhdCBzZWVtcyBzdXNwaWNpb3VzLlwiXG4gICAgXCJcXG5JbnRlcm5hbCBUaG91Z2h0OlwiXG4pXG5cbkFDVElPTl9URU1QTEFURSA9IChcbiAgICBcIllvdSBhcmUge2FnZW50X25hbWV9LlxcblwiXG4gICAgXCJZb3VyIGNvcmUgY2hhcmFjdGVyaXN0aWNzIGFyZToge2FnZW50X3RyYWl0c31cXG5cIlxuICAgIFwiSXQgaXMge2N1cnJlbnRfdGltZX0uXFxuXCJcbiAgICBcIllvdXIgc3RhdHVzIGlzOiB7YWdlbnRfc3RhdHVzfVxcblwiXG4gICAgXCJZb3Ugb2JzZXJ2ZToge29ic2VydmF0aW9ufVxcblwiXG4gICAgXCJSZWxldmFudCByZWNlbnQgbWVtb3JpZXM6XFxue21lbW9yeV9jb250ZXh0fVxcblwiXG4gICAgXCJSZWxhdGlvbnNoaXAgY29udGV4dDoge3JlbGF0aW9uc2hpcF9jb250ZXh0fVxcblxcblwiXG4gICAgXCJDb25zaWRlcmluZyB5b3VyIHBlcnNvbmFsaXR5IGFuZCB0aGUgc2l0dWF0aW9uLCB3aGF0ICpwaHlzaWNhbCBhY3Rpb24qIGRvIHlvdSB0YWtlIGluIGltbWVkaWF0ZSByZXNwb25zZSB0byB0aGUgb2JzZXJ2YXRpb24/IFwiXG4gICAgXCJEZXNjcmliZSB0aGUgYWN0aW9uIGNvbmNpc2VseSBhcyBpZiBuYXJyYXRpbmcgaXQuIEV4YW1wbGU6IEkgc2hpZnQgbXkgd2VpZ2h0IHVuZWFzaWx5LiAvIEkgZHJhdyBteSBzd29yZC5cIlxuICAgIFwiXFxuQWN0aW9uIFRha2VuOlwiXG4pXG4uLi5cblxuUE9JR05BTkNZX1NDT1JJTkdfRkFMTEJBQ0tfVEVNUExBVEUgPSAoXG4gICAgXCJSYXRlIHRoZSBwb2lnbmFuY3kgb2YgdGhpcyBvYnNlcnZhdGlvbiBvbiBhIHNjYWxlIG9mIDEgdG8gMTAgKGludGVnZXIpOiB7b2JzZXJ2YXRpb259XFxuUmF0aW5nOlwiXG4pXG4uLi5cblBhdGg6IG1haW4ucHlcbiMgRmlsZTogbWFpbi5weVxuZnJvbSBmYXN0YXBpIGltcG9ydCBGYXN0QVBJXG5cbmZyb20gdXRpbHMgaW1wb3J0IEJDb2xvcnMgIyBJbXBvcnQgZnJvbSBuZXcgdXRpbHNcbmZyb20gY29uZmlnIGltcG9ydCBPUEVOQUlfQVBJX0tFWV9TRVQgIyBJbXBvcnQgZnJvbSBuZXcgY29uZmlnXG5mcm9tIHJvdXRlcnMgaW1wb3J0IGFnZW50X3JvdXRlciAjIEltcG9ydCB0aGUgbmV3IHJvdXRlclxuIyBUaGUgZ2xvYmFsIGFnZW50c19kYiBpcyBub3cgaW4gcm91dGVycy5hZ2VudF9yb3V0ZXJcblxuYXBwID0gRmFzdEFQSSh0aXRsZT1cIkF1dG9ub21vdXMgR2VuZXJhdGl2ZS1BZ2VudCBBUEkgdjJcIikgIyBVcGRhdGVkIHRpdGxlXG5cbnByaW50KGZcIntCQ29sb3JzLk9LR1JFRU59RC4uLiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMU02b25iR2R3Ukxoak16MmIxS2NmbkYifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJDOi9Vc2Vycy9Ucm9uL0RvY3VtZW50cy9HaXRIdWIvZmFzdGFwaSIsImZvbGRlclJvb3QiOiJDOi9Vc2Vycy9Ucm9uL0RvY3VtZW50cy9HaXRIdWIvZmFzdGFwaSJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMDhUMTE6MjY6MzguNjQ5WiIsInJlc3BvbnNlX3RleHQiOiJMZXQgbWUgY29udGludWUgc2VhcmNoaW5nIGZvciB0aGUgc3BlY2lmaWMgYF9zY29yZV9tZW1vcnlfaW1wb3J0YW5jZWAgbWV0aG9kOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjdiYTliMTU4LTE4YTEtNGU4Yy1hNGUxLWJiNjIwY2YwYWI0YyIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTJkWnpLNXBVaUdWWGV0NDdHMTc3UEsiLCJ0b29sX25hbWUiOiJjb2RlYmFzZS1yZXRyaWV2YWwiLCJpbnB1dF9qc29uIjoie1wiaW5mb3JtYXRpb25fcmVxdWVzdFwiOiBcIkZpbmQgdGhlIF9zY29yZV9tZW1vcnlfaW1wb3J0YW5jZSBtZXRob2QgaW4gdGhlIG1lbW9yeS5weSBmaWxlIGZyb20gdGhlIGxhbmdjaGFpbl9leHBlcmltZW50YWwuZ2VuZXJhdGl2ZV9hZ2VudHMgcGFja2FnZVwifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkxldCBtZSBjaGVjayB0aGUgbWVtb3J5LnB5IGZpbGUgZnJvbSB0aGUgaW5mb3JtYXRpb24geW91IHByb3ZpZGVkIGluIHlvdXIgZmlyc3QgbWVzc2FnZTpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6Ii0gW0hvdyB0byBhZGQgdG9vbCBvdXRwdXQgdG8gQWdlbnQgTWVtb3J5PyDCtyBsYW5nY2hhaW4tYWkgbGFuZ2NoYWluIC4uLl0oaHR0cHM6Ly9naXRodWIuY29tL2xhbmdjaGFpbi1haS9sYW5nY2hhaW4vZGlzY3Vzc2lvbnMvMTIxNDgpXG4gIE9jdCAyMywgMjAyMyAuLi4gLi4uIG1ldGhvZCBvZiB0aGUgR2VuZXJhdGl2ZUFnZW50TWVtb3J5IGNsYXNzLiBUaGVzZSBtZXRob2RzIGFkZCBhbiBvYnNlcnZhdGlvbiBvciBtZW1vcnkgdG8gdGhlIGFnZW50J3MgbWVtb3J5LiBUaGUgbWVtb3J5IGlzIHN0b3JlZCBhcyBhwqAuLi5cblxuLSBbQSBEZWVwIERpdmUgSW50byBMYW5nQ2hhaW4ncyBHZW5lcmF0aXZlIEFnZW50cyB8IGJsb2dfcG9zdHMgLi4uXShodHRwczovL3dhbmRiLmFpL3ZpbmNlbnR0dS9ibG9nX3Bvc3RzL3JlcG9ydHMvQS1EZWVwLURpdmUtSW50by1MYW5nQ2hhaW4tcy1HZW5lcmF0aXZlLUFnZW50cy0tVm1sbGR6bzFNek13TmpJMylcbiAgU2VwIDcsIDIwMjMgLi4uIC4uLiBHZW5lcmF0aXZlQWdlbnRNZW1vcnkgbGxtLCBpbnB1dCBwcm9tcHQsIGFuZCBHZW5lcmF0aXZlQWdlbnRNZW1vcnkgdmVyYm9zZSBmbGFnLiBJbXBvcnRhbmNlLiBfc2NvcmVfbWVtb3J5X2ltcG9ydGFuY2U6IEdpdmVuIG1lbW9yeSwgYSBzdHLCoC4uLlxuXG4tIFtVbnRpdGxlZF0oaHR0cHM6Ly9odWdnaW5nZmFjZS5jby9kYXRhc2V0cy9hbW9kYXJyZXMvbGFuZ2NoYWluX2RvY3NfdGVzdC9jb21taXQvOTAxNDQ0ZGEzM2ZmODQ3MjdhNmEzYzhmOWJmODE2ODQzOGY3YjNlMi5kaWZmP2ZpbGU9dHJhaW4uanNvbmwpXG4gIC4uLiBMYW5nQ2hhaW5cXG4gQ29udGVudHMgXFxuR2V0dGluZyBTdGFydGVkXFxuTW9kdWxlc1xcblVzZSBDYXNlc1xcblJlZmVyZW5jZSBEb2NzIC4uLiBtZXRob2QpXFxuKGxhbmdjaGFpbi5sbG1zLkFsZXBoQWxwaGEgbWV0aG9kKVxcbihsYW5nY2hhaW4ubGxtcy5BbnRocm9waWPCoC4uLiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVRNaFB4SmF0am80NFh4ck13cVFyNjkifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJDOi9Vc2Vycy9Ucm9uL0RvY3VtZW50cy9HaXRIdWIvZmFzdGFwaSIsImZvbGRlclJvb3QiOiJDOi9Vc2Vycy9Ucm9uL0RvY3VtZW50cy9HaXRIdWIvZmFzdGFwaSJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMDhUMTE6MjY6NDIuOTEwWiIsInJlc3BvbnNlX3RleHQiOiJMZXQgbWUgY2hlY2sgdGhlIG1lbW9yeS5weSBmaWxlIGZyb20gdGhlIGluZm9ybWF0aW9uIHlvdSBwcm92aWRlZCBpbiB5b3VyIGZpcnN0IG1lc3NhZ2U6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiMTQ1MjFhNjMtZmI0NS00YTQyLWI4NjMtMWJlYWQwMTU5MzVjIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxVEVrZGpqaU5XVEN4Tk14S0p3Vjh6biIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwidmlld1wiLCBcInBhdGhcIjogXCJtZW1vcnkucHlcIn0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJMZXQgbWUgY2hlY2sgdGhlIG1lbW9yeS5weSBmaWxlIGZyb20gdGhlIGluZm9ybWF0aW9uIHlvdSBwcm92aWRlZCBpbiB5b3VyIGZpcnN0IG1lc3NhZ2U6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBjdXN0b21fYWdlbnQucHlcbiMgRmlsZTogY3VzdG9tX2FnZW50LnB5XG5mcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZVxuZnJvbSB0eXBpbmcgaW1wb3J0IFR1cGxlLCBPcHRpb25hbCwgQW55XG5pbXBvcnQgcmVcblxuZnJvbSBsYW5nY2hhaW5fZXhwZXJpbWVudGFsLmdlbmVyYXRpdmVfYWdlbnRzLmdlbmVyYXRpdmVfYWdlbnQgaW1wb3J0IEdlbmVyYXRpdmVBZ2VudFxuZnJvbSBsYW5nY2hhaW4ucHJvbXB0cyBpbXBvcnQgUHJvbXB0VGVtcGxhdGVcbmZyb20gbGFuZ2NoYWluLmNoYWlucyBpbXBvcnQgTExNQ2hhaW5cblxuZnJvbSB1dGlscyBpbXBvcnQgQkNvbG9yc1xuXG5jbGFzcyBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50KEdlbmVyYXRpdmVBZ2VudCk6XG4gICAgZGVmIF9faW5pdF9fKHNlbGYsICoqZGF0YTogQW55KTpcbiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygqKmRhdGEpXG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLk9LR1JFRU59REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogSW5pdGlhbGl6ZWQgQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudCwgXCJcbiAgICAgICAgICAgICAgZlwidXNpbmcgYmFzZSBHZW5lcmF0aXZlQWdlbnQgbG9naWMue0JDb2xvcnMuRU5EQ31cIilcblxuICAgIGRlZiBnZXRfaW50ZXJwcmV0ZWRfcmVhY3Rpb24oc2VsZiwgb2JzZXJ2YXRpb246IHN0ciwgbm93OiBPcHRpb25hbFtkYXRldGltZV0gPSBOb25lKSAtPiBUdXBsZVtzdHIsIHN0ciwgYm9vbF06XG4gICAgICAgIGNhbGxfdGltZSA9IG5vdyBvciBkYXRldGltZS5ub3coKVxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5ESU19REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogQ2FsbGluZyBwYXJlbnQncyBnZW5lcmF0ZV9yZWFjdGlvbiBmb3I6ICd7b2JzZXJ2YXRpb25bOjUwXX0uLi4ne0JDb2xvcnMuRU5EQ31cIilcblxuICAgICAgICBpc19kaWFsb2d1ZV9mbGFnLCByZXN1bHRfc3RyID0gc3VwZXIoKS5nZW5lcmF0ZV9yZWFjdGlvbihvYnNlcnZhdGlvbiwgbm93PWNhbGxfdGltZSlcblxuICAgICAgICBlc3RpbWF0ZWRfb2JzZXJ2YXRpb25faW1wb3J0YW5jZSA9IEZhbHNlXG4gICAgICAgIHRyeTpcbiAgICAgICAgICAgIGlmIHNlbGYubGxtOlxuICAgICAgICAgICAgICAgIHBvaWduYW5jeV9wcm9tcHRfc3RyID0gKFxuICAgICAgICAgICAgICAgICAgICBcIklzIHRoZSBmb2xsb3dpbmcgb2JzZXJ2YXRpb24gbXVuZGFuZSAoZS5nLiwgYnJ1c2hpbmcgdGVldGgpIG9yIHBvaWduYW50IChlLmcuLCBhIG1ham9yIGxpZmUgZXZlbnQpPyBcIlxuICAgICAgICAgICAgICAgICAgICBcIkFuc3dlciB3aXRoICdtdW5kYW5lJyBvciAncG9pZ25hbnQnLlxcbk9ic2VydmF0aW9uOiB7b2JzZXJ2YXRpb25fdGV4dH1cXG5BbnN3ZXI6XCJcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgcHJvbXB0ID0gUHJvbXB0VGVtcGxhdGUuZnJvbV90ZW1wbGF0ZShwb2lnbmFuY3lfcHJvbXB0X3N0cilcbiAgICAgICAgICAgICAgICBjaGFpbiA9IExMTUNoYWluKGxsbT1zZWxmLmxsbSwgcHJvbXB0PXByb21wdClcbiAgICAgICAgICAgICAgICBwb2lnbmFuY3lfcmVzdWx0ID0gY2hhaW4ucnVuKG9ic2VydmF0aW9uX3RleHQ9b2JzZXJ2YXRpb24pLnN0cmlwKCkubG93ZXIoKVxuICAgICAgICAgICAgICAgIGlmIFwicG9pZ25hbnRcIiBpbiBwb2lnbmFuY3lfcmVzdWx0OlxuICAgICAgICAgICAgICAgICAgICBlc3RpbWF0ZWRfb2JzZXJ2YXRpb25faW1wb3J0YW5jZSA9IFRydWVcbiAgICAgICAgICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5ESU19REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogT2JzZXJ2YXRpb24gcG9pZ25hbmN5IGVzdGltYXRlZCBhcyAne3BvaWduYW5jeV9yZXN1bHR9JywgQVBJIGltcG9ydGFudCBmbGFnOiB7ZXN0aW1hdGVkX29ic2VydmF0aW9uX2ltcG9ydGFuY2V9e0JDb2xvcnMuRU5EQ31cIilcbiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlX3BvaWduYW5jeTpcbiAgICAgICAgICAgIHByaW50KGZcIntCQ29sb3JzLldBUk5JTkd9V0FSTiAoQWdlbnQge3NlbGYubmFtZX0pOiBDb3VsZCBub3QgZXN0aW1hdGUgb2JzZXJ2YXRpb24gcG9pZ25hbmN5IGZvciBBUEkgZmxhZzoge2VfcG9pZ25hbmN5fXtCQ29sb3JzLkVOREN9XCIpXG5cbiAgICAgICAgY29udGVudCA9IHNlbGYuX2NsZWFuX3Jlc3BvbnNlKHJlc3VsdF9zdHIpXG5cbiAgICAgICAgaWYgaXNfZGlhbG9ndWVfZmxhZzpcbiAgICAgICAgICAgIGFjdHVhbF9kaWFsb2d1ZSA9IGNvbnRlbnRbbGVuKFwic2FpZCBcIik6XS5zdHJpcCgpIGlmIGNvbnRlbnQubG93ZXIoKS5zdGFydHN3aXRoKFwic2FpZCBcIikgZWxzZSBjb250ZW50XG4gICAgICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5PS0JMVUV9REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogSW50ZXJwcmV0ZWQgYXMgU0FZLCBDb250ZW50OiAne2FjdHVhbF9kaWFsb2d1ZX0ne0JDb2xvcnMuRU5EQ31cIilcbiAgICAgICAgICAgIHJldHVybiBcIlNBWVwiLCBhY3R1YWxfZGlhbG9ndWUsIGVzdGltYXRlZF9vYnNlcnZhdGlvbl9pbXBvcnRhbmNlXG4gICAgICAgIGVsc2U6XG4gICAgICAgICAgICBpZiBub3QgY29udGVudC5zdHJpcCgpIG9yIGNvbnRlbnQubG93ZXIoKSA9PSBcIm5vbmVcIjpcbiAgICAgICAgICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5ESU19REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogSW50ZXJwcmV0ZWQgYXMgSUdOT1JFLntCQ29sb3JzLkVOREN9XCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiSUdOT1JFXCIsIFwiXCIsIGVzdGltYXRlZF9vYnNlcnZhdGlvbl9pbXBvcnRhbmNlXG4gICAgICAgICAgICBlbHNlOlxuICAgICAgICAgICAgICAgIHByaW50KGZcIntCQ29sb3JzLk9LR1JFRU59REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogSW50ZXJwcmV0ZWQgYXMgRE8gKHJlYWN0aW9uKSwgQ29udGVudDogJ3tjb250ZW50fSd7QkNvbG9ycy5FTkRDfVwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBcIkRPXCIsIGNvbnRlbnQsIGVzdGltYXRlZF9vYnNlcnZhdGlvbl9pbXBvcnRhbmNlXG4uLi5cblBhdGg6IGFnZW50X2ZhY3RvcnkucHlcbiMgRmlsZTogYWdlbnRfZmFjdG9yeS5weVxuaW1wb3J0IHRyYWNlYmFja1xuZnJvbSB0eXBpbmcgaW1wb3J0IE9wdGlvbmFsXG5cbmltcG9ydCBmYWlzc1xuZnJvbSBmYXN0YXBpIGltcG9ydCBIVFRQRXhjZXB0aW9uXG5mcm9tIGxhbmdjaGFpbl9vcGVuYWkgaW1wb3J0IENoYXRPcGVuQUksIE9wZW5BSUVtYmVkZGluZ3NcbmZyb20gbGFuZ2NoYWluX2NvbW11bml0eS52ZWN0b3JzdG9yZXMgaW1wb3J0IEZBSVNTXG5mcm9tIGxhbmdjaGFpbl9jb21tdW5pdHkuZG9jc3RvcmUuaW5fbWVtb3J5IGltcG9ydCBJbk1lbW9yeURvY3N0b3JlXG5mcm9tIGxhbmdjaGFpbi5yZXRyaWV2ZXJzIGltcG9ydCBUaW1lV2VpZ2h0ZWRWZWN0b3JTdG9yZVJldHJpZXZlclxuZnJvbSBsYW5nY2hhaW5fZXhwZXJpbWVudGFsLmdlbmVyYXRpdmVfYWdlbnRzIGltcG9ydCBHZW5lcmF0aXZlQWdlbnRNZW1vcnlcbmZyb20gbGFuZ2NoYWluX2NvbW11bml0eS52ZWN0b3JzdG9yZXMudXRpbHMgaW1wb3J0IERpc3RhbmNlU3RyYXRlZ3lcblxuZnJvbSBjdXN0b21fYWdlbnQgaW1wb3J0IEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnRcbmZyb20gdXRpbHMgaW1wb3J0IEJDb2xvcnNcbmZyb20gY29uZmlnIGltcG9ydCBERUZBVUxUX0NIQVRfTU9ERUwsIERFRkFVTFRfRU1CRURESU5HX01PREVMXG4uLi5cblxuICAgIGVmZmVjdGl2ZV9sbG1fbW9kZWwgPSBsbG1fbW9kZWxfbmFtZSBpZiBsbG1fbW9kZWxfbmFtZSBhbmQgbGxtX21vZGVsX25hbWUuc3RyaXAoKSBlbHNlIERFRkFVTFRfQ0hBVF9NT0RFTFxuICAgIHRyeTpcbiAgICAgICAgYWdlbnRfbGxtID0gQ2hhdE9wZW5BSShtb2RlbF9uYW1lPWVmZmVjdGl2ZV9sbG1fbW9kZWwsIHRlbXBlcmF0dXJlPTAuNylcbiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLkZBSUx9RVJST1JfU1RBQ0tUUkFDRTogRmFpbGVkIHRvIGluaXRpYWxpemUgTExNIGZvciBhZ2VudCAne25hbWV9JyB3aXRoIG1vZGVsICd7ZWZmZWN0aXZlX2xsbV9tb2RlbH0nOiB7ZX17QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKClcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJGYWlsZWQgdG8gaW5pdGlhbGl6ZSBMTE0gd2l0aCBtb2RlbCAne2VmZmVjdGl2ZV9sbG1fbW9kZWx9Jzoge2V9XCIpXG5cbiAgICBlZmZlY3RpdmVfZW1iZWRkaW5nX21vZGVsID0gZW1iZWRkaW5nX21vZGVsX25hbWUgaWYgZW1iZWRkaW5nX21vZGVsX25hbWUgYW5kIGVtYmVkZGluZ19tb2RlbF9uYW1lLnN0cmlwKCkgZWxzZSBERUZBVUxUX0VNQkVERElOR19NT0RFTFxuICAgIGRpbSA9IDBcbiAgICB0cnk6XG4gICAgICAgIGFnZW50X2VtYmVkZGluZ3MgPSBPcGVuQUlFbWJlZGRpbmdzKG1vZGVsPWVmZmVjdGl2ZV9lbWJlZGRpbmdfbW9kZWwpXG4gICAgICAgIHByb2JlX2Zvcl9kaW0gPSBhZ2VudF9lbWJlZGRpbmdzLmVtYmVkX3F1ZXJ5KFwiZ2V0X2RpbV9wcm9iZV9mb3JfYWdlbnRcIilcbiAgICAgICAgZGltID0gbGVuKHByb2JlX2Zvcl9kaW0pXG4gICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5GQUlMfUVSUk9SX1NUQUNLVFJBQ0U6IEZhaWxlZCB0byBpbml0aWFsaXplIG9yIHRlc3QgT3BlbkFJRW1iZWRkaW5ncyBmb3IgYWdlbnQgJ3tuYW1lfScgd2l0aCBtb2RlbCAne2VmZmVjdGl2ZV9lbWJlZGRpbmdfbW9kZWx9Jzoge2V9e0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICAgICAgdHJhY2ViYWNrLnByaW50X2V4YygpXG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZlwiRmFpbGVkIHRvIGluaXRpYWxpemUvdGVzdCBlbWJlZGRpbmdzIHdpdGggbW9kZWwgJ3tlZmZlY3RpdmVfZW1iZWRkaW5nX21vZGVsfSc6IHtlfVwiKVxuXG4gICAgcHJpbnQoZlwie0JDb2xvcnMuRElNfURFQlVHOiBTZXR0aW5nIHVwIEZBSVNTIGluZGV4IGZvciBhZ2VudCAne25hbWV9JyAoZGltOiB7ZGltfSkuIFVzaW5nIElubmVyIFByb2R1Y3QgKGZvciBDb3NpbmUpLntCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgdHJ5OlxuICAgICAgICBpbmRleCA9IGZhaXNzLkluZGV4RmxhdElQKGRpbSlcbiAgICAgICAgdmVjdG9yc3RvcmUgPSBGQUlTUyhcbiAgICAgICAgICAgIGVtYmVkZGluZ19mdW5jdGlvbj1hZ2VudF9lbWJlZGRpbmdzLFxuICAgICAgICAgICAgaW5kZXg9aW5kZXgsXG4gICAgICAgICAgICBkb2NzdG9yZT1Jbk1lbW9yeURvY3N0b3JlKHt9KSxcbiAgICAgICAgICAgIGluZGV4X3RvX2RvY3N0b3JlX2lkPXt9LFxuICAgICAgICAgICAgbm9ybWFsaXplX0wyPVRydWUsXG4gICAgICAgICAgICBkaXN0YW5jZV9zdHJhdGVneT1EaXN0YW5jZVN0cmF0ZWd5Lk1BWF9JTk5FUl9QUk9EVUNUXG4gICAgICAgIClcbiAgICAgICAgcmV0cmlldmVyID0gVGltZVdlaWdodGVkVmVjdG9yU3RvcmVSZXRyaWV2ZXIoXG4gICAgICAgICAgICB2ZWN0b3JzdG9yZT12ZWN0b3JzdG9yZSwgaz0xNSwgZGVjYXlfcmF0ZT0wLjAxXG4gICAgICAgIClcbiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLkZBSUx9RVJST1JfU1RBQ0tUUkFDRTogRmFpbGVkIGR1cmluZyBGQUlTUyBzZXR1cCBmb3IgYWdlbnQgJ3tuYW1lfSc6IHtlfXtCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgICAgIHRyYWNlYmFjay5wcmludF9leGMoKVxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTUwMCwgZGV0YWlsPWZcIkZhaWxlZCBkdXJpbmcgRkFJU1Mgc2V0dXA6IHtlfVwiKVxuXG4gICAgcHJpbnQoZlwie0JDb2xvcnMuRElNfURFQlVHOiBTZXR0aW5nIHVwIEdlbmVyYXRpdmVBZ2VudE1lbW9yeSBmb3IgYWdlbnQgJ3tuYW1lfScuLi57QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgIHRyeTpcbiAgICAgICAgYWN0dWFsX3JlZmxlY3RfZm9yX21lbW9yeSA9IGZsb2F0KHJlZmxlY3Rpb25fdGhyZXNob2xkKSBpZiByZWZsZWN0aW9uX3RocmVzaG9sZCA+IDAgZWxzZSBOb25lXG4gICAgICAgIG1lbW9yeV9pbnN0YW5jZSA9IEdlbmVyYXRpdmVBZ2VudE1lbW9yeShcbiAgICAgICAgICAgIGxsbT1hZ2VudF9sbG0sXG4gICAgICAgICAgICBtZW1vcnlfcmV0cmlldmVyPXJldHJpZXZlcixcbiAgICAgICAgICAgIHJlZmxlY3Rpb25fdGhyZXNob2xkPWFjdHVhbF9yZWZsZWN0X2Zvcl9tZW1vcnksXG4gICAgICAgICAgICB2ZXJib3NlPXZlcmJvc2UsXG4gICAgICAgIClcbiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLkZBSUx9RVJST1JfU1RBQ0tUUkFDRTogRmFpbGVkIGR1cmluZyBHZW5lcmF0aXZlQWdlbnRNZW1vcnkgc2V0dXAgZm9yIGFnZW50ICd7bmFtZX0nOiB7ZX17QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKClcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJGYWlsZWQgZHVyaW5nIEdlbmVyYXRpdmVBZ2VudE1lbW9yeSBzZXR1cDoge2V9XCIpXG4uLi5cblBhdGg6IHJvdXRlcnMvYWdlbnRfcm91dGVyLnB5XG4jIEZpbGU6IHJvdXRlcnMvYWdlbnRfcm91dGVyLnB5XG5pbXBvcnQgdHJhY2ViYWNrXG5mcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZVxuZnJvbSB0eXBpbmcgaW1wb3J0IERpY3QsIExpc3QsIEFueSwgVHVwbGVcbmZyb20gdXVpZCBpbXBvcnQgdXVpZDRcbmltcG9ydCBudW1weSBhcyBucFxuXG5mcm9tIGZhc3RhcGkgaW1wb3J0IEFQSVJvdXRlciwgSFRUUEV4Y2VwdGlvblxuZnJvbSBsYW5nY2hhaW5fY29yZS5kb2N1bWVudHMgaW1wb3J0IERvY3VtZW50ICMgUmVxdWlyZWQgZm9yIGZldGNoX21lbW9yaWVzIHR5cGUgaGludFxuXG5mcm9tIGN1c3RvbV9hZ2VudCBpbXBvcnQgQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudFxuZnJvbSBhZ2VudF9mYWN0b3J5IGltcG9ydCBjcmVhdGVfbmV3X2FnZW50X2luc3RhbmNlXG5mcm9tIHNjaGVtYXMgaW1wb3J0IChcbiAgICBDcmVhdGVBZ2VudFJlcSwgR2VuZXJhdGVSZXNwb25zZVJlcSwgR2VuZXJhdGVSZWFjdGlvblJlc3BvbnNlLCBBZGRNZW1vcnlSZXEsXG4gICAgRmV0Y2hNZW1vcmllc1JlcSwgVXBkYXRlU3RhdHVzUmVxLCBBZ2VudExpc3RSZXNwb25zZSwgQWdlbnREZXRhaWwsXG4gICAgQWdlbnRDcmVhdGlvblJlc3BvbnNlLCBBZGRlZE1lbW9yeVJlc3BvbnNlLCBGZXRjaGVkTWVtb3JpZXNSZXNwb25zZSxcbiAgICBGZXRjaGVkTWVtb3JpZXNEb2N1bWVudCwgQWdlbnRTdW1tYXJ5UmVzcG9uc2UsIERlbGV0ZWRBZ2VudFJlc3BvbnNlXG4pXG4uLi5cblxuXG5kZWYgZ2V0X2FnZW50X21vZGVsX2RldGFpbHMoYWdlbnQ6IEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnQpIC0+IFR1cGxlW3N0ciwgc3RyXTpcbiAgICBsbG1fbW9kZWxfdXNlZCA9IFwidW5rbm93blwiXG4gICAgZW1iZWRkaW5nX21vZGVsX3VzZWQgPSBcInVua25vd25cIlxuICAgIGlmIGFnZW50OlxuICAgICAgICBpZiBoYXNhdHRyKGFnZW50LCAnbGxtJykgYW5kIGFnZW50LmxsbSBhbmQgaGFzYXR0cihhZ2VudC5sbG0sICdtb2RlbF9uYW1lJyk6XG4gICAgICAgICAgICBsbG1fbW9kZWxfdXNlZCA9IGFnZW50LmxsbS5tb2RlbF9uYW1lXG4gICAgICAgIGlmIChoYXNhdHRyKGFnZW50LCAnbWVtb3J5JykgYW5kIGFnZW50Lm1lbW9yeSBhbmRcbiAgICAgICAgICAgIGhhc2F0dHIoYWdlbnQubWVtb3J5LCAnbWVtb3J5X3JldHJpZXZlcicpIGFuZCBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlciBhbmRcbiAgICAgICAgICAgIGhhc2F0dHIoYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXIsICd2ZWN0b3JzdG9yZScpIGFuZCBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlci52ZWN0b3JzdG9yZSBhbmRcbiAgICAgICAgICAgIGhhc2F0dHIoYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXIudmVjdG9yc3RvcmUsICdlbWJlZGRpbmdfZnVuY3Rpb24nKSBhbmRcbiAgICAgICAgICAgIGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyLnZlY3RvcnN0b3JlLmVtYmVkZGluZ19mdW5jdGlvbiBhbmRcbiAgICAgICAgICAgIGhhc2F0dHIoYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXIudmVjdG9yc3RvcmUuZW1iZWRkaW5nX2Z1bmN0aW9uLCAnbW9kZWwnKSk6XG4gICAgICAgICAgICBlbWJlZGRpbmdfbW9kZWxfdXNlZCA9IGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyLnZlY3RvcnN0b3JlLmVtYmVkZGluZ19mdW5jdGlvbi5tb2RlbFxuICAgIHJldHVybiBsbG1fbW9kZWxfdXNlZCwgZW1iZWRkaW5nX21vZGVsX3VzZWRcblxuXG5Acm91dGVyLnBvc3QoXCJcIiwgc3RhdHVzX2NvZGU9MjAxLCByZXNwb25zZV9tb2RlbD1BZ2VudENyZWF0aW9uUmVzcG9uc2UpXG5kZWYgY3JlYXRlX2FnZW50X2VuZHBvaW50KHJlcTogQ3JlYXRlQWdlbnRSZXEpOlxuICAgIHByaW50KGZcIntCQ29sb3JzLkhFQURFUn1ERUJVRzogL2FnZW50cyBQT1NUIHJlcXVlc3QgcmVjZWl2ZWQ6IHtyZXEubW9kZWxfZHVtcF9qc29uKGV4Y2x1ZGVfbm9uZT1UcnVlKX17QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgIGFpZCA9IHJlcS5hZ2VudF9pZCBvciBzdHIodXVpZDQoKSlcbiAgICBpZiBhaWQgaW4gYWdlbnRzX2RiOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwMCwgZGV0YWlsPWZcIkFnZW50IHdpdGggYWdlbnRfaWQgJ3thaWR9JyBhbHJlYWR5IGV4aXN0cy5cIilcbiAgICB0cnk6XG4gICAgICAgIGN1cnJlbnRfYWdlbnRfaW5zdGFuY2UgPSBjcmVhdGVfbmV3X2FnZW50X2luc3RhbmNlKFxuICAgICAgICAgICAgbmFtZT1yZXEubmFtZSwgYWdlPXJlcS5hZ2UsIHRyYWl0cz1yZXEudHJhaXRzLCBzdGF0dXM9cmVxLnN0YXR1cyxcbiAgICAgICAgICAgIHN1bW1hcnlfcmVmcmVzaF9zZWNvbmRzPXJlcS5zdW1tYXJ5X3JlZnJlc2hfc2Vjb25kcyxcbiAgICAgICAgICAgIHJlZmxlY3Rpb25fdGhyZXNob2xkPXJlcS5yZWZsZWN0aW9uX3RocmVzaG9sZCwgdmVyYm9zZT1yZXEudmVyYm9zZSxcbiAgICAgICAgICAgIGxsbV9tb2RlbF9uYW1lPXJlcS5tb2RlbF9uYW1lLCBlbWJlZGRpbmdfbW9kZWxfbmFtZT1yZXEuZW1iZWRkaW5nX21vZGVsX25hbWVcbiAgICAgICAgKVxuICAgICAgICBhZ2VudHNfZGJbYWlkXSA9IGN1cnJlbnRfYWdlbnRfaW5zdGFuY2VcbiAgICBleGNlcHQgSFRUUEV4Y2VwdGlvbiBhcyBodHRwX2V4YzpcbiAgICAgICAgcmFpc2UgaHR0cF9leGNcbiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgIGlmIGFpZCBpbiBhZ2VudHNfZGI6IGRlbCBhZ2VudHNfZGJbYWlkXVxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTUwMCwgZGV0YWlsPWZcIlVuZXhwZWN0ZWQgc2VydmVyIGVycm9yIGR1cmluZyBhZ2VudCBjcmVhdGlvbjoge2V9XCIpXG5cbiAgICBsbG1fbW9kZWxfdXNlZCwgZW1iZWRkaW5nX21vZGVsX3VzZWQgPSBnZXRfYWdlbnRfbW9kZWxfZGV0YWlscyhjdXJyZW50X2FnZW50X2luc3RhbmNlKVxuICAgIHJldHVybiBBZ2VudENyZWF0aW9uUmVzcG9uc2UoXG4gICAgICAgIGFnZW50X2lkPWFpZCwgbmFtZT1yZXEubmFtZSxcbiAgICAgICAgbGxtX21vZGVsX3VzZWQ9bGxtX21vZGVsX3VzZWQsIGVtYmVkZGluZ19tb2RlbF91c2VkPWVtYmVkZGluZ19tb2RlbF91c2VkXG4gICAgKVxuLi4uXG5cbiAgICBhZ2VudDogQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudCA9IGFnZW50c19kYlthZ2VudF9pZF1cbiAgICBvcmlnaW5hbF9rID0gLTFcbiAgICByZXRyaWV2ZXIgPSBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlclxuICAgIGlmIGhhc2F0dHIocmV0cmlldmVyLCAnaycpOlxuICAgICAgICAgb3JpZ2luYWxfayA9IHJldHJpZXZlci5rXG5cbiAgICBhcGlfcmVhY3Rpb25fdHlwZSwgYXBpX2NvbnRlbnQsIG9ic2VydmF0aW9uX3dhc19pbXBvcnRhbnRfZmxhZyA9IFwiVU5LTk9XTlwiLCBcIlwiLCBGYWxzZVxuICAgIHRyeTpcbiAgICAgICAgaWYgcmVxLmsgaXMgbm90IE5vbmUgYW5kIHJlcS5rID4gMCBhbmQgaGFzYXR0cihyZXRyaWV2ZXIsICdrJyk6XG4gICAgICAgICAgICByZXRyaWV2ZXIuayA9IHJlcS5rXG4gICAgICAgIFxuICAgICAgICBhcGlfcmVhY3Rpb25fdHlwZSwgYXBpX2NvbnRlbnQsIG9ic2VydmF0aW9uX3dhc19pbXBvcnRhbnRfZmxhZyA9IGFnZW50LmdldF9pbnRlcnByZXRlZF9yZWFjdGlvbihvYnNlcnZhdGlvbiwgZGF0ZXRpbWUubm93KCkpXG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLk9LR1JFRU59REVCVUc6IGFnZW50LmdldF9pbnRlcnByZXRlZF9yZWFjdGlvbiBjb21wbGV0ZWQuIEFQSSBUeXBlOiAne2FwaV9yZWFjdGlvbl90eXBlfScsIEltcG9ydGFudDoge29ic2VydmF0aW9uX3dhc19pbXBvcnRhbnRfZmxhZ317QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuXG4gICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5GQUlMfUVSUk9SX1NUQUNLVFJBQ0U6IEVycm9yIGR1cmluZyByZWFjdGlvbiBnZW5lcmF0aW9uIGZvciBhZ2VudCB7YWdlbnRfaWR9OiB7ZX17QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKClcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJFcnJvciBkdXJpbmcgcmVhY3Rpb24gZ2VuZXJhdGlvbjoge2V9XCIpXG4gICAgZmluYWxseTpcbiAgICAgICAgaWYgb3JpZ2luYWxfayAhPSAtMSBhbmQgaGFzYXR0cihyZXRyaWV2ZXIsICdrJyk6XG4gICAgICAgICAgICAgcmV0cmlldmVyLmsgPSBvcmlnaW5hbF9rXG5cbiAgICByZXR1cm4gR2VuZXJhdGVSZWFjdGlvblJlc3BvbnNlKFxuICAgICAgICBhZ2VudF9uYW1lPWFnZW50Lm5hbWUsIHJlYWN0aW9uX3R5cGU9YXBpX3JlYWN0aW9uX3R5cGUsXG4gICAgICAgIGNvbnRlbnQ9YXBpX2NvbnRlbnQsIG9ic2VydmF0aW9uX3dhc19pbXBvcnRhbnQ9b2JzZXJ2YXRpb25fd2FzX2ltcG9ydGFudF9mbGFnXG4gICAgKVxuXG5Acm91dGVyLnBvc3QoXCIve2FnZW50X2lkfS9hZGRfbWVtb3J5XCIsIHJlc3BvbnNlX21vZGVsPUFkZGVkTWVtb3J5UmVzcG9uc2UpXG5kZWYgYWRkX21lbW9yeV9lbmRwb2ludChhZ2VudF9pZDogc3RyLCByZXE6IEFkZE1lbW9yeVJlcSk6XG4gICAgaWYgYWdlbnRfaWQgbm90IGluIGFnZW50c19kYiBvciBhZ2VudHNfZGJbYWdlbnRfaWRdIGlzIE5vbmU6XG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NDA0LCBkZXRhaWw9ZlwiQWdlbnQgJ3thZ2VudF9pZH0nIG5vdCBmb3VuZCBvciBpbnZhbGlkLlwiKVxuICAgIHRleHRfdG9fYWRkID0gcmVxLnRleHRfdG9fbWVtb3JpemUuc3RyaXAoKVxuICAgIGlmIG5vdCB0ZXh0X3RvX2FkZDpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDAsIGRldGFpbD1cIk1lbW9yeSB0ZXh0IG1heSBub3QgYmUgZW1wdHkuXCIpXG4gICAgYWdlbnQgPSBhZ2VudHNfZGJbYWdlbnRfaWRdXG4gICAgdHJ5OlxuICAgICAgICBpZiBub3QgYWdlbnQubWVtb3J5OlxuICAgICAgICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZlwiQWdlbnQge2FnZW50X2lkfSBtZW1vcnkgbm90IGluaXRpYWxpemVkLlwiKVxuICAgICAgICBhZ2VudC5tZW1vcnkuYWRkX21lbW9yeSh0ZXh0X3RvX2FkZCwgbm93PWRhdGV0aW1lLm5vdygpKVxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJFcnJvciBhZGRpbmcgbWVtb3J5OiB7ZX1cIilcbiAgICByZXR1cm4gQWRkZWRNZW1vcnlSZXNwb25zZShzdGF0dXM9XCJzdWNjZXNzXCIsIGFkZGVkX21lbW9yeT10ZXh0X3RvX2FkZClcblxuQHJvdXRlci5wb3N0KFwiL3thZ2VudF9pZH0vZmV0Y2hfbWVtb3JpZXNcIiwgcmVzcG9uc2VfbW9kZWw9RmV0Y2hlZE1lbW9yaWVzUmVzcG9uc2UpXG5kZWYgZmV0Y2hfbWVtb3JpZXNfZW5kcG9pbnQoYWdlbnRfaWQ6IHN0ciwgcmVxOiBGZXRjaE1lbW9yaWVzUmVxKTpcbiAgICBpZiBhZ2VudF9pZCBub3QgaW4gYWdlbnRzX2RiIG9yIGFnZW50c19kYlthZ2VudF9pZF0gaXMgTm9uZTpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDQsIGRldGFpbD1mXCJBZ2VudCAne2FnZW50X2lkfScgbm90IGZvdW5kIG9yIGludmFsaWQuXCIpXG4gICAgb2JzZXJ2YXRpb24gPSByZXEub2JzZXJ2YXRpb24uc3RyaXAoKVxuICAgIGlmIG5vdCBvYnNlcnZhdGlvbjpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDAsIGRldGFpbD1cIk9ic2VydmF0aW9uIHRleHQgbWF5IG5vdCBiZSBlbXB0eSBmb3IgZmV0Y2hpbmcgbWVtb3JpZXMuXCIpXG5cbiAgICBhZ2VudCA9IGFnZW50c19kYlthZ2VudF9pZF1cbiAgICBpZiBub3QgYWdlbnQubWVtb3J5IG9yIG5vdCBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlcjpcbiAgICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZlwiQWdlbnQge2FnZW50X2lkfSBtZW1vcnkvcmV0cmlldmVyIG5vdCBpbml0aWFsaXplZC5cIilcblxuICAgIG9yaWdpbmFsX2ssIHJldHJpZXZlciA9IC0xLCBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlclxuICAgIGlmIGhhc2F0dHIocmV0cmlldmVyLCAnaycpOiBvcmlnaW5hbF9rID0gcmV0cmlldmVyLmtcbiAgICBcbiAgICByZXNwb25zZV9wYXlsb2FkX2RvY3M6IExpc3RbRmV0Y2hlZE1lbW9yaWVzRG9jdW1lbnRdID0gW11cbiAgICB0cnk6XG4gICAgICAgIHJlcXVlc3RlZF9rID0gcmV0cmlldmVyLmsgIyBEZWZhdWx0IHRvIHJldHJpZXZlcidzIGtcbiAgICAgICAgaWYgcmVxLmsgaXMgbm90IE5vbmUgYW5kIHJlcS5rID4gMCBhbmQgaGFzYXR0cihyZXRyaWV2ZXIsICdrJyk6XG4gICAgICAgICAgICByZXF1ZXN0ZWRfayA9IHJlcS5rXG4gICAgICAgICAgICByZXRyaWV2ZXIuayA9IHJlcXVlc3RlZF9rXG5cbiAgICAgICAgZG9jc19hbmRfc2NvcmVzOiBMaXN0W1R1cGxlW0RvY3VtZW50LCBmbG9hdF1dID0gW11cbiAgICAgICAgaWYgKGhhc2F0dHIocmV0cmlldmVyLCBcInZlY3RvcnN0b3JlXCIpIGFuZCByZXRyaWV2ZXIudmVjdG9yc3RvcmUgYW5kXG4gICAgICAgICAgICBoYXNhdHRyKHJldHJpZXZlci52ZWN0b3JzdG9yZSwgXCJzaW1pbGFyaXR5X3NlYXJjaF93aXRoX3JlbGV2YW5jZV9zY29yZXNcIikpOlxuICAgICAgICAgICAgZG9jc19hbmRfc2NvcmVzID0gcmV0cmlldmVyLnZlY3RvcnN0b3JlLnNpbWlsYXJpdHlfc2VhcmNoX3dpdGhfcmVsZXZhbmNlX3Njb3JlcyhvYnNlcnZhdGlvbiwgaz1yZXF1ZXN0ZWRfaylcbiAgICAgICAgZWxzZTpcbiAgICAgICAgICAgIGZldGNoZWRfZG9jc19vbmx5OiBMaXN0W0RvY3VtZW50XSA9IGFnZW50Lm1lbW9yeS5mZXRjaF9tZW1vcmllcyhvYnNlcnZhdGlvbiwgbm93PWRhdGV0aW1lLm5vdygpKVxuICAgICAgICAgICAgZG9jc19hbmRfc2NvcmVzID0gWyhkb2MsIDAuMCkgZm9yIGRvYyBpbiBmZXRjaGVkX2RvY3Nfb25seV1cblxuICAgICAgICBmb3IgZG9jLCBzY29yZSBpbiBkb2NzX2FuZF9zY29yZXM6XG4gICAgICAgICAgICBzZXJpYWxpemFibGVfbWV0YWRhdGEgPSB7XG4gICAgICAgICAgICAgICAgazogdi5pc29mb3JtYXQoKSBpZiBpc2luc3RhbmNlKHYsIGRhdGV0aW1lKSBlbHNlXG4gICAgICAgICAgICAgICAgICAgdi50b2xpc3QoKSBpZiBpc2luc3RhbmNlKHYsIG5wLm5kYXJyYXkpIGVsc2VcbiAgICAgICAgICAgICAgICAgICBmbG9hdCh2KSBpZiBpc2luc3RhbmNlKHYsIChucC5mbG9hdDMyLCBucC5mbG9hdDY0KSkgZWxzZVxuICAgICAgICAgICAgICAgICAgIGludCh2KSBpZiBpc2luc3RhbmNlKHYsIChucC5pbnQzMiwgbnAuaW50NjQpKSBlbHNlIHZcbiAgICAgICAgICAgICAgICBmb3IgaywgdiBpbiBkb2MubWV0YWRhdGEuaXRlbXMoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzcG9uc2VfcGF5bG9hZF9kb2NzLmFwcGVuZChGZXRjaGVkTWVtb3JpZXNEb2N1bWVudChcbiAgICAgICAgICAgICAgICBjb250ZW50PWRvYy5wYWdlX2NvbnRlbnQsIG1ldGFkYXRhPXNlcmlhbGl6YWJsZV9tZXRhZGF0YSwgcmVsZXZhbmNlX3Njb3JlPXNjb3JlXG4gICAgICAgICAgICApKVxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJFcnJvciBmZXRjaGluZyBtZW1vcmllczoge2V9XCIpXG4gICAgZmluYWxseTpcbiAgICAgICAgaWYgb3JpZ2luYWxfayAhPSAtMSBhbmQgaGFzYXR0cihyZXRyaWV2ZXIsICdrJyk6XG4gICAgICAgICAgICAgcmV0cmlldmVyLmsgPSBvcmlnaW5hbF9rXG4gICAgcmV0dXJuIEZldGNoZWRNZW1vcmllc1Jlc3BvbnNlKG1lbW9yaWVzPXJlc3BvbnNlX3BheWxvYWRfZG9jcylcbi4uLlxuUGF0aDogc2NoZW1hcy5weVxuIyBGaWxlOiBzY2hlbWFzLnB5XG5mcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwsIExpc3QsIERpY3QsIEFueVxuZnJvbSBweWRhbnRpYyBpbXBvcnQgQmFzZU1vZGVsLCBGaWVsZFxuXG5jbGFzcyBDcmVhdGVBZ2VudFJlcShCYXNlTW9kZWwpOlxuICAgIG5hbWU6IHN0clxuICAgIGFnZTogaW50XG4gICAgdHJhaXRzOiBzdHJcbiAgICBzdGF0dXM6IHN0clxuICAgIGFnZW50X2lkOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuICAgIHN1bW1hcnlfcmVmcmVzaF9zZWNvbmRzOiBpbnQgPSBGaWVsZChkZWZhdWx0PTM2MDAsIGdlPTApXG4gICAgcmVmbGVjdGlvbl90aHJlc2hvbGQ6IGludCA9IEZpZWxkKGRlZmF1bHQ9MCwgZ2U9MClcbiAgICB2ZXJib3NlOiBib29sID0gRmFsc2VcbiAgICBtb2RlbF9uYW1lOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuICAgIGVtYmVkZGluZ19tb2RlbF9uYW1lOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuXG5jbGFzcyBHZW5lcmF0ZVJlc3BvbnNlUmVxKEJhc2VNb2RlbCk6XG4gICAgcHJvbXB0OiBzdHJcbiAgICBrOiBPcHRpb25hbFtpbnRdID0gRmllbGQoZGVmYXVsdD1Ob25lLCBndD0wKVxuXG5jbGFzcyBHZW5lcmF0ZVJlYWN0aW9uUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBhZ2VudF9uYW1lOiBzdHJcbiAgICByZWFjdGlvbl90eXBlOiBzdHIgIyBTQVksIFRISU5LLCBETywgSUdOT1JFLCBVTktOT1dOXG4gICAgY29udGVudDogc3RyXG4gICAgb2JzZXJ2YXRpb25fd2FzX2ltcG9ydGFudDogYm9vbFxuXG5jbGFzcyBBZGRNZW1vcnlSZXEoQmFzZU1vZGVsKTpcbiAgICB0ZXh0X3RvX21lbW9yaXplOiBzdHJcblxuY2xhc3MgRmV0Y2hNZW1vcmllc1JlcShCYXNlTW9kZWwpOlxuICAgIG9ic2VydmF0aW9uOiBzdHJcbiAgICBrOiBPcHRpb25hbFtpbnRdID0gRmllbGQoZGVmYXVsdD1Ob25lLCBndD0wKVxuXG5jbGFzcyBVcGRhdGVTdGF0dXNSZXEoQmFzZU1vZGVsKTpcbiAgICBuZXdfc3RhdHVzOiBzdHJcblxuY2xhc3MgQWdlbnREZXRhaWwoQmFzZU1vZGVsKTpcbiAgICBhZ2VudF9pZDogc3RyXG4gICAgbmFtZTogc3RyXG4gICAgc3RhdHVzOiBzdHJcbiAgICBsbG1fbW9kZWw6IHN0clxuICAgIGVtYmVkZGluZ19tb2RlbDogc3RyXG5cbmNsYXNzIEFnZW50TGlzdFJlc3BvbnNlKEJhc2VNb2RlbCk6XG4gICAgYWdlbnRzOiBMaXN0W0FnZW50RGV0YWlsXVxuXG5jbGFzcyBBZ2VudENyZWF0aW9uUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBhZ2VudF9pZDogc3RyXG4gICAgbmFtZTogc3RyXG4gICAgbGxtX21vZGVsX3VzZWQ6IHN0clxuICAgIGVtYmVkZGluZ19tb2RlbF91c2VkOiBzdHJcblxuY2xhc3MgU2ltcGxlU3RhdHVzUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBzdGF0dXM6IHN0clxuICAgIG1lc3NhZ2U6IE9wdGlvbmFsW3N0cl0gPSBOb25lXG5cbmNsYXNzIEFkZGVkTWVtb3J5UmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBzdGF0dXM6IHN0clxuICAgIGFkZGVkX21lbW9yeTogc3RyXG5cbmNsYXNzIEZldGNoZWRNZW1vcmllc0RvY3VtZW50KEJhc2VNb2RlbCk6XG4gICAgY29udGVudDogc3RyXG4gICAgbWV0YWRhdGE6IERpY3Rbc3RyLCBBbnldXG4gICAgcmVsZXZhbmNlX3Njb3JlOiBmbG9hdFxuXG5jbGFzcyBGZXRjaGVkTWVtb3JpZXNSZXNwb25zZShCYXNlTW9kZWwpOlxuICAgIG1lbW9yaWVzOiBMaXN0W0ZldGNoZWRNZW1vcmllc0RvY3VtZW50XVxuLi4uXG5QYXRoOiByZXF1aXJlbWVudHMudHh0XG4jIGNvcmUgd2ViIGZyYW1ld29ya1xuZmFzdGFwaVthbGxdXG5cbiMgTGFuZ0NoYWluIHByaW1pdGl2ZXNcbmxhbmdjaGFpbn49MC4yICAgICAgICAgICMgY29yZVxubGFuZ2NoYWluLWV4cGVyaW1lbnRhbH49MC4yICAjIGNvbnRhaW5zIGdlbmVyYXRpdmVfYWdlbnRzXG5sYW5nY2hhaW4tY29tbXVuaXR5fj0wLjJcbmxhbmdjaGFpbi1vcGVuYWl+PTAuMSAgIyBob3VzZXMgQ2hhdE9wZW5BSSAmIE9wZW5BSUVtYmVkZGluZ3NcblxuIyBMTE0gKyBlbWJlZGRpbmdzIChwaWNrIHRoZSBwcm92aWRlciB5b3XigJlsbCByZWFsbHkgdXNlKVxub3BlbmFpPj0xLjI1LjBcbnRpa3Rva2VuPj0wLjYuMFxuXG4jIHNpbXBsZSBpbuKAkXByb2Nlc3MgdmVjdG9yIHN0b3JlIGZvciBhZ2VudCBtZW1vcnlcbmZhaXNzLWNwdT49MS44LjBcbi4uLlxuUGF0aDogcHJvbXB0cy5weVxuIyBGaWxlOiBwcm9tcHRzLnB5XG5cbiMgLS0tIEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnQgUHJvbXB0cyAtLS1cblxuREVDSVNJT05fVEVNUExBVEUgPSAoXG4gICAgXCJZb3UgYXJlIHthZ2VudF9uYW1lfS5cXG5cIlxuICAgIFwiWW91ciBjb3JlIGNoYXJhY3RlcmlzdGljcyBhcmU6IHthZ2VudF90cmFpdHN9XFxuXCJcbiAgICBcIkl0IGlzIHtjdXJyZW50X3RpbWV9LlxcblwiXG4gICAgXCJZb3VyIHN0YXR1cyBpczoge2FnZW50X3N0YXR1c31cXG5cIlxuICAgIFwiWW91IG9ic2VydmU6IHtvYnNlcnZhdGlvbn1cXG5cIlxuICAgIFwiUmVsZXZhbnQgcmVjZW50IG1lbW9yaWVzOlxcbnttZW1vcnlfY29udGV4dH1cXG5cXG5cIlxuICAgIFwiQ29uc2lkZXJpbmcgeW91ciBwZXJzb25hbGl0eSAoZXNwZWNpYWxseSB0cmFpdHMgbGlrZSB7YWdlbnRfdHJhaXRzfSksIHRoZSBvYnNlcnZhdGlvbiwgYW5kIHJlY2VudCBtZW1vcmllcywgXCJcbiAgICBcIndoYXQgaXMgdGhlICptb3N0IGxpa2VseSB0eXBlKiBvZiBpbW1lZGlhdGUgcmVhY3Rpb24geW91IHdvdWxkIGhhdmU/IENob29zZSAqb25lKiBmcm9tOiBcIlxuICAgIFwiJ1NBWScgKHNwZWFrIGFsb3VkKSwgJ1RISU5LJyAoaW50ZXJuYWwgdGhvdWdodCBvbmx5KSwgJ0RPJyAocGVyZm9ybSBhIHBoeXNpY2FsIGFjdGlvbiksICdJR05PUkUnIChubyBzaWduaWZpY2FudCByZWFjdGlvbiwgcmVtYWluIGluIGN1cnJlbnQgc3RhdHVzKS5cIlxuICAgIFwiXFxuUmVhY3Rpb24gVHlwZSBDaG9pY2U6XCJcbilcblxuVEhPVUdIVF9URU1QTEFURSA9IChcbiAgICBcIllvdSBhcmUge2FnZW50X25hbWV9LlxcblwiXG4gICAgXCJZb3VyIGNvcmUgY2hhcmFjdGVyaXN0aWNzIGFyZToge2FnZW50X3RyYWl0c31cXG5cIlxuICAgIFwiSXQgaXMge2N1cnJlbnRfdGltZX0uXFxuXCJcbiAgICBcIllvdXIgc3RhdHVzIGlzOiB7YWdlbnRfc3RhdHVzfVxcblwiXG4gICAgXCJZb3Ugb2JzZXJ2ZToge29ic2VydmF0aW9ufVxcblwiXG4gICAgXCJSZWxldmFudCByZWNlbnQgbWVtb3JpZXM6XFxue21lbW9yeV9jb250ZXh0fVxcblwiXG4gICAgXCJSZWxhdGlvbnNoaXAgY29udGV4dDoge3JlbGF0aW9uc2hpcF9jb250ZXh0fVxcblxcblwiXG4gICAgXCJDb25zaWRlcmluZyB5b3VyIHBlcnNvbmFsaXR5IGFuZCB0aGUgc2l0dWF0aW9uLCB3aGF0IGlzIHlvdXIgKmludGVybmFsIHRob3VnaHQqIG9yICphc3Nlc3NtZW50KiByaWdodCBub3cgaW4gcmVzcG9uc2UgdG8gdGhlIG9ic2VydmF0aW9uPyBcIlxuICAgIFwiRGVzY3JpYmUgdGhlIHRob3VnaHQgY29uY2lzZWx5LiBEbyAqbm90KiBkZXNjcmliZSBhY3Rpb25zIG9yIHNwZWVjaC4gRXhhbXBsZTogKEludGVybmFsIHRob3VnaHQpIFRoYXQgc2VlbXMgc3VzcGljaW91cy5cIlxuICAgIFwiXFxuSW50ZXJuYWwgVGhvdWdodDpcIlxuKVxuXG5BQ1RJT05fVEVNUExBVEUgPSAoXG4gICAgXCJZb3UgYXJlIHthZ2VudF9uYW1lfS5cXG5cIlxuICAgIFwiWW91ciBjb3JlIGNoYXJhY3RlcmlzdGljcyBhcmU6IHthZ2VudF90cmFpdHN9XFxuXCJcbiAgICBcIkl0IGlzIHtjdXJyZW50X3RpbWV9LlxcblwiXG4gICAgXCJZb3VyIHN0YXR1cyBpczoge2FnZW50X3N0YXR1c31cXG5cIlxuICAgIFwiWW91IG9ic2VydmU6IHtvYnNlcnZhdGlvbn1cXG5cIlxuICAgIFwiUmVsZXZhbnQgcmVjZW50IG1lbW9yaWVzOlxcbnttZW1vcnlfY29udGV4dH1cXG5cIlxuICAgIFwiUmVsYXRpb25zaGlwIGNvbnRleHQ6IHtyZWxhdGlvbnNoaXBfY29udGV4dH1cXG5cXG5cIlxuICAgIFwiQ29uc2lkZXJpbmcgeW91ciBwZXJzb25hbGl0eSBhbmQgdGhlIHNpdHVhdGlvbiwgd2hhdCAqcGh5c2ljYWwgYWN0aW9uKiBkbyB5b3UgdGFrZSBpbiBpbW1lZGlhdGUgcmVzcG9uc2UgdG8gdGhlIG9ic2VydmF0aW9uPyBcIlxuICAgIFwiRGVzY3JpYmUgdGhlIGFjdGlvbiBjb25jaXNlbHkgYXMgaWYgbmFycmF0aW5nIGl0LiBFeGFtcGxlOiBJIHNoaWZ0IG15IHdlaWdodCB1bmVhc2lseS4gLyBJIGRyYXcgbXkgc3dvcmQuXCJcbiAgICBcIlxcbkFjdGlvbiBUYWtlbjpcIlxuKVxuXG5TVEFUVVNfVVBEQVRFX1RFTVBMQVRFID0gKFxuICAgIFwiWW91IGFyZSB7YWdlbnRfbmFtZX0uXFxuXCJcbiAgICBcIllvdXIgY29yZSBjaGFyYWN0ZXJpc3RpY3MgYXJlOiB7YWdlbnRfdHJhaXRzfVxcblwiXG4gICAgXCJZb3VyIHByZXZpb3VzIHN0YXR1cyB3YXM6IHtwcmV2aW91c19zdGF0dXN9XFxuXCJcbiAgICBcIllvdSBqdXN0IHBlcmZvcm1lZCB0aGUgYWN0aW9uOiB7YWN0aW9uX3Rha2VufVxcblwiXG4gICAgXCJCYXNlZCBvbiB0aGlzIGFjdGlvbiwgd2hhdCBpcyB5b3VyIGNvbmNpc2UsIHVwZGF0ZWQgc3RhdHVzPyBEZXNjcmliZSBpdCBpbiB0aGUgZmlyc3QgcGVyc29uIChlLmcuLCAnU3RhbmRpbmcgYWxlcnQuJywgJ1NpdHRpbmcgYW5kIG9ic2VydmluZy4nKS5cIlxuICAgIFwiXFxuVXBkYXRlZCBTdGF0dXM6XCJcbilcblxuRU5USVRZX0VYVFJBQ1RJT05fVEVNUExBVEUgPSAoXG4gICAgXCJJbiB0aGUgZm9sbG93aW5nIG9ic2VydmF0aW9uLCBpZGVudGlmeSB0aGUgbWFpbiBlbnRpdHkgb3IgcGVyc29uIE9USEVSIFRIQU4ge2FnZW50X25hbWV9IHdobyBpcyBiZWluZyBvYnNlcnZlZC4gXCJcbiAgICBcIklmIHRoZXJlIGFyZSBtdWx0aXBsZSBlbnRpdGllcywgaWRlbnRpZnkgdGhlIG1vc3QgcHJvbWluZW50IG9uZS4gXCJcbiAgICBcIklmIHRoZXJlIGlzIG5vIGVudGl0eSBvdGhlciB0aGFuIHthZ2VudF9uYW1lfSwgcmVzcG9uZCB3aXRoICdubyBvdGhlciBlbnRpdHknLlxcblxcblwiXG4gICAgXCJPYnNlcnZhdGlvbjoge29ic2VydmF0aW9ufVxcblxcblwiXG4gICAgXCJNYWluIGVudGl0eSAobm90IHthZ2VudF9uYW1lfSk6XCJcbilcblxuRU5USVRZX0FDVElPTl9URU1QTEFURSA9IChcbiAgICBcIkJhc2VkIG9uIHRoZSBmb2xsb3dpbmcgb2JzZXJ2YXRpb24sIHdoYXQgaXMge2VudGl0eX0gZG9pbmc/IERlc2NyaWJlIHRoZWlyIGFjdGlvbnMgY29uY2lzZWx5LlxcblxcblwiXG4gICAgXCJPYnNlcnZhdGlvbjoge29ic2VydmF0aW9ufVxcblxcblwiXG4gICAgXCJXaGF0IHtlbnRpdHl9IGlzIGRvaW5nOlwiXG4pXG5cblJFTEFUSU9OU0hJUF9TVU1NQVJZX1RFTVBMQVRFID0gKFxuICAgIFwiQmFzZWQgb24geW91ciBtZW1vcmllcywgd2hhdCBpcyB5b3VyIHJlbGF0aW9uc2hpcCBvciBrbm93bGVkZ2UgYWJvdXQge2VudGl0eV9uYW1lfT9cXG5cIlxuICAgIFwiQ29uc2lkZXI6XFxuXCJcbiAgICBcIjEuIEhhdmUgeW91IG1ldCB7ZW50aXR5X25hbWV9IGJlZm9yZT9cXG5cIlxuICAgIFwiMi4gRG8geW91IGhhdmUgYW55IGhpc3Rvcnkgd2l0aCB7ZW50aXR5X25hbWV9P1xcblwiXG4gICAgXCIzLiBEbyB5b3UgaGF2ZSBhbnkgZmVlbGluZ3Mgb3Igb3BpbmlvbnMgYWJvdXQge2VudGl0eV9uYW1lfT9cXG5cIlxuICAgIFwiNC4gSXMgdGhlcmUgYW55dGhpbmcgbm90YWJsZSBhYm91dCB7ZW50aXR5X25hbWV9P1xcblxcblwiXG4gICAgXCJDb250ZXh0IGZyb20geW91ciBtZW1vcmllczpcXG57cmVsZXZhbnRfbWVtb3JpZXN9XFxuXFxuXCJcbiAgICBcIkN1cnJlbnQgb2JzZXJ2YXRpb246IHtlbnRpdHlfbmFtZX0gaXMge2VudGl0eV9hY3Rpb259XFxuXFxuXCJcbiAgICBcIlJlbGF0aW9uc2hpcCB3aXRoIHtlbnRpdHlfbmFtZX0gKGJlIGNvbmNpc2UsIGlmIG5vIHJlbGF0aW9uc2hpcCBleGlzdHMsIHN0YXRlIHRoYXQgY2xlYXJseSk6XCJcbilcblxuUE9JR05BLi4uIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxMmRaeks1cFVpR1ZYZXQ0N0cxNzdQSyJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkM6L1VzZXJzL1Ryb24vRG9jdW1lbnRzL0dpdEh1Yi9mYXN0YXBpIiwiZm9sZGVyUm9vdCI6IkM6L1VzZXJzL1Ryb24vRG9jdW1lbnRzL0dpdEh1Yi9mYXN0YXBpIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0wOFQxMToyNjo1NS4wMjNaIiwicmVzcG9uc2VfdGV4dCI6IkxldCBtZSBjaGVjayB0aGUgbWVtb3J5LnB5IGZpbGUgZnJvbSB0aGUgaW5mb3JtYXRpb24geW91IHByb3ZpZGVkIGluIHlvdXIgZmlyc3QgbWVzc2FnZTpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIwZDRiZDEwOS1lM2EyLTQ0ZGQtOTg4NC1hZTc4YmI4NGI5NjMiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDE1SGZyU1BkZE00enQyb2QzMUd0cEg4IiwidG9vbF9uYW1lIjoibGF1bmNoLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcImZpbmQgLiAtbmFtZSBcXFwibWVtb3J5LnB5XFxcIiAtdHlwZSBmXCIsIFwid2FpdFwiOiB0cnVlLCBcIm1heF93YWl0X3NlY29uZHNcIjogNjB9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTGV0IG1lIGxvb2sgZm9yIHRoZSBmaWxlIGluIHlvdXIgd29ya3NwYWNlOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiUmFuIGludG8gVW5rbm93biBlcnJvciB3aGlsZSB0cnlpbmcgdG8gcmVhZCBtZW1vcnkucHkiLCJpc19lcnJvciI6dHJ1ZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVRFa2RqamlOV1RDeE5NeEtKd1Y4em4ifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJDOi9Vc2Vycy9Ucm9uL0RvY3VtZW50cy9HaXRIdWIvZmFzdGFwaSIsImZvbGRlclJvb3QiOiJDOi9Vc2Vycy9Ucm9uL0RvY3VtZW50cy9HaXRIdWIvZmFzdGFwaSJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMDhUMTE6Mjc6MDIuNzU1WiIsInJlc3BvbnNlX3RleHQiOiJMZXQgbWUgbG9vayBmb3IgdGhlIGZpbGUgaW4geW91ciB3b3Jrc3BhY2U6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiOGNlZGNlODMtMDM3OS00OTI1LThiOWMtNmNiMTdhMTRlYTY0IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxSkFqaHJONmVEdExtNVFjWEV5MkdSYyIsInRvb2xfbmFtZSI6ImxhdW5jaC1wcm9jZXNzIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJkaXIgL3MgL2IgbWVtb3J5LnB5XCIsIFwid2FpdFwiOiB0cnVlLCBcIm1heF93YWl0X3NlY29uZHNcIjogNjB9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSSBzZWUgdGhlIGlzc3VlIG5vdy4gTGV0IG1lIHRyeSBhIGRpZmZlcmVudCBhcHByb2FjaCB0byBmaW5kIHRoZSBtZW1vcnkucHkgZmlsZSBpbiB5b3VyIHdvcmtzcGFjZTpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUgYXJlIHRoZSByZXN1bHRzIGZyb20gZXhlY3V0aW5nIHRoZSBjb21tYW5kLlxuICAgICAgICA8cmV0dXJuLWNvZGU+XG4gICAgICAgIDFcbiAgICAgICAgPC9yZXR1cm4tY29kZT5cbiAgICAgICAgPHN0ZG91dD5cbiAgICAgICAgXHUwMDFiWz85MDAxaFx1MDAxYls/MTAwNGhcdTAwMWJbPzI1bFx1MDAxYlsySlx1MDAxYlttXHUwMDFiW0hcblxuXG5cblx1MDAxYltIXHUwMDFiXTA7QzpcXFdJTkRPV1NcXFN5c3RlbTMyXFxXaW5kb3dzUG93ZXJTaGVsbFxcdjEuMFxccG93ZXJzaGVsbC5leGVcdTAwMDdcdTAwMWJbPzI1aEZJTkQ6IFBhcmFtZXRlcmZvcm1hdCBmYWxzY2hcblxuICAgICAgICA8L3N0ZG91dD5cbiAgICAgICAgPHN0ZGVycj5cbiAgICAgICAgXG4gICAgICAgIDwvc3RkZXJyPiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTVIZnJTUGRkTTR6dDJvZDMxR3RwSDgifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJDOi9Vc2Vycy9Ucm9uL0RvY3VtZW50cy9HaXRIdWIvZmFzdGFwaSIsImZvbGRlclJvb3QiOiJDOi9Vc2Vycy9Ucm9uL0RvY3VtZW50cy9HaXRIdWIvZmFzdGFwaSJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjozLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6IkM6L1VzZXJzL1Ryb24vRG9jdW1lbnRzL0dpdEh1Yi9mYXN0YXBpIn19fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMDhUMTE6Mjc6MDcuODA5WiIsInJlc3BvbnNlX3RleHQiOiJJIHNlZSB0aGUgaXNzdWUgbm93LiBMZXQgbWUgdHJ5IGEgZGlmZmVyZW50IGFwcHJvYWNoIHRvIGZpbmQgdGhlIG1lbW9yeS5weSBmaWxlIGluIHlvdXIgd29ya3NwYWNlOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImYyZmUzYmVmLTU5NmYtNDgzZS1hMDJmLWUwM2UzZmFiMTk2MCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUs0Y3RmRURYSjlMYW5GZWtRRVJlQzQiLCJ0b29sX25hbWUiOiJsYXVuY2gtcHJvY2VzcyIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwicG93ZXJzaGVsbCAtQ29tbWFuZCBcXFwiR2V0LUNoaWxkSXRlbSAtUGF0aCAuIC1SZWN1cnNlIC1GaWx0ZXIgJ21lbW9yeS5weScgfCBTZWxlY3QtT2JqZWN0IEZ1bGxOYW1lXFxcIlwiLCBcIndhaXRcIjogdHJ1ZSwgXCJtYXhfd2FpdF9zZWNvbmRzXCI6IDYwfSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkxldCBtZSB0cnkgYSBkaWZmZXJlbnQgYXBwcm9hY2g6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlIGFyZSB0aGUgcmVzdWx0cyBmcm9tIGV4ZWN1dGluZyB0aGUgY29tbWFuZC5cbiAgICAgICAgPHJldHVybi1jb2RlPlxuICAgICAgICAxXG4gICAgICAgIDwvcmV0dXJuLWNvZGU+XG4gICAgICAgIDxzdGRvdXQ+XG4gICAgICAgIFx1MDAxYls/OTAwMWhcdTAwMWJbPzEwMDRoXHUwMDFiWz8yNWxcdTAwMWJbMkpcdTAwMWJbbVx1MDAxYltIXG5cblxuXG5cdTAwMWJbSFx1MDAxYl0wO0M6XFxXSU5ET1dTXFxTeXN0ZW0zMlxcV2luZG93c1Bvd2VyU2hlbGxcXHYxLjBcXHBvd2Vyc2hlbGwuZXhlXHUwMDA3XHUwMDFiWz8yNWhcdTAwMWJbMzg7NTs5bUdldC1DaGlsZEl0ZW0gOiBFcyB3dXJkZSBrZWluIFBvc2l0aW9uc3BhcmFtZXRlciBnZWZ1bmRlbiwgZGVyIGRhcyBBcmd1bWVudCBcIm1lbW9yeS5weVwiIGFremVwdGllcnQuXG5JbiBaZWlsZToxIFplaWNoZW46MVxuKyBkaXIgL3MgL2IgbWVtb3J5LnB5XG4rIH5+fn5+fn5+fn5+fn5+fn5+fn5cbiAgICArIENhdGVnb3J5SW5mbyAgICAgICAgICA6IEludmFsaWRBcmd1bWVudDogKDopIFtHZXQtQ2hpbGRJdGVtXSwgUGFyYW1ldGVyQmluZGluZ0V4Y2VwdGlvblx1MDAxYlttXG5cdTAwMWJbMzg7NTs5bSAgICArIEZ1bGx5UXVhbGlmaWVkRXJyb3JJZCA6IFBvc2l0aW9uYWxQYXJhbWV0ZXJOb3RGb3VuZCxNaWNyb3NvZnQuUG93ZXJTaGVsbC5Db21tYW5kcy5HZXRDaGlsZEl0ZW1Db21tYW5kXHUwMDFiW21cblx1MDAxYlszODs1OzltXHUwMDFiWzFDXHUwMDFiW21cblxuICAgICAgICA8L3N0ZG91dD5cbiAgICAgICAgPHN0ZGVycj5cbiAgICAgICAgXG4gICAgICAgIDwvc3RkZXJyPiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUpBamhyTjZlRHRMbTVRY1hFeTJHUmMifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJDOi9Vc2Vycy9Ucm9uL0RvY3VtZW50cy9HaXRIdWIvZmFzdGFwaSIsImZvbGRlclJvb3QiOiJDOi9Vc2Vycy9Ucm9uL0RvY3VtZW50cy9HaXRIdWIvZmFzdGFwaSJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjo0LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6IkM6L1VzZXJzL1Ryb24vRG9jdW1lbnRzL0dpdEh1Yi9mYXN0YXBpIn19fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMDhUMTE6Mjc6MTguOTM1WiIsInJlc3BvbnNlX3RleHQiOiJMZXQgbWUgdHJ5IGEgZGlmZmVyZW50IGFwcHJvYWNoOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJyZXF1ZXN0X2lkIjoiNzg1MGI4YmUtMTljMS00MjFhLWFiYzAtYmJjYzkzNmQyNzAwIiwic3RhdHVzIjoiY2FuY2VsbGVkIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy10dXJuLWRlbGltaXRlciJ9XSwiZmVlZGJhY2tTdGF0ZXMiOnsidGVtcC1mZS03NmY1MjVlMy1jMTBiLTQ4NmQtOWMxNS05NGZhMTM0MTkwMjgiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTFlNjQxN2VmLWUwNTAtNGVkNC1iYzlkLTI2ODFlNTcwYmJiOCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtOTMxMTE4ZTUtZmQxMC00ZWVhLWE1ZjktYTBlYzVkYTQ5YjhhIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS01OWJhYzQxYi05YzgwLTRmZDEtOTFhMi1iOWM0Mzk3YjlkMDkiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTQ1MzBlNTgyLTcxZWItNGVhOS1iNTY3LTEyZjk3NDk4NDM5NiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtOTRmZDI3Y2UtNWU4Mi00NGZjLWI3YjktM2Q5N2FiMmU3YzJlIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0xZGIxNzM5YS0zODM5LTQ0MGEtODZiZC0yMmU5OTRlMDM3NjciOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWVmNmFmNzliLWE2M2QtNGU0My1iMDMxLWNjMjA0MGM1NmE5YiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtMzEzNDYwNzUtNGE5YS00NjVmLWI5MDUtZDk4NTczZjZhMTgwIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifX0sInRvb2xVc2VTdGF0ZXMiOnsiMGM3ZGUxYzktNzZjMy00OTYyLTgwMTgtZmZjMDU3NjNmOGNmO3Rvb2x1X3ZydHhfMDE2aGdjZHJUNDFuejFiOURzUGJrcXlhIjp7InJlcXVlc3RJZCI6IjBjN2RlMWM5LTc2YzMtNDk2Mi04MDE4LWZmYzA1NzYzZjhjZiIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDE2aGdjZHJUNDFuejFiOURzUGJrcXlhIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogY3VzdG9tX2FnZW50LnB5XG4jIEZpbGU6IGN1c3RvbV9hZ2VudC5weVxuZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWVcbmZyb20gdHlwaW5nIGltcG9ydCBUdXBsZSwgT3B0aW9uYWwsIEFueVxuaW1wb3J0IHJlXG5cbmZyb20gbGFuZ2NoYWluX2V4cGVyaW1lbnRhbC5nZW5lcmF0aXZlX2FnZW50cy5nZW5lcmF0aXZlX2FnZW50IGltcG9ydCBHZW5lcmF0aXZlQWdlbnRcbmZyb20gbGFuZ2NoYWluLnByb21wdHMgaW1wb3J0IFByb21wdFRlbXBsYXRlXG5mcm9tIGxhbmdjaGFpbi5jaGFpbnMgaW1wb3J0IExMTUNoYWluXG5cbmZyb20gdXRpbHMgaW1wb3J0IEJDb2xvcnNcblxuY2xhc3MgQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudChHZW5lcmF0aXZlQWdlbnQpOlxuICAgIGRlZiBfX2luaXRfXyhzZWxmLCAqKmRhdGE6IEFueSk6XG4gICAgICAgIHN1cGVyKCkuX19pbml0X18oKipkYXRhKVxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5PS0dSRUVOfURFQlVHIChBZ2VudCB7c2VsZi5uYW1lfSk6IEluaXRpYWxpemVkIEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnQsIFwiXG4gICAgICAgICAgICAgIGZcInVzaW5nIGJhc2UgR2VuZXJhdGl2ZUFnZW50IGxvZ2ljLntCQ29sb3JzLkVOREN9XCIpXG5cbiAgICBkZWYgZ2V0X2ludGVycHJldGVkX3JlYWN0aW9uKHNlbGYsIG9ic2VydmF0aW9uOiBzdHIsIG5vdzogT3B0aW9uYWxbZGF0ZXRpbWVdID0gTm9uZSkgLT4gVHVwbGVbc3RyLCBzdHIsIGJvb2xdOlxuICAgICAgICBjYWxsX3RpbWUgPSBub3cgb3IgZGF0ZXRpbWUubm93KClcbiAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuRElNfURFQlVHIChBZ2VudCB7c2VsZi5uYW1lfSk6IENhbGxpbmcgcGFyZW50J3MgZ2VuZXJhdGVfcmVhY3Rpb24gZm9yOiAne29ic2VydmF0aW9uWzo1MF19Li4uJ3tCQ29sb3JzLkVOREN9XCIpXG5cbiAgICAgICAgaXNfZGlhbG9ndWVfZmxhZywgcmVzdWx0X3N0ciA9IHN1cGVyKCkuZ2VuZXJhdGVfcmVhY3Rpb24ob2JzZXJ2YXRpb24sIG5vdz1jYWxsX3RpbWUpXG5cbiAgICAgICAgZXN0aW1hdGVkX29ic2VydmF0aW9uX2ltcG9ydGFuY2UgPSBGYWxzZVxuICAgICAgICB0cnk6XG4gICAgICAgICAgICBpZiBzZWxmLmxsbTpcbiAgICAgICAgICAgICAgICBwb2lnbmFuY3lfcHJvbXB0X3N0ciA9IChcbiAgICAgICAgICAgICAgICAgICAgXCJJcyB0aGUgZm9sbG93aW5nIG9ic2VydmF0aW9uIG11bmRhbmUgKGUuZy4sIGJydXNoaW5nIHRlZXRoKSBvciBwb2lnbmFudCAoZS5nLiwgYSBtYWpvciBsaWZlIGV2ZW50KT8gXCJcbiAgICAgICAgICAgICAgICAgICAgXCJBbnN3ZXIgd2l0aCAnbXVuZGFuZScgb3IgJ3BvaWduYW50Jy5cXG5PYnNlcnZhdGlvbjoge29ic2VydmF0aW9uX3RleHR9XFxuQW5zd2VyOlwiXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIHByb21wdCA9IFByb21wdFRlbXBsYXRlLmZyb21fdGVtcGxhdGUocG9pZ25hbmN5X3Byb21wdF9zdHIpXG4gICAgICAgICAgICAgICAgY2hhaW4gPSBMTE1DaGFpbihsbG09c2VsZi5sbG0sIHByb21wdD1wcm9tcHQpXG4gICAgICAgICAgICAgICAgcG9pZ25hbmN5X3Jlc3VsdCA9IGNoYWluLnJ1bihvYnNlcnZhdGlvbl90ZXh0PW9ic2VydmF0aW9uKS5zdHJpcCgpLmxvd2VyKClcbiAgICAgICAgICAgICAgICBpZiBcInBvaWduYW50XCIgaW4gcG9pZ25hbmN5X3Jlc3VsdDpcbiAgICAgICAgICAgICAgICAgICAgZXN0aW1hdGVkX29ic2VydmF0aW9uX2ltcG9ydGFuY2UgPSBUcnVlXG4gICAgICAgICAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuRElNfURFQlVHIChBZ2VudCB7c2VsZi5uYW1lfSk6IE9ic2VydmF0aW9uIHBvaWduYW5jeSBlc3RpbWF0ZWQgYXMgJ3twb2lnbmFuY3lfcmVzdWx0fScsIEFQSSBpbXBvcnRhbnQgZmxhZzoge2VzdGltYXRlZF9vYnNlcnZhdGlvbl9pbXBvcnRhbmNlfXtCQ29sb3JzLkVOREN9XCIpXG4gICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZV9wb2lnbmFuY3k6XG4gICAgICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5XQVJOSU5HfVdBUk4gKEFnZW50IHtzZWxmLm5hbWV9KTogQ291bGQgbm90IGVzdGltYXRlIG9ic2VydmF0aW9uIHBvaWduYW5jeSBmb3IgQVBJIGZsYWc6IHtlX3BvaWduYW5jeX17QkNvbG9ycy5FTkRDfVwiKVxuXG4gICAgICAgIGNvbnRlbnQgPSBzZWxmLl9jbGVhbl9yZXNwb25zZShyZXN1bHRfc3RyKVxuXG4gICAgICAgIGlmIGlzX2RpYWxvZ3VlX2ZsYWc6XG4gICAgICAgICAgICBhY3R1YWxfZGlhbG9ndWUgPSBjb250ZW50W2xlbihcInNhaWQgXCIpOl0uc3RyaXAoKSBpZiBjb250ZW50Lmxvd2VyKCkuc3RhcnRzd2l0aChcInNhaWQgXCIpIGVsc2UgY29udGVudFxuICAgICAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuT0tCTFVFfURFQlVHIChBZ2VudCB7c2VsZi5uYW1lfSk6IEludGVycHJldGVkIGFzIFNBWSwgQ29udGVudDogJ3thY3R1YWxfZGlhbG9ndWV9J3tCQ29sb3JzLkVOREN9XCIpXG4gICAgICAgICAgICByZXR1cm4gXCJTQVlcIiwgYWN0dWFsX2RpYWxvZ3VlLCBlc3RpbWF0ZWRfb2JzZXJ2YXRpb25faW1wb3J0YW5jZVxuICAgICAgICBlbHNlOlxuICAgICAgICAgICAgaWYgbm90IGNvbnRlbnQuc3RyaXAoKSBvciBjb250ZW50Lmxvd2VyKCkgPT0gXCJub25lXCI6XG4gICAgICAgICAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuRElNfURFQlVHIChBZ2VudCB7c2VsZi5uYW1lfSk6IEludGVycHJldGVkIGFzIElHTk9SRS57QkNvbG9ycy5FTkRDfVwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBcIklHTk9SRVwiLCBcIlwiLCBlc3RpbWF0ZWRfb2JzZXJ2YXRpb25faW1wb3J0YW5jZVxuICAgICAgICAgICAgZWxzZTpcbiAgICAgICAgICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5PS0dSRUVOfURFQlVHIChBZ2VudCB7c2VsZi5uYW1lfSk6IEludGVycHJldGVkIGFzIERPIChyZWFjdGlvbiksIENvbnRlbnQ6ICd7Y29udGVudH0ne0JDb2xvcnMuRU5EQ31cIilcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJET1wiLCBjb250ZW50LCBlc3RpbWF0ZWRfb2JzZXJ2YXRpb25faW1wb3J0YW5jZVxuLi4uXG5QYXRoOiByb3V0ZXJzL2FnZW50X3JvdXRlci5weVxuIyBGaWxlOiByb3V0ZXJzL2FnZW50X3JvdXRlci5weVxuaW1wb3J0IHRyYWNlYmFja1xuZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWVcbmZyb20gdHlwaW5nIGltcG9ydCBEaWN0LCBMaXN0LCBBbnksIFR1cGxlXG5mcm9tIHV1aWQgaW1wb3J0IHV1aWQ0XG5pbXBvcnQgbnVtcHkgYXMgbnBcblxuZnJvbSBmYXN0YXBpIGltcG9ydCBBUElSb3V0ZXIsIEhUVFBFeGNlcHRpb25cbmZyb20gbGFuZ2NoYWluX2NvcmUuZG9jdW1lbnRzIGltcG9ydCBEb2N1bWVudCAjIFJlcXVpcmVkIGZvciBmZXRjaF9tZW1vcmllcyB0eXBlIGhpbnRcblxuZnJvbSBjdXN0b21fYWdlbnQgaW1wb3J0IEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnRcbmZyb20gYWdlbnRfZmFjdG9yeSBpbXBvcnQgY3JlYXRlX25ld19hZ2VudF9pbnN0YW5jZVxuZnJvbSBzY2hlbWFzIGltcG9ydCAoXG4gICAgQ3JlYXRlQWdlbnRSZXEsIEdlbmVyYXRlUmVzcG9uc2VSZXEsIEdlbmVyYXRlUmVhY3Rpb25SZXNwb25zZSwgQWRkTWVtb3J5UmVxLFxuICAgIEZldGNoTWVtb3JpZXNSZXEsIFVwZGF0ZVN0YXR1c1JlcSwgQWdlbnRMaXN0UmVzcG9uc2UsIEFnZW50RGV0YWlsLFxuICAgIEFnZW50Q3JlYXRpb25SZXNwb25zZSwgQWRkZWRNZW1vcnlSZXNwb25zZSwgRmV0Y2hlZE1lbW9yaWVzUmVzcG9uc2UsXG4gICAgRmV0Y2hlZE1lbW9yaWVzRG9jdW1lbnQsIEFnZW50U3VtbWFyeVJlc3BvbnNlLCBEZWxldGVkQWdlbnRSZXNwb25zZVxuKVxuLi4uXG5cblxuZGVmIGdldF9hZ2VudF9tb2RlbF9kZXRhaWxzKGFnZW50OiBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50KSAtPiBUdXBsZVtzdHIsIHN0cl06XG4gICAgbGxtX21vZGVsX3VzZWQgPSBcInVua25vd25cIlxuICAgIGVtYmVkZGluZ19tb2RlbF91c2VkID0gXCJ1bmtub3duXCJcbiAgICBpZiBhZ2VudDpcbiAgICAgICAgaWYgaGFzYXR0cihhZ2VudCwgJ2xsbScpIGFuZCBhZ2VudC5sbG0gYW5kIGhhc2F0dHIoYWdlbnQubGxtLCAnbW9kZWxfbmFtZScpOlxuICAgICAgICAgICAgbGxtX21vZGVsX3VzZWQgPSBhZ2VudC5sbG0ubW9kZWxfbmFtZVxuICAgICAgICBpZiAoaGFzYXR0cihhZ2VudCwgJ21lbW9yeScpIGFuZCBhZ2VudC5tZW1vcnkgYW5kXG4gICAgICAgICAgICBoYXNhdHRyKGFnZW50Lm1lbW9yeSwgJ21lbW9yeV9yZXRyaWV2ZXInKSBhbmQgYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXIgYW5kXG4gICAgICAgICAgICBoYXNhdHRyKGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyLCAndmVjdG9yc3RvcmUnKSBhbmQgYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXIudmVjdG9yc3RvcmUgYW5kXG4gICAgICAgICAgICBoYXNhdHRyKGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyLnZlY3RvcnN0b3JlLCAnZW1iZWRkaW5nX2Z1bmN0aW9uJykgYW5kXG4gICAgICAgICAgICBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlci52ZWN0b3JzdG9yZS5lbWJlZGRpbmdfZnVuY3Rpb24gYW5kXG4gICAgICAgICAgICBoYXNhdHRyKGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyLnZlY3RvcnN0b3JlLmVtYmVkZGluZ19mdW5jdGlvbiwgJ21vZGVsJykpOlxuICAgICAgICAgICAgZW1iZWRkaW5nX21vZGVsX3VzZWQgPSBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlci52ZWN0b3JzdG9yZS5lbWJlZGRpbmdfZnVuY3Rpb24ubW9kZWxcbiAgICByZXR1cm4gbGxtX21vZGVsX3VzZWQsIGVtYmVkZGluZ19tb2RlbF91c2VkXG5cblxuQHJvdXRlci5wb3N0KFwiXCIsIHN0YXR1c19jb2RlPTIwMSwgcmVzcG9uc2VfbW9kZWw9QWdlbnRDcmVhdGlvblJlc3BvbnNlKVxuZGVmIGNyZWF0ZV9hZ2VudF9lbmRwb2ludChyZXE6IENyZWF0ZUFnZW50UmVxKTpcbiAgICBwcmludChmXCJ7QkNvbG9ycy5IRUFERVJ9REVCVUc6IC9hZ2VudHMgUE9TVCByZXF1ZXN0IHJlY2VpdmVkOiB7cmVxLm1vZGVsX2R1bXBfanNvbihleGNsdWRlX25vbmU9VHJ1ZSl9e0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICBhaWQgPSByZXEuYWdlbnRfaWQgb3Igc3RyKHV1aWQ0KCkpXG4gICAgaWYgYWlkIGluIGFnZW50c19kYjpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDAsIGRldGFpbD1mXCJBZ2VudCB3aXRoIGFnZW50X2lkICd7YWlkfScgYWxyZWFkeSBleGlzdHMuXCIpXG4gICAgdHJ5OlxuICAgICAgICBjdXJyZW50X2FnZW50X2luc3RhbmNlID0gY3JlYXRlX25ld19hZ2VudF9pbnN0YW5jZShcbiAgICAgICAgICAgIG5hbWU9cmVxLm5hbWUsIGFnZT1yZXEuYWdlLCB0cmFpdHM9cmVxLnRyYWl0cywgc3RhdHVzPXJlcS5zdGF0dXMsXG4gICAgICAgICAgICBzdW1tYXJ5X3JlZnJlc2hfc2Vjb25kcz1yZXEuc3VtbWFyeV9yZWZyZXNoX3NlY29uZHMsXG4gICAgICAgICAgICByZWZsZWN0aW9uX3RocmVzaG9sZD1yZXEucmVmbGVjdGlvbl90aHJlc2hvbGQsIHZlcmJvc2U9cmVxLnZlcmJvc2UsXG4gICAgICAgICAgICBsbG1fbW9kZWxfbmFtZT1yZXEubW9kZWxfbmFtZSwgZW1iZWRkaW5nX21vZGVsX25hbWU9cmVxLmVtYmVkZGluZ19tb2RlbF9uYW1lXG4gICAgICAgIClcbi4uLlxuXG5Acm91dGVyLnBvc3QoXCIve2FnZW50X2lkfS91cGRhdGVfc3RhdHVzXCIsIHJlc3BvbnNlX21vZGVsPUFnZW50RGV0YWlsKVxuZGVmIHVwZGF0ZV9hZ2VudF9zdGF0dXNfZW5kcG9pbnQoYWdlbnRfaWQ6IHN0ciwgcmVxOiBVcGRhdGVTdGF0dXNSZXEpOlxuICAgIGlmIGFnZW50X2lkIG5vdCBpbiBhZ2VudHNfZGIgb3IgYWdlbnRzX2RiW2FnZW50X2lkXSBpcyBOb25lOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwNCwgZGV0YWlsPWZcIkFnZW50ICd7YWdlbnRfaWR9JyBub3QgZm91bmQgb3IgaW52YWxpZC5cIilcbiAgICBhZ2VudCA9IGFnZW50c19kYlthZ2VudF9pZF1cbiAgICBuZXdfc3RhdHVzX3N0cmlwcGVkID0gcmVxLm5ld19zdGF0dXMuc3RyaXAoKVxuICAgIGlmIG5vdCBuZXdfc3RhdHVzX3N0cmlwcGVkOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwMCwgZGV0YWlsPVwiTmV3IHN0YXR1cyBjYW5ub3QgYmUgZW1wdHkuXCIpXG4gICAgYWdlbnQuc3RhdHVzID0gbmV3X3N0YXR1c19zdHJpcHBlZFxuICAgIGxsbV9tb2RlbCwgZW1iX21vZGVsID0gZ2V0X2FnZW50X21vZGVsX2RldGFpbHMoYWdlbnQpXG4gICAgcmV0dXJuIEFnZW50RGV0YWlsKFxuICAgICAgICBhZ2VudF9pZD1hZ2VudF9pZCwgbmFtZT1hZ2VudC5uYW1lLCBzdGF0dXM9YWdlbnQuc3RhdHVzLFxuICAgICAgICBsbG1fbW9kZWw9bGxtX21vZGVsLCBlbWJlZGRpbmdfbW9kZWw9ZW1iX21vZGVsXG4gICAgKVxuLi4uXG5cbiAgICBhZ2VudDogQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudCA9IGFnZW50c19kYlthZ2VudF9pZF1cbiAgICBvcmlnaW5hbF9rID0gLTFcbiAgICByZXRyaWV2ZXIgPSBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlclxuICAgIGlmIGhhc2F0dHIocmV0cmlldmVyLCAnaycpOlxuICAgICAgICAgb3JpZ2luYWxfayA9IHJldHJpZXZlci5rXG5cbiAgICBhcGlfcmVhY3Rpb25fdHlwZSwgYXBpX2NvbnRlbnQsIG9ic2VydmF0aW9uX3dhc19pbXBvcnRhbnRfZmxhZyA9IFwiVU5LTk9XTlwiLCBcIlwiLCBGYWxzZVxuICAgIHRyeTpcbiAgICAgICAgaWYgcmVxLmsgaXMgbm90IE5vbmUgYW5kIHJlcS5rID4gMCBhbmQgaGFzYXR0cihyZXRyaWV2ZXIsICdrJyk6XG4gICAgICAgICAgICByZXRyaWV2ZXIuayA9IHJlcS5rXG4gICAgICAgIFxuICAgICAgICBhcGlfcmVhY3Rpb25fdHlwZSwgYXBpX2NvbnRlbnQsIG9ic2VydmF0aW9uX3dhc19pbXBvcnRhbnRfZmxhZyA9IGFnZW50LmdldF9pbnRlcnByZXRlZF9yZWFjdGlvbihvYnNlcnZhdGlvbiwgZGF0ZXRpbWUubm93KCkpXG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLk9LR1JFRU59REVCVUc6IGFnZW50LmdldF9pbnRlcnByZXRlZF9yZWFjdGlvbiBjb21wbGV0ZWQuIEFQSSBUeXBlOiAne2FwaV9yZWFjdGlvbl90eXBlfScsIEltcG9ydGFudDoge29ic2VydmF0aW9uX3dhc19pbXBvcnRhbnRfZmxhZ317QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuXG4gICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5GQUlMfUVSUk9SX1NUQUNLVFJBQ0U6IEVycm9yIGR1cmluZyByZWFjdGlvbiBnZW5lcmF0aW9uIGZvciBhZ2VudCB7YWdlbnRfaWR9OiB7ZX17QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKClcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJFcnJvciBkdXJpbmcgcmVhY3Rpb24gZ2VuZXJhdGlvbjoge2V9XCIpXG4gICAgZmluYWxseTpcbiAgICAgICAgaWYgb3JpZ2luYWxfayAhPSAtMSBhbmQgaGFzYXR0cihyZXRyaWV2ZXIsICdrJyk6XG4gICAgICAgICAgICAgcmV0cmlldmVyLmsgPSBvcmlnaW5hbF9rXG5cbiAgICByZXR1cm4gR2VuZXJhdGVSZWFjdGlvblJlc3BvbnNlKFxuICAgICAgICBhZ2VudF9uYW1lPWFnZW50Lm5hbWUsIHJlYWN0aW9uX3R5cGU9YXBpX3JlYWN0aW9uX3R5cGUsXG4gICAgICAgIGNvbnRlbnQ9YXBpX2NvbnRlbnQsIG9ic2VydmF0aW9uX3dhc19pbXBvcnRhbnQ9b2JzZXJ2YXRpb25fd2FzX2ltcG9ydGFudF9mbGFnXG4gICAgKVxuXG5Acm91dGVyLnBvc3QoXCIve2FnZW50X2lkfS9hZGRfbWVtb3J5XCIsIHJlc3BvbnNlX21vZGVsPUFkZGVkTWVtb3J5UmVzcG9uc2UpXG5kZWYgYWRkX21lbW9yeV9lbmRwb2ludChhZ2VudF9pZDogc3RyLCByZXE6IEFkZE1lbW9yeVJlcSk6XG4gICAgaWYgYWdlbnRfaWQgbm90IGluIGFnZW50c19kYiBvciBhZ2VudHNfZGJbYWdlbnRfaWRdIGlzIE5vbmU6XG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NDA0LCBkZXRhaWw9ZlwiQWdlbnQgJ3thZ2VudF9pZH0nIG5vdCBmb3VuZCBvciBpbnZhbGlkLlwiKVxuICAgIHRleHRfdG9fYWRkID0gcmVxLnRleHRfdG9fbWVtb3JpemUuc3RyaXAoKVxuICAgIGlmIG5vdCB0ZXh0X3RvX2FkZDpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDAsIGRldGFpbD1cIk1lbW9yeSB0ZXh0IG1heSBub3QgYmUgZW1wdHkuXCIpXG4gICAgYWdlbnQgPSBhZ2VudHNfZGJbYWdlbnRfaWRdXG4gICAgdHJ5OlxuICAgICAgICBpZiBub3QgYWdlbnQubWVtb3J5OlxuICAgICAgICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZlwiQWdlbnQge2FnZW50X2lkfSBtZW1vcnkgbm90IGluaXRpYWxpemVkLlwiKVxuICAgICAgICBhZ2VudC5tZW1vcnkuYWRkX21lbW9yeSh0ZXh0X3RvX2FkZCwgbm93PWRhdGV0aW1lLm5vdygpKVxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJFcnJvciBhZGRpbmcgbWVtb3J5OiB7ZX1cIilcbiAgICByZXR1cm4gQWRkZWRNZW1vcnlSZXNwb25zZShzdGF0dXM9XCJzdWNjZXNzXCIsIGFkZGVkX21lbW9yeT10ZXh0X3RvX2FkZClcblxuQHJvdXRlci5wb3N0KFwiL3thZ2VudF9pZH0vZmV0Y2hfbWVtb3JpZXNcIiwgcmVzcG9uc2VfbW9kZWw9RmV0Y2hlZE1lbW9yaWVzUmVzcG9uc2UpXG5kZWYgZmV0Y2hfbWVtb3JpZXNfZW5kcG9pbnQoYWdlbnRfaWQ6IHN0ciwgcmVxOiBGZXRjaE1lbW9yaWVzUmVxKTpcbiAgICBpZiBhZ2VudF9pZCBub3QgaW4gYWdlbnRzX2RiIG9yIGFnZW50c19kYlthZ2VudF9pZF0gaXMgTm9uZTpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDQsIGRldGFpbD1mXCJBZ2VudCAne2FnZW50X2lkfScgbm90IGZvdW5kIG9yIGludmFsaWQuXCIpXG4gICAgb2JzZXJ2YXRpb24gPSByZXEub2JzZXJ2YXRpb24uc3RyaXAoKVxuICAgIGlmIG5vdCBvYnNlcnZhdGlvbjpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDAsIGRldGFpbD1cIk9ic2VydmF0aW9uIHRleHQgbWF5IG5vdCBiZSBlbXB0eSBmb3IgZmV0Y2hpbmcgbWVtb3JpZXMuXCIpXG5cbiAgICBhZ2VudCA9IGFnZW50c19kYlthZ2VudF9pZF1cbiAgICBpZiBub3QgYWdlbnQubWVtb3J5IG9yIG5vdCBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlcjpcbiAgICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZlwiQWdlbnQge2FnZW50X2lkfSBtZW1vcnkvcmV0cmlldmVyIG5vdCBpbml0aWFsaXplZC5cIilcblxuICAgIG9yaWdpbmFsX2ssIHJldHJpZXZlciA9IC0xLCBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlclxuICAgIGlmIGhhc2F0dHIocmV0cmlldmVyLCAnaycpOiBvcmlnaW5hbF9rID0gcmV0cmlldmVyLmtcbiAgICBcbiAgICByZXNwb25zZV9wYXlsb2FkX2RvY3M6IExpc3RbRmV0Y2hlZE1lbW9yaWVzRG9jdW1lbnRdID0gW11cbiAgICB0cnk6XG4gICAgICAgIHJlcXVlc3RlZF9rID0gcmV0cmlldmVyLmsgIyBEZWZhdWx0IHRvIHJldHJpZXZlcidzIGtcbiAgICAgICAgaWYgcmVxLmsgaXMgbm90IE5vbmUgYW5kIHJlcS5rID4gMCBhbmQgaGFzYXR0cihyZXRyaWV2ZXIsICdrJyk6XG4gICAgICAgICAgICByZXF1ZXN0ZWRfayA9IHJlcS5rXG4gICAgICAgICAgICByZXRyaWV2ZXIuayA9IHJlcXVlc3RlZF9rXG5cbiAgICAgICAgZG9jc19hbmRfc2NvcmVzOiBMaXN0W1R1cGxlW0RvY3VtZW50LCBmbG9hdF1dID0gW11cbiAgICAgICAgaWYgKGhhc2F0dHIocmV0cmlldmVyLCBcInZlY3RvcnN0b3JlXCIpIGFuZCByZXRyaWV2ZXIudmVjdG9yc3RvcmUgYW5kXG4gICAgICAgICAgICBoYXNhdHRyKHJldHJpZXZlci52ZWN0b3JzdG9yZSwgXCJzaW1pbGFyaXR5X3NlYXJjaF93aXRoX3JlbGV2YW5jZV9zY29yZXNcIikpOlxuICAgICAgICAgICAgZG9jc19hbmRfc2NvcmVzID0gcmV0cmlldmVyLnZlY3RvcnN0b3JlLnNpbWlsYXJpdHlfc2VhcmNoX3dpdGhfcmVsZXZhbmNlX3Njb3JlcyhvYnNlcnZhdGlvbiwgaz1yZXF1ZXN0ZWRfaylcbiAgICAgICAgZWxzZTpcbiAgICAgICAgICAgIGZldGNoZWRfZG9jc19vbmx5OiBMaXN0W0RvY3VtZW50XSA9IGFnZW50Lm1lbW9yeS5mZXRjaF9tZW1vcmllcyhvYnNlcnZhdGlvbiwgbm93PWRhdGV0aW1lLm5vdygpKVxuICAgICAgICAgICAgZG9jc19hbmRfc2NvcmVzID0gWyhkb2MsIDAuMCkgZm9yIGRvYyBpbiBmZXRjaGVkX2RvY3Nfb25seV1cblxuICAgICAgICBmb3IgZG9jLCBzY29yZSBpbiBkb2NzX2FuZF9zY29yZXM6XG4gICAgICAgICAgICBzZXJpYWxpemFibGVfbWV0YWRhdGEgPSB7XG4gICAgICAgICAgICAgICAgazogdi5pc29mb3JtYXQoKSBpZiBpc2luc3RhbmNlKHYsIGRhdGV0aW1lKSBlbHNlXG4gICAgICAgICAgICAgICAgICAgdi50b2xpc3QoKSBpZiBpc2luc3RhbmNlKHYsIG5wLm5kYXJyYXkpIGVsc2VcbiAgICAgICAgICAgICAgICAgICBmbG9hdCh2KSBpZiBpc2luc3RhbmNlKHYsIChucC5mbG9hdDMyLCBucC5mbG9hdDY0KSkgZWxzZVxuICAgICAgICAgICAgICAgICAgIGludCh2KSBpZiBpc2luc3RhbmNlKHYsIChucC5pbnQzMiwgbnAuaW50NjQpKSBlbHNlIHZcbiAgICAgICAgICAgICAgICBmb3IgaywgdiBpbiBkb2MubWV0YWRhdGEuaXRlbXMoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzcG9uc2VfcGF5bG9hZF9kb2NzLmFwcGVuZChGZXRjaGVkTWVtb3JpZXNEb2N1bWVudChcbiAgICAgICAgICAgICAgICBjb250ZW50PWRvYy5wYWdlX2NvbnRlbnQsIG1ldGFkYXRhPXNlcmlhbGl6YWJsZV9tZXRhZGF0YSwgcmVsZXZhbmNlX3Njb3JlPXNjb3JlXG4gICAgICAgICAgICApKVxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJFcnJvciBmZXRjaGluZyBtZW1vcmllczoge2V9XCIpXG4gICAgZmluYWxseTpcbiAgICAgICAgaWYgb3JpZ2luYWxfayAhPSAtMSBhbmQgaGFzYXR0cihyZXRyaWV2ZXIsICdrJyk6XG4gICAgICAgICAgICAgcmV0cmlldmVyLmsgPSBvcmlnaW5hbF9rXG4gICAgcmV0dXJuIEZldGNoZWRNZW1vcmllc1Jlc3BvbnNlKG1lbW9yaWVzPXJlc3BvbnNlX3BheWxvYWRfZG9jcylcbi4uLlxuUGF0aDogYWdlbnRfZmFjdG9yeS5weVxuIyBGaWxlOiBhZ2VudF9mYWN0b3J5LnB5XG5pbXBvcnQgdHJhY2ViYWNrXG5mcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWxcblxuaW1wb3J0IGZhaXNzXG5mcm9tIGZhc3RhcGkgaW1wb3J0IEhUVFBFeGNlcHRpb25cbmZyb20gbGFuZ2NoYWluX29wZW5haSBpbXBvcnQgQ2hhdE9wZW5BSSwgT3BlbkFJRW1iZWRkaW5nc1xuZnJvbSBsYW5nY2hhaW5fY29tbXVuaXR5LnZlY3RvcnN0b3JlcyBpbXBvcnQgRkFJU1NcbmZyb20gbGFuZ2NoYWluX2NvbW11bml0eS5kb2NzdG9yZS5pbl9tZW1vcnkgaW1wb3J0IEluTWVtb3J5RG9jc3RvcmVcbmZyb20gbGFuZ2NoYWluLnJldHJpZXZlcnMgaW1wb3J0IFRpbWVXZWlnaHRlZFZlY3RvclN0b3JlUmV0cmlldmVyXG5mcm9tIGxhbmdjaGFpbl9leHBlcmltZW50YWwuZ2VuZXJhdGl2ZV9hZ2VudHMgaW1wb3J0IEdlbmVyYXRpdmVBZ2VudE1lbW9yeVxuZnJvbSBsYW5nY2hhaW5fY29tbXVuaXR5LnZlY3RvcnN0b3Jlcy51dGlscyBpbXBvcnQgRGlzdGFuY2VTdHJhdGVneVxuXG5mcm9tIGN1c3RvbV9hZ2VudCBpbXBvcnQgQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudFxuZnJvbSB1dGlscyBpbXBvcnQgQkNvbG9yc1xuZnJvbSBjb25maWcgaW1wb3J0IERFRkFVTFRfQ0hBVF9NT0RFTCwgREVGQVVMVF9FTUJFRERJTkdfTU9ERUxcblxuXG5kZWYgY3JlYXRlX25ld19hZ2VudF9pbnN0YW5jZShcbiAgICBuYW1lOiBzdHIsXG4gICAgYWdlOiBpbnQsXG4gICAgdHJhaXRzOiBzdHIsXG4gICAgc3RhdHVzOiBzdHIsXG4gICAgc3VtbWFyeV9yZWZyZXNoX3NlY29uZHM6IGludCxcbiAgICByZWZsZWN0aW9uX3RocmVzaG9sZDogaW50LFxuICAgIHZlcmJvc2U6IGJvb2wsXG4gICAgbGxtX21vZGVsX25hbWU6IE9wdGlvbmFsW3N0cl0gPSBOb25lLFxuICAgIGVtYmVkZGluZ19tb2RlbF9uYW1lOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuKSAtPiBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50OlxuICAgIHByaW50KGZcIntCQ29sb3JzLk9LQkxVRX1ERUJVRzogY3JlYXRlX25ld19hZ2VudF9pbnN0YW5jZSBjYWxsZWQgZm9yIGFnZW50ICd7QkNvbG9ycy5CT0xEfXtuYW1lfXtCQ29sb3JzLkVOREN9e0JDb2xvcnMuT0tCTFVFfSd7QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuLi4uXG5cbiAgICBlZmZlY3RpdmVfZW1iZWRkaW5nX21vZGVsID0gZW1iZWRkaW5nX21vZGVsX25hbWUgaWYgZW1iZWRkaW5nX21vZGVsX25hbWUgYW5kIGVtYmVkZGluZ19tb2RlbF9uYW1lLnN0cmlwKCkgZWxzZSBERUZBVUxUX0VNQkVERElOR19NT0RFTFxuICAgIGRpbSA9IDBcbiAgICB0cnk6XG4gICAgICAgIGFnZW50X2VtYmVkZGluZ3MgPSBPcGVuQUlFbWJlZGRpbmdzKG1vZGVsPWVmZmVjdGl2ZV9lbWJlZGRpbmdfbW9kZWwpXG4gICAgICAgIHByb2JlX2Zvcl9kaW0gPSBhZ2VudF9lbWJlZGRpbmdzLmVtYmVkX3F1ZXJ5KFwiZ2V0X2RpbV9wcm9iZV9mb3JfYWdlbnRcIilcbiAgICAgICAgZGltID0gbGVuKHByb2JlX2Zvcl9kaW0pXG4gICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5GQUlMfUVSUk9SX1NUQUNLVFJBQ0U6IEZhaWxlZCB0byBpbml0aWFsaXplIG9yIHRlc3QgT3BlbkFJRW1iZWRkaW5ncyBmb3IgYWdlbnQgJ3tuYW1lfScgd2l0aCBtb2RlbCAne2VmZmVjdGl2ZV9lbWJlZGRpbmdfbW9kZWx9Jzoge2V9e0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICAgICAgdHJhY2ViYWNrLnByaW50X2V4YygpXG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZlwiRmFpbGVkIHRvIGluaXRpYWxpemUvdGVzdCBlbWJlZGRpbmdzIHdpdGggbW9kZWwgJ3tlZmZlY3RpdmVfZW1iZWRkaW5nX21vZGVsfSc6IHtlfVwiKVxuXG4gICAgcHJpbnQoZlwie0JDb2xvcnMuRElNfURFQlVHOiBTZXR0aW5nIHVwIEZBSVNTIGluZGV4IGZvciBhZ2VudCAne25hbWV9JyAoZGltOiB7ZGltfSkuIFVzaW5nIElubmVyIFByb2R1Y3QgKGZvciBDb3NpbmUpLntCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgdHJ5OlxuICAgICAgICBpbmRleCA9IGZhaXNzLkluZGV4RmxhdElQKGRpbSlcbiAgICAgICAgdmVjdG9yc3RvcmUgPSBGQUlTUyhcbiAgICAgICAgICAgIGVtYmVkZGluZ19mdW5jdGlvbj1hZ2VudF9lbWJlZGRpbmdzLFxuICAgICAgICAgICAgaW5kZXg9aW5kZXgsXG4gICAgICAgICAgICBkb2NzdG9yZT1Jbk1lbW9yeURvY3N0b3JlKHt9KSxcbiAgICAgICAgICAgIGluZGV4X3RvX2RvY3N0b3JlX2lkPXt9LFxuICAgICAgICAgICAgbm9ybWFsaXplX0wyPVRydWUsXG4gICAgICAgICAgICBkaXN0YW5jZV9zdHJhdGVneT1EaXN0YW5jZVN0cmF0ZWd5Lk1BWF9JTk5FUl9QUk9EVUNUXG4gICAgICAgIClcbiAgICAgICAgcmV0cmlldmVyID0gVGltZVdlaWdodGVkVmVjdG9yU3RvcmVSZXRyaWV2ZXIoXG4gICAgICAgICAgICB2ZWN0b3JzdG9yZT12ZWN0b3JzdG9yZSwgaz0xNSwgZGVjYXlfcmF0ZT0wLjAxXG4gICAgICAgIClcbiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLkZBSUx9RVJST1JfU1RBQ0tUUkFDRTogRmFpbGVkIGR1cmluZyBGQUlTUyBzZXR1cCBmb3IgYWdlbnQgJ3tuYW1lfSc6IHtlfXtCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgICAgIHRyYWNlYmFjay5wcmludF9leGMoKVxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTUwMCwgZGV0YWlsPWZcIkZhaWxlZCBkdXJpbmcgRkFJU1Mgc2V0dXA6IHtlfVwiKVxuXG4gICAgcHJpbnQoZlwie0JDb2xvcnMuRElNfURFQlVHOiBTZXR0aW5nIHVwIEdlbmVyYXRpdmVBZ2VudE1lbW9yeSBmb3IgYWdlbnQgJ3tuYW1lfScuLi57QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgIHRyeTpcbiAgICAgICAgYWN0dWFsX3JlZmxlY3RfZm9yX21lbW9yeSA9IGZsb2F0KHJlZmxlY3Rpb25fdGhyZXNob2xkKSBpZiByZWZsZWN0aW9uX3RocmVzaG9sZCA+IDAgZWxzZSBOb25lXG4gICAgICAgIG1lbW9yeV9pbnN0YW5jZSA9IEdlbmVyYXRpdmVBZ2VudE1lbW9yeShcbiAgICAgICAgICAgIGxsbT1hZ2VudF9sbG0sXG4gICAgICAgICAgICBtZW1vcnlfcmV0cmlldmVyPXJldHJpZXZlcixcbiAgICAgICAgICAgIHJlZmxlY3Rpb25fdGhyZXNob2xkPWFjdHVhbF9yZWZsZWN0X2Zvcl9tZW1vcnksXG4gICAgICAgICAgICB2ZXJib3NlPXZlcmJvc2UsXG4gICAgICAgIClcbiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLkZBSUx9RVJST1JfU1RBQ0tUUkFDRTogRmFpbGVkIGR1cmluZyBHZW5lcmF0aXZlQWdlbnRNZW1vcnkgc2V0dXAgZm9yIGFnZW50ICd7bmFtZX0nOiB7ZX17QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKClcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJGYWlsZWQgZHVyaW5nIEdlbmVyYXRpdmVBZ2VudE1lbW9yeSBzZXR1cDoge2V9XCIpXG4uLi5cblBhdGg6IHNjaGVtYXMucHlcbiMgRmlsZTogc2NoZW1hcy5weVxuZnJvbSB0eXBpbmcgaW1wb3J0IE9wdGlvbmFsLCBMaXN0LCBEaWN0LCBBbnlcbmZyb20gcHlkYW50aWMgaW1wb3J0IEJhc2VNb2RlbCwgRmllbGRcblxuY2xhc3MgQ3JlYXRlQWdlbnRSZXEoQmFzZU1vZGVsKTpcbiAgICBuYW1lOiBzdHJcbiAgICBhZ2U6IGludFxuICAgIHRyYWl0czogc3RyXG4gICAgc3RhdHVzOiBzdHJcbiAgICBhZ2VudF9pZDogT3B0aW9uYWxbc3RyXSA9IE5vbmVcbiAgICBzdW1tYXJ5X3JlZnJlc2hfc2Vjb25kczogaW50ID0gRmllbGQoZGVmYXVsdD0zNjAwLCBnZT0wKVxuICAgIHJlZmxlY3Rpb25fdGhyZXNob2xkOiBpbnQgPSBGaWVsZChkZWZhdWx0PTAsIGdlPTApXG4gICAgdmVyYm9zZTogYm9vbCA9IEZhbHNlXG4gICAgbW9kZWxfbmFtZTogT3B0aW9uYWxbc3RyXSA9IE5vbmVcbiAgICBlbWJlZGRpbmdfbW9kZWxfbmFtZTogT3B0aW9uYWxbc3RyXSA9IE5vbmVcblxuY2xhc3MgR2VuZXJhdGVSZXNwb25zZVJlcShCYXNlTW9kZWwpOlxuICAgIHByb21wdDogc3RyXG4gICAgazogT3B0aW9uYWxbaW50XSA9IEZpZWxkKGRlZmF1bHQ9Tm9uZSwgZ3Q9MClcblxuY2xhc3MgR2VuZXJhdGVSZWFjdGlvblJlc3BvbnNlKEJhc2VNb2RlbCk6XG4gICAgYWdlbnRfbmFtZTogc3RyXG4gICAgcmVhY3Rpb25fdHlwZTogc3RyICMgU0FZLCBUSElOSywgRE8sIElHTk9SRSwgVU5LTk9XTlxuICAgIGNvbnRlbnQ6IHN0clxuICAgIG9ic2VydmF0aW9uX3dhc19pbXBvcnRhbnQ6IGJvb2xcblxuY2xhc3MgQWRkTWVtb3J5UmVxKEJhc2VNb2RlbCk6XG4gICAgdGV4dF90b19tZW1vcml6ZTogc3RyXG5cbmNsYXNzIEZldGNoTWVtb3JpZXNSZXEoQmFzZU1vZGVsKTpcbiAgICBvYnNlcnZhdGlvbjogc3RyXG4gICAgazogT3B0aW9uYWxbaW50XSA9IEZpZWxkKGRlZmF1bHQ9Tm9uZSwgZ3Q9MClcblxuY2xhc3MgVXBkYXRlU3RhdHVzUmVxKEJhc2VNb2RlbCk6XG4gICAgbmV3X3N0YXR1czogc3RyXG5cbmNsYXNzIEFnZW50RGV0YWlsKEJhc2VNb2RlbCk6XG4gICAgYWdlbnRfaWQ6IHN0clxuICAgIG5hbWU6IHN0clxuICAgIHN0YXR1czogc3RyXG4gICAgbGxtX21vZGVsOiBzdHJcbiAgICBlbWJlZGRpbmdfbW9kZWw6IHN0clxuXG5jbGFzcyBBZ2VudExpc3RSZXNwb25zZShCYXNlTW9kZWwpOlxuICAgIGFnZW50czogTGlzdFtBZ2VudERldGFpbF1cblxuY2xhc3MgQWdlbnRDcmVhdGlvblJlc3BvbnNlKEJhc2VNb2RlbCk6XG4gICAgYWdlbnRfaWQ6IHN0clxuICAgIG5hbWU6IHN0clxuICAgIGxsbV9tb2RlbF91c2VkOiBzdHJcbiAgICBlbWJlZGRpbmdfbW9kZWxfdXNlZDogc3RyXG5cbmNsYXNzIFNpbXBsZVN0YXR1c1Jlc3BvbnNlKEJhc2VNb2RlbCk6XG4gICAgc3RhdHVzOiBzdHJcbiAgICBtZXNzYWdlOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuXG5jbGFzcyBBZGRlZE1lbW9yeVJlc3BvbnNlKEJhc2VNb2RlbCk6XG4gICAgc3RhdHVzOiBzdHJcbiAgICBhZGRlZF9tZW1vcnk6IHN0clxuXG5jbGFzcyBGZXRjaGVkTWVtb3JpZXNEb2N1bWVudChCYXNlTW9kZWwpOlxuICAgIGNvbnRlbnQ6IHN0clxuICAgIG1ldGFkYXRhOiBEaWN0W3N0ciwgQW55XVxuICAgIHJlbGV2YW5jZV9zY29yZTogZmxvYXRcblxuY2xhc3MgRmV0Y2hlZE1lbW9yaWVzUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBtZW1vcmllczogTGlzdFtGZXRjaGVkTWVtb3JpZXNEb2N1bWVudF1cbi4uLlxuUGF0aDogcHJvbXB0cy5weVxuIyBGaWxlOiBwcm9tcHRzLnB5XG5cbiMgLS0tIEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnQgUHJvbXB0cyAtLS1cblxuREVDSVNJT05fVEVNUExBVEUgPSAoXG4gICAgXCJZb3UgYXJlIHthZ2VudF9uYW1lfS5cXG5cIlxuICAgIFwiWW91ciBjb3JlIGNoYXJhY3RlcmlzdGljcyBhcmU6IHthZ2VudF90cmFpdHN9XFxuXCJcbiAgICBcIkl0IGlzIHtjdXJyZW50X3RpbWV9LlxcblwiXG4gICAgXCJZb3VyIHN0YXR1cyBpczoge2FnZW50X3N0YXR1c31cXG5cIlxuICAgIFwiWW91IG9ic2VydmU6IHtvYnNlcnZhdGlvbn1cXG5cIlxuICAgIFwiUmVsZXZhbnQgcmVjZW50IG1lbW9yaWVzOlxcbnttZW1vcnlfY29udGV4dH1cXG5cXG5cIlxuICAgIFwiQ29uc2lkZXJpbmcgeW91ciBwZXJzb25hbGl0eSAoZXNwZWNpYWxseSB0cmFpdHMgbGlrZSB7YWdlbnRfdHJhaXRzfSksIHRoZSBvYnNlcnZhdGlvbiwgYW5kIHJlY2VudCBtZW1vcmllcywgXCJcbiAgICBcIndoYXQgaXMgdGhlICptb3N0IGxpa2VseSB0eXBlKiBvZiBpbW1lZGlhdGUgcmVhY3Rpb24geW91IHdvdWxkIGhhdmU/IENob29zZSAqb25lKiBmcm9tOiBcIlxuICAgIFwiJ1NBWScgKHNwZWFrIGFsb3VkKSwgJ1RISU5LJyAoaW50ZXJuYWwgdGhvdWdodCBvbmx5KSwgJ0RPJyAocGVyZm9ybSBhIHBoeXNpY2FsIGFjdGlvbiksICdJR05PUkUnIChubyBzaWduaWZpY2FudCByZWFjdGlvbiwgcmVtYWluIGluIGN1cnJlbnQgc3RhdHVzKS5cIlxuICAgIFwiXFxuUmVhY3Rpb24gVHlwZSBDaG9pY2U6XCJcbilcblxuVEhPVUdIVF9URU1QTEFURSA9IChcbiAgICBcIllvdSBhcmUge2FnZW50X25hbWV9LlxcblwiXG4gICAgXCJZb3VyIGNvcmUgY2hhcmFjdGVyaXN0aWNzIGFyZToge2FnZW50X3RyYWl0c31cXG5cIlxuICAgIFwiSXQgaXMge2N1cnJlbnRfdGltZX0uXFxuXCJcbiAgICBcIllvdXIgc3RhdHVzIGlzOiB7YWdlbnRfc3RhdHVzfVxcblwiXG4gICAgXCJZb3Ugb2JzZXJ2ZToge29ic2VydmF0aW9ufVxcblwiXG4gICAgXCJSZWxldmFudCByZWNlbnQgbWVtb3JpZXM6XFxue21lbW9yeV9jb250ZXh0fVxcblwiXG4gICAgXCJSZWxhdGlvbnNoaXAgY29udGV4dDoge3JlbGF0aW9uc2hpcF9jb250ZXh0fVxcblxcblwiXG4gICAgXCJDb25zaWRlcmluZyB5b3VyIHBlcnNvbmFsaXR5IGFuZCB0aGUgc2l0dWF0aW9uLCB3aGF0IGlzIHlvdXIgKmludGVybmFsIHRob3VnaHQqIG9yICphc3Nlc3NtZW50KiByaWdodCBub3cgaW4gcmVzcG9uc2UgdG8gdGhlIG9ic2VydmF0aW9uPyBcIlxuICAgIFwiRGVzY3JpYmUgdGhlIHRob3VnaHQgY29uY2lzZWx5LiBEbyAqbm90KiBkZXNjcmliZSBhY3Rpb25zIG9yIHNwZWVjaC4gRXhhbXBsZTogKEludGVybmFsIHRob3VnaHQpIFRoYXQgc2VlbXMgc3VzcGljaW91cy5cIlxuICAgIFwiXFxuSW50ZXJuYWwgVGhvdWdodDpcIlxuKVxuXG5BQ1RJT05fVEVNUExBVEUgPSAoXG4gICAgXCJZb3UgYXJlIHthZ2VudF9uYW1lfS5cXG5cIlxuICAgIFwiWW91ciBjb3JlIGNoYXJhY3RlcmlzdGljcyBhcmU6IHthZ2VudF90cmFpdHN9XFxuXCJcbiAgICBcIkl0IGlzIHtjdXJyZW50X3RpbWV9LlxcblwiXG4gICAgXCJZb3VyIHN0YXR1cyBpczoge2FnZW50X3N0YXR1c31cXG5cIlxuICAgIFwiWW91IG9ic2VydmU6IHtvYnNlcnZhdGlvbn1cXG5cIlxuICAgIFwiUmVsZXZhbnQgcmVjZW50IG1lbW9yaWVzOlxcbnttZW1vcnlfY29udGV4dH1cXG5cIlxuICAgIFwiUmVsYXRpb25zaGlwIGNvbnRleHQ6IHtyZWxhdGlvbnNoaXBfY29udGV4dH1cXG5cXG5cIlxuICAgIFwiQ29uc2lkZXJpbmcgeW91ciBwZXJzb25hbGl0eSBhbmQgdGhlIHNpdHVhdGlvbiwgd2hhdCAqcGh5c2ljYWwgYWN0aW9uKiBkbyB5b3UgdGFrZSBpbiBpbW1lZGlhdGUgcmVzcG9uc2UgdG8gdGhlIG9ic2VydmF0aW9uPyBcIlxuICAgIFwiRGVzY3JpYmUgdGhlIGFjdGlvbiBjb25jaXNlbHkgYXMgaWYgbmFycmF0aW5nIGl0LiBFeGFtcGxlOiBJIHNoaWZ0IG15IHdlaWdodCB1bmVhc2lseS4gLyBJIGRyYXcgbXkgc3dvcmQuXCJcbiAgICBcIlxcbkFjdGlvbiBUYWtlbjpcIlxuKVxuLi4uXG5cbkVOVElUWV9BQ1RJT05fVEVNUExBVEUgPSAoXG4gICAgXCJCYXNlZCBvbiB0aGUgZm9sbG93aW5nIG9ic2VydmF0aW9uLCB3aGF0IGlzIHtlbnRpdHl9IGRvaW5nPyBEZXNjcmliZSB0aGVpciBhY3Rpb25zIGNvbmNpc2VseS5cXG5cXG5cIlxuICAgIFwiT2JzZXJ2YXRpb246IHtvYnNlcnZhdGlvbn1cXG5cXG5cIlxuICAgIFwiV2hhdCB7ZW50aXR5fSBpcyBkb2luZzpcIlxuKVxuXG5SRUxBVElPTlNISVBfU1VNTUFSWV9URU1QTEFURSA9IChcbiAgICBcIkJhc2VkIG9uIHlvdXIgbWVtb3JpZXMsIHdoYXQgaXMgeW91ciByZWxhdGlvbnNoaXAgb3Iga25vd2xlZGdlIGFib3V0IHtlbnRpdHlfbmFtZX0/XFxuXCJcbiAgICBcIkNvbnNpZGVyOlxcblwiXG4gICAgXCIxLiBIYXZlIHlvdSBtZXQge2VudGl0eV9uYW1lfSBiZWZvcmU/XFxuXCJcbiAgICBcIjIuIERvIHlvdSBoYXZlIGFueSBoaXN0b3J5IHdpdGgge2VudGl0eV9uYW1lfT9cXG5cIlxuICAgIFwiMy4gRG8geW91IGhhdmUgYW55IGZlZWxpbmdzIG9yIG9waW5pb25zIGFib3V0IHtlbnRpdHlfbmFtZX0/XFxuXCJcbiAgICBcIjQuIElzIHRoZXJlIGFueXRoaW5nIG5vdGFibGUgYWJvdXQge2VudGl0eV9uYW1lfT9cXG5cXG5cIlxuICAgIFwiQ29udGV4dCBmcm9tIHlvdXIgbWVtb3JpZXM6XFxue3JlbGV2YW50X21lbW9yaWVzfVxcblxcblwiXG4gICAgXCJDdXJyZW50IG9ic2VydmF0aW9uOiB7ZW50aXR5X25hbWV9IGlzIHtlbnRpdHlfYWN0aW9ufVxcblxcblwiXG4gICAgXCJSZWxhdGlvbnNoaXAgd2l0aCB7ZW50aXR5X25hbWV9IChiZSBjb25jaXNlLCBpZiBubyByZWxhdGlvbnNoaXAgZXhpc3RzLCBzdGF0ZSB0aGF0IGNsZWFybHkpOlwiXG4pXG5cblBPSUdOQU5DWV9TQ09SSU5HX0ZBTExCQUNLX1RFTVBMQVRFID0gKFxuICAgIFwiUmF0ZSB0aGUgcG9pZ25hbmN5IG9mIHRoaXMgb2JzZXJ2YXRpb24gb24gYSBzY2FsZSBvZiAxIHRvIDEwIChpbnRlZ2VyKToge29ic2VydmF0aW9ufVxcblJhdGluZzpcIlxuKVxuLi4uXG5QYXRoOiByZXF1aXJlbWVudHMudHh0XG4jIGNvcmUgd2ViIGZyYW1ld29ya1xuZmFzdGFwaVthbGxdXG5cbiMgTGFuZ0NoYWluIHByaW1pdGl2ZXNcbmxhbmdjaGFpbn49MC4yICAgICAgICAgICMgY29yZVxubGFuZ2NoYWluLWV4cGVyaW1lbnRhbH49MC4yICAjIGNvbnRhaW5zIGdlbmVyYXRpdmVfYWdlbnRzXG5sYW5nY2hhaW4tY29tbXVuaXR5fj0wLjJcbmxhbmdjaGFpbi1vcGVuYWl+PTAuMSAgIyBob3VzZXMgQ2hhdE9wZW5BSSAmIE9wZW5BSUVtYmVkZGluZ3NcblxuIyBMTE0gKyBlbWJlZGRpbmdzIChwaWNrIHRoZSBwcm92aWRlciB5b3XigJlsbCByZWFsbHkgdXNlKVxub3BlbmFpPj0xLjI1LjBcbnRpa3Rva2VuPj0wLjYuMFxuXG4jIHNpbXBsZSBpbuKAkXByb2Nlc3MgdmVjdG9yIHN0b3JlIGZvciBhZ2VudCBtZW1vcnlcbmZhaXNzLWNwdT49MS44LjBcbi4uLlxuUGF0aDogbWFpbi5weVxuLi4uXG5cbiMgLS0tIEFQSSBLZXkgQ2hlY2sgLS0tXG5pZiBub3QgT1BFTkFJX0FQSV9LRVlfU0VUOlxuICAgIHByaW50KGZcIntCQ29sb3JzLkZBSUx9Q1JJVElDQUxfV0FSTklORzogT1BFTkFJX0FQSV9LRVkgZW52aXJvbm1lbnQgdmFyaWFibGUgaXMgTk9UIFNFVC4gT3BlbkFJIGNhbGxzIGxpa2VseSBmYWlsLntCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG5lbHNlOlxuICAgIHByaW50KGZcIntCQ29sb3JzLk9LR1JFRU59REVCVUc6IE9QRU5BSV9BUElfS0VZIGVudmlyb25tZW50IHZhcmlhYmxlIGlzIGRldGVjdGVkLntCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG5cblxuIyAtLS0gSGVhbHRoIENoZWNrIC0tLVxuQGFwcC5nZXQoXCIvXCIpXG5hc3luYyBkZWYgaGVhbHRoX2NoZWNrKCk6XG4gICAgcHJpbnQoZlwie0JDb2xvcnMuT0tHUkVFTn1ERUJVRzogSGVhbHRoIGNoZWNrICcvJyBlbmRwb2ludCBoaXQue0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICByZXR1cm4gey4uLiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjQ2ZTdiNzJjLTZiYTAtNDYyMS1hODhiLTNiODVkMDgzN2Y4NTt0b29sdV92cnR4XzAxTTZvbmJHZHdSTGhqTXoyYjFLY2ZuRiI6eyJyZXF1ZXN0SWQiOiI0NmU3YjcyYy02YmEwLTQ2MjEtYTg4Yi0zYjg1ZDA4MzdmODUiLCJ0b29sVXNlSWQiOiJ0b29sdV92cnR4XzAxTTZvbmJHZHdSTGhqTXoyYjFLY2ZuRiIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IGN1c3RvbV9hZ2VudC5weVxuIyBGaWxlOiBjdXN0b21fYWdlbnQucHlcbmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lXG5mcm9tIHR5cGluZyBpbXBvcnQgVHVwbGUsIE9wdGlvbmFsLCBBbnlcbmltcG9ydCByZVxuXG5mcm9tIGxhbmdjaGFpbl9leHBlcmltZW50YWwuZ2VuZXJhdGl2ZV9hZ2VudHMuZ2VuZXJhdGl2ZV9hZ2VudCBpbXBvcnQgR2VuZXJhdGl2ZUFnZW50XG5mcm9tIGxhbmdjaGFpbi5wcm9tcHRzIGltcG9ydCBQcm9tcHRUZW1wbGF0ZVxuZnJvbSBsYW5nY2hhaW4uY2hhaW5zIGltcG9ydCBMTE1DaGFpblxuXG5mcm9tIHV0aWxzIGltcG9ydCBCQ29sb3JzXG5cbmNsYXNzIEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnQoR2VuZXJhdGl2ZUFnZW50KTpcbiAgICBkZWYgX19pbml0X18oc2VsZiwgKipkYXRhOiBBbnkpOlxuICAgICAgICBzdXBlcigpLl9faW5pdF9fKCoqZGF0YSlcbiAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuT0tHUkVFTn1ERUJVRyAoQWdlbnQge3NlbGYubmFtZX0pOiBJbml0aWFsaXplZCBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50LCBcIlxuICAgICAgICAgICAgICBmXCJ1c2luZyBiYXNlIEdlbmVyYXRpdmVBZ2VudCBsb2dpYy57QkNvbG9ycy5FTkRDfVwiKVxuXG4gICAgZGVmIGdldF9pbnRlcnByZXRlZF9yZWFjdGlvbihzZWxmLCBvYnNlcnZhdGlvbjogc3RyLCBub3c6IE9wdGlvbmFsW2RhdGV0aW1lXSA9IE5vbmUpIC0+IFR1cGxlW3N0ciwgc3RyLCBib29sXTpcbiAgICAgICAgY2FsbF90aW1lID0gbm93IG9yIGRhdGV0aW1lLm5vdygpXG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLkRJTX1ERUJVRyAoQWdlbnQge3NlbGYubmFtZX0pOiBDYWxsaW5nIHBhcmVudCdzIGdlbmVyYXRlX3JlYWN0aW9uIGZvcjogJ3tvYnNlcnZhdGlvbls6NTBdfS4uLid7QkNvbG9ycy5FTkRDfVwiKVxuXG4gICAgICAgIGlzX2RpYWxvZ3VlX2ZsYWcsIHJlc3VsdF9zdHIgPSBzdXBlcigpLmdlbmVyYXRlX3JlYWN0aW9uKG9ic2VydmF0aW9uLCBub3c9Y2FsbF90aW1lKVxuXG4gICAgICAgIGVzdGltYXRlZF9vYnNlcnZhdGlvbl9pbXBvcnRhbmNlID0gRmFsc2VcbiAgICAgICAgdHJ5OlxuICAgICAgICAgICAgaWYgc2VsZi5sbG06XG4gICAgICAgICAgICAgICAgcG9pZ25hbmN5X3Byb21wdF9zdHIgPSAoXG4gICAgICAgICAgICAgICAgICAgIFwiSXMgdGhlIGZvbGxvd2luZyBvYnNlcnZhdGlvbiBtdW5kYW5lIChlLmcuLCBicnVzaGluZyB0ZWV0aCkgb3IgcG9pZ25hbnQgKGUuZy4sIGEgbWFqb3IgbGlmZSBldmVudCk/IFwiXG4gICAgICAgICAgICAgICAgICAgIFwiQW5zd2VyIHdpdGggJ211bmRhbmUnIG9yICdwb2lnbmFudCcuXFxuT2JzZXJ2YXRpb246IHtvYnNlcnZhdGlvbl90ZXh0fVxcbkFuc3dlcjpcIlxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBwcm9tcHQgPSBQcm9tcHRUZW1wbGF0ZS5mcm9tX3RlbXBsYXRlKHBvaWduYW5jeV9wcm9tcHRfc3RyKVxuICAgICAgICAgICAgICAgIGNoYWluID0gTExNQ2hhaW4obGxtPXNlbGYubGxtLCBwcm9tcHQ9cHJvbXB0KVxuICAgICAgICAgICAgICAgIHBvaWduYW5jeV9yZXN1bHQgPSBjaGFpbi5ydW4ob2JzZXJ2YXRpb25fdGV4dD1vYnNlcnZhdGlvbikuc3RyaXAoKS5sb3dlcigpXG4gICAgICAgICAgICAgICAgaWYgXCJwb2lnbmFudFwiIGluIHBvaWduYW5jeV9yZXN1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGVzdGltYXRlZF9vYnNlcnZhdGlvbl9pbXBvcnRhbmNlID0gVHJ1ZVxuICAgICAgICAgICAgICAgIHByaW50KGZcIntCQ29sb3JzLkRJTX1ERUJVRyAoQWdlbnQge3NlbGYubmFtZX0pOiBPYnNlcnZhdGlvbiBwb2lnbmFuY3kgZXN0aW1hdGVkIGFzICd7cG9pZ25hbmN5X3Jlc3VsdH0nLCBBUEkgaW1wb3J0YW50IGZsYWc6IHtlc3RpbWF0ZWRfb2JzZXJ2YXRpb25faW1wb3J0YW5jZX17QkNvbG9ycy5FTkRDfVwiKVxuICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGVfcG9pZ25hbmN5OlxuICAgICAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuV0FSTklOR31XQVJOIChBZ2VudCB7c2VsZi5uYW1lfSk6IENvdWxkIG5vdCBlc3RpbWF0ZSBvYnNlcnZhdGlvbiBwb2lnbmFuY3kgZm9yIEFQSSBmbGFnOiB7ZV9wb2lnbmFuY3l9e0JDb2xvcnMuRU5EQ31cIilcblxuICAgICAgICBjb250ZW50ID0gc2VsZi5fY2xlYW5fcmVzcG9uc2UocmVzdWx0X3N0cilcblxuICAgICAgICBpZiBpc19kaWFsb2d1ZV9mbGFnOlxuICAgICAgICAgICAgYWN0dWFsX2RpYWxvZ3VlID0gY29udGVudFtsZW4oXCJzYWlkIFwiKTpdLnN0cmlwKCkgaWYgY29udGVudC5sb3dlcigpLnN0YXJ0c3dpdGgoXCJzYWlkIFwiKSBlbHNlIGNvbnRlbnRcbiAgICAgICAgICAgIHByaW50KGZcIntCQ29sb3JzLk9LQkxVRX1ERUJVRyAoQWdlbnQge3NlbGYubmFtZX0pOiBJbnRlcnByZXRlZCBhcyBTQVksIENvbnRlbnQ6ICd7YWN0dWFsX2RpYWxvZ3VlfSd7QkNvbG9ycy5FTkRDfVwiKVxuICAgICAgICAgICAgcmV0dXJuIFwiU0FZXCIsIGFjdHVhbF9kaWFsb2d1ZSwgZXN0aW1hdGVkX29ic2VydmF0aW9uX2ltcG9ydGFuY2VcbiAgICAgICAgZWxzZTpcbiAgICAgICAgICAgIGlmIG5vdCBjb250ZW50LnN0cmlwKCkgb3IgY29udGVudC5sb3dlcigpID09IFwibm9uZVwiOlxuICAgICAgICAgICAgICAgIHByaW50KGZcIntCQ29sb3JzLkRJTX1ERUJVRyAoQWdlbnQge3NlbGYubmFtZX0pOiBJbnRlcnByZXRlZCBhcyBJR05PUkUue0JDb2xvcnMuRU5EQ31cIilcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJJR05PUkVcIiwgXCJcIiwgZXN0aW1hdGVkX29ic2VydmF0aW9uX2ltcG9ydGFuY2VcbiAgICAgICAgICAgIGVsc2U6XG4gICAgICAgICAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuT0tHUkVFTn1ERUJVRyAoQWdlbnQge3NlbGYubmFtZX0pOiBJbnRlcnByZXRlZCBhcyBETyAocmVhY3Rpb24pLCBDb250ZW50OiAne2NvbnRlbnR9J3tCQ29sb3JzLkVOREN9XCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiRE9cIiwgY29udGVudCwgZXN0aW1hdGVkX29ic2VydmF0aW9uX2ltcG9ydGFuY2Vcbi4uLlxuUGF0aDogYWdlbnRfZmFjdG9yeS5weVxuIyBGaWxlOiBhZ2VudF9mYWN0b3J5LnB5XG5pbXBvcnQgdHJhY2ViYWNrXG5mcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWxcblxuaW1wb3J0IGZhaXNzXG5mcm9tIGZhc3RhcGkgaW1wb3J0IEhUVFBFeGNlcHRpb25cbmZyb20gbGFuZ2NoYWluX29wZW5haSBpbXBvcnQgQ2hhdE9wZW5BSSwgT3BlbkFJRW1iZWRkaW5nc1xuZnJvbSBsYW5nY2hhaW5fY29tbXVuaXR5LnZlY3RvcnN0b3JlcyBpbXBvcnQgRkFJU1NcbmZyb20gbGFuZ2NoYWluX2NvbW11bml0eS5kb2NzdG9yZS5pbl9tZW1vcnkgaW1wb3J0IEluTWVtb3J5RG9jc3RvcmVcbmZyb20gbGFuZ2NoYWluLnJldHJpZXZlcnMgaW1wb3J0IFRpbWVXZWlnaHRlZFZlY3RvclN0b3JlUmV0cmlldmVyXG5mcm9tIGxhbmdjaGFpbl9leHBlcmltZW50YWwuZ2VuZXJhdGl2ZV9hZ2VudHMgaW1wb3J0IEdlbmVyYXRpdmVBZ2VudE1lbW9yeVxuZnJvbSBsYW5nY2hhaW5fY29tbXVuaXR5LnZlY3RvcnN0b3Jlcy51dGlscyBpbXBvcnQgRGlzdGFuY2VTdHJhdGVneVxuXG5mcm9tIGN1c3RvbV9hZ2VudCBpbXBvcnQgQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudFxuZnJvbSB1dGlscyBpbXBvcnQgQkNvbG9yc1xuZnJvbSBjb25maWcgaW1wb3J0IERFRkFVTFRfQ0hBVF9NT0RFTCwgREVGQVVMVF9FTUJFRERJTkdfTU9ERUxcblxuXG5kZWYgY3JlYXRlX25ld19hZ2VudF9pbnN0YW5jZShcbiAgICBuYW1lOiBzdHIsXG4gICAgYWdlOiBpbnQsXG4gICAgdHJhaXRzOiBzdHIsXG4gICAgc3RhdHVzOiBzdHIsXG4gICAgc3VtbWFyeV9yZWZyZXNoX3NlY29uZHM6IGludCxcbiAgICByZWZsZWN0aW9uX3RocmVzaG9sZDogaW50LFxuICAgIHZlcmJvc2U6IGJvb2wsXG4gICAgbGxtX21vZGVsX25hbWU6IE9wdGlvbmFsW3N0cl0gPSBOb25lLFxuICAgIGVtYmVkZGluZ19tb2RlbF9uYW1lOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuKSAtPiBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50OlxuICAgIHByaW50KGZcIntCQ29sb3JzLk9LQkxVRX1ERUJVRzogY3JlYXRlX25ld19hZ2VudF9pbnN0YW5jZSBjYWxsZWQgZm9yIGFnZW50ICd7QkNvbG9ycy5CT0xEfXtuYW1lfXtCQ29sb3JzLkVOREN9e0JDb2xvcnMuT0tCTFVFfSd7QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuXG4gICAgZWZmZWN0aXZlX2xsbV9tb2RlbCA9IGxsbV9tb2RlbF9uYW1lIGlmIGxsbV9tb2RlbF9uYW1lIGFuZCBsbG1fbW9kZWxfbmFtZS5zdHJpcCgpIGVsc2UgREVGQVVMVF9DSEFUX01PREVMXG4gICAgdHJ5OlxuICAgICAgICBhZ2VudF9sbG0gPSBDaGF0T3BlbkFJKG1vZGVsX25hbWU9ZWZmZWN0aXZlX2xsbV9tb2RlbCwgdGVtcGVyYXR1cmU9MC43KVxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuRkFJTH1FUlJPUl9TVEFDS1RSQUNFOiBGYWlsZWQgdG8gaW5pdGlhbGl6ZSBMTE0gZm9yIGFnZW50ICd7bmFtZX0nIHdpdGggbW9kZWwgJ3tlZmZlY3RpdmVfbGxtX21vZGVsfSc6IHtlfXtCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgICAgIHRyYWNlYmFjay5wcmludF9leGMoKVxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTUwMCwgZGV0YWlsPWZcIkZhaWxlZCB0byBpbml0aWFsaXplIExMTSB3aXRoIG1vZGVsICd7ZWZmZWN0aXZlX2xsbV9tb2RlbH0nOiB7ZX1cIilcblxuICAgIGVmZmVjdGl2ZV9lbWJlZGRpbmdfbW9kZWwgPSBlbWJlZGRpbmdfbW9kZWxfbmFtZSBpZiBlbWJlZGRpbmdfbW9kZWxfbmFtZSBhbmQgZW1iZWRkaW5nX21vZGVsX25hbWUuc3RyaXAoKSBlbHNlIERFRkFVTFRfRU1CRURESU5HX01PREVMXG4gICAgZGltID0gMFxuICAgIHRyeTpcbiAgICAgICAgYWdlbnRfZW1iZWRkaW5ncyA9IE9wZW5BSUVtYmVkZGluZ3MobW9kZWw9ZWZmZWN0aXZlX2VtYmVkZGluZ19tb2RlbClcbiAgICAgICAgcHJvYmVfZm9yX2RpbSA9IGFnZW50X2VtYmVkZGluZ3MuZW1iZWRfcXVlcnkoXCJnZXRfZGltX3Byb2JlX2Zvcl9hZ2VudFwiKVxuICAgICAgICBkaW0gPSBsZW4ocHJvYmVfZm9yX2RpbSlcbiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLkZBSUx9RVJST1JfU1RBQ0tUUkFDRTogRmFpbGVkIHRvIGluaXRpYWxpemUgb3IgdGVzdCBPcGVuQUlFbWJlZGRpbmdzIGZvciBhZ2VudCAne25hbWV9JyB3aXRoIG1vZGVsICd7ZWZmZWN0aXZlX2VtYmVkZGluZ19tb2RlbH0nOiB7ZX17QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKClcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJGYWlsZWQgdG8gaW5pdGlhbGl6ZS90ZXN0IGVtYmVkZGluZ3Mgd2l0aCBtb2RlbCAne2VmZmVjdGl2ZV9lbWJlZGRpbmdfbW9kZWx9Jzoge2V9XCIpXG5cbiAgICBwcmludChmXCJ7QkNvbG9ycy5ESU19REVCVUc6IFNldHRpbmcgdXAgRkFJU1MgaW5kZXggZm9yIGFnZW50ICd7bmFtZX0nIChkaW06IHtkaW19KS4gVXNpbmcgSW5uZXIgUHJvZHVjdCAoZm9yIENvc2luZSkue0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICB0cnk6XG4gICAgICAgIGluZGV4ID0gZmFpc3MuSW5kZXhGbGF0SVAoZGltKVxuICAgICAgICB2ZWN0b3JzdG9yZSA9IEZBSVNTKFxuICAgICAgICAgICAgZW1iZWRkaW5nX2Z1bmN0aW9uPWFnZW50X2VtYmVkZGluZ3MsXG4gICAgICAgICAgICBpbmRleD1pbmRleCxcbiAgICAgICAgICAgIGRvY3N0b3JlPUluTWVtb3J5RG9jc3RvcmUoe30pLFxuICAgICAgICAgICAgaW5kZXhfdG9fZG9jc3RvcmVfaWQ9e30sXG4gICAgICAgICAgICBub3JtYWxpemVfTDI9VHJ1ZSxcbiAgICAgICAgICAgIGRpc3RhbmNlX3N0cmF0ZWd5PURpc3RhbmNlU3RyYXRlZ3kuTUFYX0lOTkVSX1BST0RVQ1RcbiAgICAgICAgKVxuICAgICAgICByZXRyaWV2ZXIgPSBUaW1lV2VpZ2h0ZWRWZWN0b3JTdG9yZVJldHJpZXZlcihcbiAgICAgICAgICAgIHZlY3RvcnN0b3JlPXZlY3RvcnN0b3JlLCBrPTE1LCBkZWNheV9yYXRlPTAuMDFcbiAgICAgICAgKVxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuRkFJTH1FUlJPUl9TVEFDS1RSQUNFOiBGYWlsZWQgZHVyaW5nIEZBSVNTIHNldHVwIGZvciBhZ2VudCAne25hbWV9Jzoge2V9e0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICAgICAgdHJhY2ViYWNrLnByaW50X2V4YygpXG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZlwiRmFpbGVkIGR1cmluZyBGQUlTUyBzZXR1cDoge2V9XCIpXG5cbiAgICBwcmludChmXCJ7QkNvbG9ycy5ESU19REVCVUc6IFNldHRpbmcgdXAgR2VuZXJhdGl2ZUFnZW50TWVtb3J5IGZvciBhZ2VudCAne25hbWV9Jy4uLntCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgdHJ5OlxuICAgICAgICBhY3R1YWxfcmVmbGVjdF9mb3JfbWVtb3J5ID0gZmxvYXQocmVmbGVjdGlvbl90aHJlc2hvbGQpIGlmIHJlZmxlY3Rpb25fdGhyZXNob2xkID4gMCBlbHNlIE5vbmVcbiAgICAgICAgbWVtb3J5X2luc3RhbmNlID0gR2VuZXJhdGl2ZUFnZW50TWVtb3J5KFxuICAgICAgICAgICAgbGxtPWFnZW50X2xsbSxcbiAgICAgICAgICAgIG1lbW9yeV9yZXRyaWV2ZXI9cmV0cmlldmVyLFxuICAgICAgICAgICAgcmVmbGVjdGlvbl90aHJlc2hvbGQ9YWN0dWFsX3JlZmxlY3RfZm9yX21lbW9yeSxcbiAgICAgICAgICAgIHZlcmJvc2U9dmVyYm9zZSxcbiAgICAgICAgKVxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuRkFJTH1FUlJPUl9TVEFDS1RSQUNFOiBGYWlsZWQgZHVyaW5nIEdlbmVyYXRpdmVBZ2VudE1lbW9yeSBzZXR1cCBmb3IgYWdlbnQgJ3tuYW1lfSc6IHtlfXtCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgICAgIHRyYWNlYmFjay5wcmludF9leGMoKVxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTUwMCwgZGV0YWlsPWZcIkZhaWxlZCBkdXJpbmcgR2VuZXJhdGl2ZUFnZW50TWVtb3J5IHNldHVwOiB7ZX1cIilcblxuICAgIHByaW50KGZcIntCQ29sb3JzLkRJTX1ERUJVRzogSW5pdGlhbGl6aW5nIEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnQgJ3tuYW1lfScuLi57QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgIHRyeTpcbiAgICAgICAgYWdlbnQgPSBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50KFxuICAgICAgICAgICAgbmFtZT1uYW1lLFxuICAgICAgICAgICAgYWdlPWFnZSxcbiAgICAgICAgICAgIHRyYWl0cz10cmFpdHMsXG4gICAgICAgICAgICBzdGF0dXM9c3RhdHVzLFxuICAgICAgICAgICAgbWVtb3J5PW1lbW9yeV9pbnN0YW5jZSxcbiAgICAgICAgICAgIGxsbT1hZ2VudF9sbG0sXG4gICAgICAgICAgICBzdW1tYXJ5X3JlZnJlc2hfc2Vjb25kcz1zdW1tYXJ5X3JlZnJlc2hfc2Vjb25kcyxcbiAgICAgICAgICAgIHZlcmJvc2U9dmVyYm9zZSxcbiAgICAgICAgKVxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5PS0dSRUVOfURFQlVHOiBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50ICd7bmFtZX0nIGluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseS57QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgICAgICByZXR1cm4gYWdlbnRcbiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLkZBSUx9RVJST1JfU1RBQ0tUUkFDRTogRmFpbGVkIGR1cmluZyBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50IGluaXRpYWxpemF0aW9uIGZvciBhZ2VudCAne25hbWV9Jzoge2V9e0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICAgICAgdHJhY2ViYWNrLnByaW50X2V4YygpXG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZlwiRmFpbGVkIGR1cmluZyBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50IGluaXRpYWxpemF0aW9uOiB7ZX1cIilcbi4uLlxuUGF0aDogcm91dGVycy9hZ2VudF9yb3V0ZXIucHlcbiMgRmlsZTogcm91dGVycy9hZ2VudF9yb3V0ZXIucHlcbmltcG9ydCB0cmFjZWJhY2tcbmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lXG5mcm9tIHR5cGluZyBpbXBvcnQgRGljdCwgTGlzdCwgQW55LCBUdXBsZVxuZnJvbSB1dWlkIGltcG9ydCB1dWlkNFxuaW1wb3J0IG51bXB5IGFzIG5wXG5cbmZyb20gZmFzdGFwaSBpbXBvcnQgQVBJUm91dGVyLCBIVFRQRXhjZXB0aW9uXG5mcm9tIGxhbmdjaGFpbl9jb3JlLmRvY3VtZW50cyBpbXBvcnQgRG9jdW1lbnQgIyBSZXF1aXJlZCBmb3IgZmV0Y2hfbWVtb3JpZXMgdHlwZSBoaW50XG5cbmZyb20gY3VzdG9tX2FnZW50IGltcG9ydCBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50XG5mcm9tIGFnZW50X2ZhY3RvcnkgaW1wb3J0IGNyZWF0ZV9uZXdfYWdlbnRfaW5zdGFuY2VcbmZyb20gc2NoZW1hcyBpbXBvcnQgKFxuICAgIENyZWF0ZUFnZW50UmVxLCBHZW5lcmF0ZVJlc3BvbnNlUmVxLCBHZW5lcmF0ZVJlYWN0aW9uUmVzcG9uc2UsIEFkZE1lbW9yeVJlcSxcbiAgICBGZXRjaE1lbW9yaWVzUmVxLCBVcGRhdGVTdGF0dXNSZXEsIEFnZW50TGlzdFJlc3BvbnNlLCBBZ2VudERldGFpbCxcbiAgICBBZ2VudENyZWF0aW9uUmVzcG9uc2UsIEFkZGVkTWVtb3J5UmVzcG9uc2UsIEZldGNoZWRNZW1vcmllc1Jlc3BvbnNlLFxuICAgIEZldGNoZWRNZW1vcmllc0RvY3VtZW50LCBBZ2VudFN1bW1hcnlSZXNwb25zZSwgRGVsZXRlZEFnZW50UmVzcG9uc2Vcbilcbi4uLlxuXG5cbmRlZiBnZXRfYWdlbnRfbW9kZWxfZGV0YWlscyhhZ2VudDogQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudCkgLT4gVHVwbGVbc3RyLCBzdHJdOlxuICAgIGxsbV9tb2RlbF91c2VkID0gXCJ1bmtub3duXCJcbiAgICBlbWJlZGRpbmdfbW9kZWxfdXNlZCA9IFwidW5rbm93blwiXG4gICAgaWYgYWdlbnQ6XG4gICAgICAgIGlmIGhhc2F0dHIoYWdlbnQsICdsbG0nKSBhbmQgYWdlbnQubGxtIGFuZCBoYXNhdHRyKGFnZW50LmxsbSwgJ21vZGVsX25hbWUnKTpcbiAgICAgICAgICAgIGxsbV9tb2RlbF91c2VkID0gYWdlbnQubGxtLm1vZGVsX25hbWVcbiAgICAgICAgaWYgKGhhc2F0dHIoYWdlbnQsICdtZW1vcnknKSBhbmQgYWdlbnQubWVtb3J5IGFuZFxuICAgICAgICAgICAgaGFzYXR0cihhZ2VudC5tZW1vcnksICdtZW1vcnlfcmV0cmlldmVyJykgYW5kIGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyIGFuZFxuICAgICAgICAgICAgaGFzYXR0cihhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlciwgJ3ZlY3RvcnN0b3JlJykgYW5kIGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyLnZlY3RvcnN0b3JlIGFuZFxuICAgICAgICAgICAgaGFzYXR0cihhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlci52ZWN0b3JzdG9yZSwgJ2VtYmVkZGluZ19mdW5jdGlvbicpIGFuZFxuICAgICAgICAgICAgYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXIudmVjdG9yc3RvcmUuZW1iZWRkaW5nX2Z1bmN0aW9uIGFuZFxuICAgICAgICAgICAgaGFzYXR0cihhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlci52ZWN0b3JzdG9yZS5lbWJlZGRpbmdfZnVuY3Rpb24sICdtb2RlbCcpKTpcbiAgICAgICAgICAgIGVtYmVkZGluZ19tb2RlbF91c2VkID0gYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXIudmVjdG9yc3RvcmUuZW1iZWRkaW5nX2Z1bmN0aW9uLm1vZGVsXG4gICAgcmV0dXJuIGxsbV9tb2RlbF91c2VkLCBlbWJlZGRpbmdfbW9kZWxfdXNlZFxuXG5cbkByb3V0ZXIucG9zdChcIlwiLCBzdGF0dXNfY29kZT0yMDEsIHJlc3BvbnNlX21vZGVsPUFnZW50Q3JlYXRpb25SZXNwb25zZSlcbmRlZiBjcmVhdGVfYWdlbnRfZW5kcG9pbnQocmVxOiBDcmVhdGVBZ2VudFJlcSk6XG4gICAgcHJpbnQoZlwie0JDb2xvcnMuSEVBREVSfURFQlVHOiAvYWdlbnRzIFBPU1QgcmVxdWVzdCByZWNlaXZlZDoge3JlcS5tb2RlbF9kdW1wX2pzb24oZXhjbHVkZV9ub25lPVRydWUpfXtCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgYWlkID0gcmVxLmFnZW50X2lkIG9yIHN0cih1dWlkNCgpKVxuICAgIGlmIGFpZCBpbiBhZ2VudHNfZGI6XG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NDAwLCBkZXRhaWw9ZlwiQWdlbnQgd2l0aCBhZ2VudF9pZCAne2FpZH0nIGFscmVhZHkgZXhpc3RzLlwiKVxuICAgIHRyeTpcbiAgICAgICAgY3VycmVudF9hZ2VudF9pbnN0YW5jZSA9IGNyZWF0ZV9uZXdfYWdlbnRfaW5zdGFuY2UoXG4gICAgICAgICAgICBuYW1lPXJlcS5uYW1lLCBhZ2U9cmVxLmFnZSwgdHJhaXRzPXJlcS50cmFpdHMsIHN0YXR1cz1yZXEuc3RhdHVzLFxuICAgICAgICAgICAgc3VtbWFyeV9yZWZyZXNoX3NlY29uZHM9cmVxLnN1bW1hcnlfcmVmcmVzaF9zZWNvbmRzLFxuICAgICAgICAgICAgcmVmbGVjdGlvbl90aHJlc2hvbGQ9cmVxLnJlZmxlY3Rpb25fdGhyZXNob2xkLCB2ZXJib3NlPXJlcS52ZXJib3NlLFxuICAgICAgICAgICAgbGxtX21vZGVsX25hbWU9cmVxLm1vZGVsX25hbWUsIGVtYmVkZGluZ19tb2RlbF9uYW1lPXJlcS5lbWJlZGRpbmdfbW9kZWxfbmFtZVxuICAgICAgICApXG4uLi5cblxuQHJvdXRlci5wb3N0KFwiL3thZ2VudF9pZH0vZ2VuZXJhdGVfcmVzcG9uc2VcIiwgcmVzcG9uc2VfbW9kZWw9R2VuZXJhdGVSZWFjdGlvblJlc3BvbnNlKVxuZGVmIGdlbmVyYXRlX3Jlc3BvbnNlX2VuZHBvaW50KGFnZW50X2lkOiBzdHIsIHJlcTogR2VuZXJhdGVSZXNwb25zZVJlcSk6XG4gICAgb2JzZXJ2YXRpb24gPSByZXEucHJvbXB0LnN0cmlwKClcbiAgICBwcmludChmXCJ7QkNvbG9ycy5IRUFERVJ9REVCVUc6IC9nZW5lcmF0ZV9yZXNwb25zZSBmb3IgYWdlbnQge0JDb2xvcnMuQk9MRH17YWdlbnRfaWR9e0JDb2xvcnMuRU5EQ30gd2l0aCAne29ic2VydmF0aW9uWzo1MF19Li4uJyAoSz17cmVxLmsgb3IgJ2RlZmF1bHQnfSl7QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgIGlmIGFnZW50X2lkIG5vdCBpbiBhZ2VudHNfZGIgb3IgYWdlbnRzX2RiW2FnZW50X2lkXSBpcyBOb25lOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwNCwgZGV0YWlsPWZcIkFnZW50ICd7YWdlbnRfaWR9JyBub3QgZm91bmQgb3IgaW52YWxpZC5cIilcbiAgICBpZiBub3Qgb2JzZXJ2YXRpb246XG4gICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwMCwgZGV0YWlsPVwiT2JzZXJ2YXRpb24gY2Fubm90IGJlIGVtcHR5LlwiKVxuXG4gICAgYWdlbnQ6IEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnQgPSBhZ2VudHNfZGJbYWdlbnRfaWRdXG4gICAgb3JpZ2luYWxfayA9IC0xXG4gICAgcmV0cmlldmVyID0gYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXJcbiAgICBpZiBoYXNhdHRyKHJldHJpZXZlciwgJ2snKTpcbiAgICAgICAgIG9yaWdpbmFsX2sgPSByZXRyaWV2ZXIua1xuXG4gICAgYXBpX3JlYWN0aW9uX3R5cGUsIGFwaV9jb250ZW50LCBvYnNlcnZhdGlvbl93YXNfaW1wb3J0YW50X2ZsYWcgPSBcIlVOS05PV05cIiwgXCJcIiwgRmFsc2VcbiAgICB0cnk6XG4gICAgICAgIGlmIHJlcS5rIGlzIG5vdCBOb25lIGFuZCByZXEuayA+IDAgYW5kIGhhc2F0dHIocmV0cmlldmVyLCAnaycpOlxuICAgICAgICAgICAgcmV0cmlldmVyLmsgPSByZXEua1xuICAgICAgICBcbiAgICAgICAgYXBpX3JlYWN0aW9uX3R5cGUsIGFwaV9jb250ZW50LCBvYnNlcnZhdGlvbl93YXNfaW1wb3J0YW50X2ZsYWcgPSBhZ2VudC5nZXRfaW50ZXJwcmV0ZWRfcmVhY3Rpb24ob2JzZXJ2YXRpb24sIGRhdGV0aW1lLm5vdygpKVxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5PS0dSRUVOfURFQlVHOiBhZ2VudC5nZXRfaW50ZXJwcmV0ZWRfcmVhY3Rpb24gY29tcGxldGVkLiBBUEkgVHlwZTogJ3thcGlfcmVhY3Rpb25fdHlwZX0nLCBJbXBvcnRhbnQ6IHtvYnNlcnZhdGlvbl93YXNfaW1wb3J0YW50X2ZsYWd9e0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcblxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgcHJpbnQoZlwie0JDb2xvcnMuRkFJTH1FUlJPUl9TVEFDS1RSQUNFOiBFcnJvciBkdXJpbmcgcmVhY3Rpb24gZ2VuZXJhdGlvbiBmb3IgYWdlbnQge2FnZW50X2lkfToge2V9e0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICAgICAgdHJhY2ViYWNrLnByaW50X2V4YygpXG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZlwiRXJyb3IgZHVyaW5nIHJlYWN0aW9uIGdlbmVyYXRpb246IHtlfVwiKVxuICAgIGZpbmFsbHk6XG4gICAgICAgIGlmIG9yaWdpbmFsX2sgIT0gLTEgYW5kIGhhc2F0dHIocmV0cmlldmVyLCAnaycpOlxuICAgICAgICAgICAgIHJldHJpZXZlci5rID0gb3JpZ2luYWxfa1xuXG4gICAgcmV0dXJuIEdlbmVyYXRlUmVhY3Rpb25SZXNwb25zZShcbiAgICAgICAgYWdlbnRfbmFtZT1hZ2VudC5uYW1lLCByZWFjdGlvbl90eXBlPWFwaV9yZWFjdGlvbl90eXBlLFxuICAgICAgICBjb250ZW50PWFwaV9jb250ZW50LCBvYnNlcnZhdGlvbl93YXNfaW1wb3J0YW50PW9ic2VydmF0aW9uX3dhc19pbXBvcnRhbnRfZmxhZ1xuICAgIClcblxuQHJvdXRlci5wb3N0KFwiL3thZ2VudF9pZH0vYWRkX21lbW9yeVwiLCByZXNwb25zZV9tb2RlbD1BZGRlZE1lbW9yeVJlc3BvbnNlKVxuZGVmIGFkZF9tZW1vcnlfZW5kcG9pbnQoYWdlbnRfaWQ6IHN0ciwgcmVxOiBBZGRNZW1vcnlSZXEpOlxuICAgIGlmIGFnZW50X2lkIG5vdCBpbiBhZ2VudHNfZGIgb3IgYWdlbnRzX2RiW2FnZW50X2lkXSBpcyBOb25lOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwNCwgZGV0YWlsPWZcIkFnZW50ICd7YWdlbnRfaWR9JyBub3QgZm91bmQgb3IgaW52YWxpZC5cIilcbiAgICB0ZXh0X3RvX2FkZCA9IHJlcS50ZXh0X3RvX21lbW9yaXplLnN0cmlwKClcbiAgICBpZiBub3QgdGV4dF90b19hZGQ6XG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NDAwLCBkZXRhaWw9XCJNZW1vcnkgdGV4dCBtYXkgbm90IGJlIGVtcHR5LlwiKVxuICAgIGFnZW50ID0gYWdlbnRzX2RiW2FnZW50X2lkXVxuICAgIHRyeTpcbiAgICAgICAgaWYgbm90IGFnZW50Lm1lbW9yeTpcbiAgICAgICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTUwMCwgZGV0YWlsPWZcIkFnZW50IHthZ2VudF9pZH0gbWVtb3J5IG5vdCBpbml0aWFsaXplZC5cIilcbiAgICAgICAgYWdlbnQubWVtb3J5LmFkZF9tZW1vcnkodGV4dF90b19hZGQsIG5vdz1kYXRldGltZS5ub3coKSlcbiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZlwiRXJyb3IgYWRkaW5nIG1lbW9yeToge2V9XCIpXG4gICAgcmV0dXJuIEFkZGVkTWVtb3J5UmVzcG9uc2Uoc3RhdHVzPVwic3VjY2Vzc1wiLCBhZGRlZF9tZW1vcnk9dGV4dF90b19hZGQpXG5cbkByb3V0ZXIucG9zdChcIi97YWdlbnRfaWR9L2ZldGNoX21lbW9yaWVzXCIsIHJlc3BvbnNlX21vZGVsPUZldGNoZWRNZW1vcmllc1Jlc3BvbnNlKVxuZGVmIGZldGNoX21lbW9yaWVzX2VuZHBvaW50KGFnZW50X2lkOiBzdHIsIHJlcTogRmV0Y2hNZW1vcmllc1JlcSk6XG4gICAgaWYgYWdlbnRfaWQgbm90IGluIGFnZW50c19kYiBvciBhZ2VudHNfZGJbYWdlbnRfaWRdIGlzIE5vbmU6XG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NDA0LCBkZXRhaWw9ZlwiQWdlbnQgJ3thZ2VudF9pZH0nIG5vdCBmb3VuZCBvciBpbnZhbGlkLlwiKVxuICAgIG9ic2VydmF0aW9uID0gcmVxLm9ic2VydmF0aW9uLnN0cmlwKClcbiAgICBpZiBub3Qgb2JzZXJ2YXRpb246XG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NDAwLCBkZXRhaWw9XCJPYnNlcnZhdGlvbiB0ZXh0IG1heSBub3QgYmUgZW1wdHkgZm9yIGZldGNoaW5nIG1lbW9yaWVzLlwiKVxuXG4gICAgYWdlbnQgPSBhZ2VudHNfZGJbYWdlbnRfaWRdXG4gICAgaWYgbm90IGFnZW50Lm1lbW9yeSBvciBub3QgYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXI6XG4gICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTUwMCwgZGV0YWlsPWZcIkFnZW50IHthZ2VudF9pZH0gbWVtb3J5L3JldHJpZXZlciBub3QgaW5pdGlhbGl6ZWQuXCIpXG5cbiAgICBvcmlnaW5hbF9rLCByZXRyaWV2ZXIgPSAtMSwgYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXJcbiAgICBpZiBoYXNhdHRyKHJldHJpZXZlciwgJ2snKTogb3JpZ2luYWxfayA9IHJldHJpZXZlci5rXG4gICAgXG4gICAgcmVzcG9uc2VfcGF5bG9hZF9kb2NzOiBMaXN0W0ZldGNoZWRNZW1vcmllc0RvY3VtZW50XSA9IFtdXG4gICAgdHJ5OlxuICAgICAgICByZXF1ZXN0ZWRfayA9IHJldHJpZXZlci5rICMgRGVmYXVsdCB0byByZXRyaWV2ZXIncyBrXG4gICAgICAgIGlmIHJlcS5rIGlzIG5vdCBOb25lIGFuZCByZXEuayA+IDAgYW5kIGhhc2F0dHIocmV0cmlldmVyLCAnaycpOlxuICAgICAgICAgICAgcmVxdWVzdGVkX2sgPSByZXEua1xuICAgICAgICAgICAgcmV0cmlldmVyLmsgPSByZXF1ZXN0ZWRfa1xuXG4gICAgICAgIGRvY3NfYW5kX3Njb3JlczogTGlzdFtUdXBsZVtEb2N1bWVudCwgZmxvYXRdXSA9IFtdXG4gICAgICAgIGlmIChoYXNhdHRyKHJldHJpZXZlciwgXCJ2ZWN0b3JzdG9yZVwiKSBhbmQgcmV0cmlldmVyLnZlY3RvcnN0b3JlIGFuZFxuICAgICAgICAgICAgaGFzYXR0cihyZXRyaWV2ZXIudmVjdG9yc3RvcmUsIFwic2ltaWxhcml0eV9zZWFyY2hfd2l0aF9yZWxldmFuY2Vfc2NvcmVzXCIpKTpcbiAgICAgICAgICAgIGRvY3NfYW5kX3Njb3JlcyA9IHJldHJpZXZlci52ZWN0b3JzdG9yZS5zaW1pbGFyaXR5X3NlYXJjaF93aXRoX3JlbGV2YW5jZV9zY29yZXMob2JzZXJ2YXRpb24sIGs9cmVxdWVzdGVkX2spXG4gICAgICAgIGVsc2U6XG4gICAgICAgICAgICBmZXRjaGVkX2RvY3Nfb25seTogTGlzdFtEb2N1bWVudF0gPSBhZ2VudC5tZW1vcnkuZmV0Y2hfbWVtb3JpZXMob2JzZXJ2YXRpb24sIG5vdz1kYXRldGltZS5ub3coKSlcbiAgICAgICAgICAgIGRvY3NfYW5kX3Njb3JlcyA9IFsoZG9jLCAwLjApIGZvciBkb2MgaW4gZmV0Y2hlZF9kb2NzX29ubHldXG5cbiAgICAgICAgZm9yIGRvYywgc2NvcmUgaW4gZG9jc19hbmRfc2NvcmVzOlxuICAgICAgICAgICAgc2VyaWFsaXphYmxlX21ldGFkYXRhID0ge1xuICAgICAgICAgICAgICAgIGs6IHYuaXNvZm9ybWF0KCkgaWYgaXNpbnN0YW5jZSh2LCBkYXRldGltZSkgZWxzZVxuICAgICAgICAgICAgICAgICAgIHYudG9saXN0KCkgaWYgaXNpbnN0YW5jZSh2LCBucC5uZGFycmF5KSBlbHNlXG4gICAgICAgICAgICAgICAgICAgZmxvYXQodikgaWYgaXNpbnN0YW5jZSh2LCAobnAuZmxvYXQzMiwgbnAuZmxvYXQ2NCkpIGVsc2VcbiAgICAgICAgICAgICAgICAgICBpbnQodikgaWYgaXNpbnN0YW5jZSh2LCAobnAuaW50MzIsIG5wLmludDY0KSkgZWxzZSB2XG4gICAgICAgICAgICAgICAgZm9yIGssIHYgaW4gZG9jLm1ldGFkYXRhLml0ZW1zKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3BvbnNlX3BheWxvYWRfZG9jcy5hcHBlbmQoRmV0Y2hlZE1lbW9yaWVzRG9jdW1lbnQoXG4gICAgICAgICAgICAgICAgY29udGVudD1kb2MucGFnZV9jb250ZW50LCBtZXRhZGF0YT1zZXJpYWxpemFibGVfbWV0YWRhdGEsIHJlbGV2YW5jZV9zY29yZT1zY29yZVxuICAgICAgICAgICAgKSlcbiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZlwiRXJyb3IgZmV0Y2hpbmcgbWVtb3JpZXM6IHtlfVwiKVxuICAgIGZpbmFsbHk6XG4gICAgICAgIGlmIG9yaWdpbmFsX2sgIT0gLTEgYW5kIGhhc2F0dHIocmV0cmlldmVyLCAnaycpOlxuICAgICAgICAgICAgIHJldHJpZXZlci5rID0gb3JpZ2luYWxfa1xuICAgIHJldHVybiBGZXRjaGVkTWVtb3JpZXNSZXNwb25zZShtZW1vcmllcz1yZXNwb25zZV9wYXlsb2FkX2RvY3MpXG4uLi5cblBhdGg6IHNjaGVtYXMucHlcbiMgRmlsZTogc2NoZW1hcy5weVxuZnJvbSB0eXBpbmcgaW1wb3J0IE9wdGlvbmFsLCBMaXN0LCBEaWN0LCBBbnlcbmZyb20gcHlkYW50aWMgaW1wb3J0IEJhc2VNb2RlbCwgRmllbGRcblxuY2xhc3MgQ3JlYXRlQWdlbnRSZXEoQmFzZU1vZGVsKTpcbiAgICBuYW1lOiBzdHJcbiAgICBhZ2U6IGludFxuICAgIHRyYWl0czogc3RyXG4gICAgc3RhdHVzOiBzdHJcbiAgICBhZ2VudF9pZDogT3B0aW9uYWxbc3RyXSA9IE5vbmVcbiAgICBzdW1tYXJ5X3JlZnJlc2hfc2Vjb25kczogaW50ID0gRmllbGQoZGVmYXVsdD0zNjAwLCBnZT0wKVxuICAgIHJlZmxlY3Rpb25fdGhyZXNob2xkOiBpbnQgPSBGaWVsZChkZWZhdWx0PTAsIGdlPTApXG4gICAgdmVyYm9zZTogYm9vbCA9IEZhbHNlXG4gICAgbW9kZWxfbmFtZTogT3B0aW9uYWxbc3RyXSA9IE5vbmVcbiAgICBlbWJlZGRpbmdfbW9kZWxfbmFtZTogT3B0aW9uYWxbc3RyXSA9IE5vbmVcblxuY2xhc3MgR2VuZXJhdGVSZXNwb25zZVJlcShCYXNlTW9kZWwpOlxuICAgIHByb21wdDogc3RyXG4gICAgazogT3B0aW9uYWxbaW50XSA9IEZpZWxkKGRlZmF1bHQ9Tm9uZSwgZ3Q9MClcblxuY2xhc3MgR2VuZXJhdGVSZWFjdGlvblJlc3BvbnNlKEJhc2VNb2RlbCk6XG4gICAgYWdlbnRfbmFtZTogc3RyXG4gICAgcmVhY3Rpb25fdHlwZTogc3RyICMgU0FZLCBUSElOSywgRE8sIElHTk9SRSwgVU5LTk9XTlxuICAgIGNvbnRlbnQ6IHN0clxuICAgIG9ic2VydmF0aW9uX3dhc19pbXBvcnRhbnQ6IGJvb2xcblxuY2xhc3MgQWRkTWVtb3J5UmVxKEJhc2VNb2RlbCk6XG4gICAgdGV4dF90b19tZW1vcml6ZTogc3RyXG5cbmNsYXNzIEZldGNoTWVtb3JpZXNSZXEoQmFzZU1vZGVsKTpcbiAgICBvYnNlcnZhdGlvbjogc3RyXG4gICAgazogT3B0aW9uYWxbaW50XSA9IEZpZWxkKGRlZmF1bHQ9Tm9uZSwgZ3Q9MClcblxuY2xhc3MgVXBkYXRlU3RhdHVzUmVxKEJhc2VNb2RlbCk6XG4gICAgbmV3X3N0YXR1czogc3RyXG5cbmNsYXNzIEFnZW50RGV0YWlsKEJhc2VNb2RlbCk6XG4gICAgYWdlbnRfaWQ6IHN0clxuICAgIG5hbWU6IHN0clxuICAgIHN0YXR1czogc3RyXG4gICAgbGxtX21vZGVsOiBzdHJcbiAgICBlbWJlZGRpbmdfbW9kZWw6IHN0clxuXG5jbGFzcyBBZ2VudExpc3RSZXNwb25zZShCYXNlTW9kZWwpOlxuICAgIGFnZW50czogTGlzdFtBZ2VudERldGFpbF1cblxuY2xhc3MgQWdlbnRDcmVhdGlvblJlc3BvbnNlKEJhc2VNb2RlbCk6XG4gICAgYWdlbnRfaWQ6IHN0clxuICAgIG5hbWU6IHN0clxuICAgIGxsbV9tb2RlbF91c2VkOiBzdHJcbiAgICBlbWJlZGRpbmdfbW9kZWxfdXNlZDogc3RyXG5cbmNsYXNzIFNpbXBsZVN0YXR1c1Jlc3BvbnNlKEJhc2VNb2RlbCk6XG4gICAgc3RhdHVzOiBzdHJcbiAgICBtZXNzYWdlOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuXG5jbGFzcyBBZGRlZE1lbW9yeVJlc3BvbnNlKEJhc2VNb2RlbCk6XG4gICAgc3RhdHVzOiBzdHJcbiAgICBhZGRlZF9tZW1vcnk6IHN0clxuXG5jbGFzcyBGZXRjaGVkTWVtb3JpZXNEb2N1bWVudChCYXNlTW9kZWwpOlxuICAgIGNvbnRlbnQ6IHN0clxuICAgIG1ldGFkYXRhOiBEaWN0W3N0ciwgQW55XVxuICAgIHJlbGV2YW5jZV9zY29yZTogZmxvYXRcblxuY2xhc3MgRmV0Y2hlZE1lbW9yaWVzUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBtZW1vcmllczogTGlzdFtGZXRjaGVkTWVtb3JpZXNEb2N1bWVudF1cbi4uLlxuUGF0aDogcHJvbXB0cy5weVxuIyBGaWxlOiBwcm9tcHRzLnB5XG5cbiMgLS0tIEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnQgUHJvbXB0cyAtLS1cblxuREVDSVNJT05fVEVNUExBVEUgPSAoXG4gICAgXCJZb3UgYXJlIHthZ2VudF9uYW1lfS5cXG5cIlxuICAgIFwiWW91ciBjb3JlIGNoYXJhY3RlcmlzdGljcyBhcmU6IHthZ2VudF90cmFpdHN9XFxuXCJcbiAgICBcIkl0IGlzIHtjdXJyZW50X3RpbWV9LlxcblwiXG4gICAgXCJZb3VyIHN0YXR1cyBpczoge2FnZW50X3N0YXR1c31cXG5cIlxuICAgIFwiWW91IG9ic2VydmU6IHtvYnNlcnZhdGlvbn1cXG5cIlxuICAgIFwiUmVsZXZhbnQgcmVjZW50IG1lbW9yaWVzOlxcbnttZW1vcnlfY29udGV4dH1cXG5cXG5cIlxuICAgIFwiQ29uc2lkZXJpbmcgeW91ciBwZXJzb25hbGl0eSAoZXNwZWNpYWxseSB0cmFpdHMgbGlrZSB7YWdlbnRfdHJhaXRzfSksIHRoZSBvYnNlcnZhdGlvbiwgYW5kIHJlY2VudCBtZW1vcmllcywgXCJcbiAgICBcIndoYXQgaXMgdGhlICptb3N0IGxpa2VseSB0eXBlKiBvZiBpbW1lZGlhdGUgcmVhY3Rpb24geW91IHdvdWxkIGhhdmU/IENob29zZSAqb25lKiBmcm9tOiBcIlxuICAgIFwiJ1NBWScgKHNwZWFrIGFsb3VkKSwgJ1RISU5LJyAoaW50ZXJuYWwgdGhvdWdodCBvbmx5KSwgJ0RPJyAocGVyZm9ybSBhIHBoeXNpY2FsIGFjdGlvbiksICdJR05PUkUnIChubyBzaWduaWZpY2FudCByZWFjdGlvbiwgcmVtYWluIGluIGN1cnJlbnQgc3RhdHVzKS5cIlxuICAgIFwiXFxuUmVhY3Rpb24gVHlwZSBDaG9pY2U6XCJcbilcblxuVEhPVUdIVF9URU1QTEFURSA9IChcbiAgICBcIllvdSBhcmUge2FnZW50X25hbWV9LlxcblwiXG4gICAgXCJZb3VyIGNvcmUgY2hhcmFjdGVyaXN0aWNzIGFyZToge2FnZW50X3RyYWl0c31cXG5cIlxuICAgIFwiSXQgaXMge2N1cnJlbnRfdGltZX0uXFxuXCJcbiAgICBcIllvdXIgc3RhdHVzIGlzOiB7YWdlbnRfc3RhdHVzfVxcblwiXG4gICAgXCJZb3Ugb2JzZXJ2ZToge29ic2VydmF0aW9ufVxcblwiXG4gICAgXCJSZWxldmFudCByZWNlbnQgbWVtb3JpZXM6XFxue21lbW9yeV9jb250ZXh0fVxcblwiXG4gICAgXCJSZWxhdGlvbnNoaXAgY29udGV4dDoge3JlbGF0aW9uc2hpcF9jb250ZXh0fVxcblxcblwiXG4gICAgXCJDb25zaWRlcmluZyB5b3VyIHBlcnNvbmFsaXR5IGFuZCB0aGUgc2l0dWF0aW9uLCB3aGF0IGlzIHlvdXIgKmludGVybmFsIHRob3VnaHQqIG9yICphc3Nlc3NtZW50KiByaWdodCBub3cgaW4gcmVzcG9uc2UgdG8gdGhlIG9ic2VydmF0aW9uPyBcIlxuICAgIFwiRGVzY3JpYmUgdGhlIHRob3VnaHQgY29uY2lzZWx5LiBEbyAqbm90KiBkZXNjcmliZSBhY3Rpb25zIG9yIHNwZWVjaC4gRXhhbXBsZTogKEludGVybmFsIHRob3VnaHQpIFRoYXQgc2VlbXMgc3VzcGljaW91cy5cIlxuICAgIFwiXFxuSW50ZXJuYWwgVGhvdWdodDpcIlxuKVxuXG5BQ1RJT05fVEVNUExBVEUgPSAoXG4gICAgXCJZb3UgYXJlIHthZ2VudF9uYW1lfS5cXG5cIlxuICAgIFwiWW91ciBjb3JlIGNoYXJhY3RlcmlzdGljcyBhcmU6IHthZ2VudF90cmFpdHN9XFxuXCJcbiAgICBcIkl0IGlzIHtjdXJyZW50X3RpbWV9LlxcblwiXG4gICAgXCJZb3VyIHN0YXR1cyBpczoge2FnZW50X3N0YXR1c31cXG5cIlxuICAgIFwiWW91IG9ic2VydmU6IHtvYnNlcnZhdGlvbn1cXG5cIlxuICAgIFwiUmVsZXZhbnQgcmVjZW50IG1lbW9yaWVzOlxcbnttZW1vcnlfY29udGV4dH1cXG5cIlxuICAgIFwiUmVsYXRpb25zaGlwIGNvbnRleHQ6IHtyZWxhdGlvbnNoaXBfY29udGV4dH1cXG5cXG5cIlxuICAgIFwiQ29uc2lkZXJpbmcgeW91ciBwZXJzb25hbGl0eSBhbmQgdGhlIHNpdHVhdGlvbiwgd2hhdCAqcGh5c2ljYWwgYWN0aW9uKiBkbyB5b3UgdGFrZSBpbiBpbW1lZGlhdGUgcmVzcG9uc2UgdG8gdGhlIG9ic2VydmF0aW9uPyBcIlxuICAgIFwiRGVzY3JpYmUgdGhlIGFjdGlvbiBjb25jaXNlbHkgYXMgaWYgbmFycmF0aW5nIGl0LiBFeGFtcGxlOiBJIHNoaWZ0IG15IHdlaWdodCB1bmVhc2lseS4gLyBJIGRyYXcgbXkgc3dvcmQuXCJcbiAgICBcIlxcbkFjdGlvbiBUYWtlbjpcIlxuKVxuLi4uXG5cblBPSUdOQU5DWV9TQ09SSU5HX0ZBTExCQUNLX1RFTVBMQVRFID0gKFxuICAgIFwiUmF0ZSB0aGUgcG9pZ25hbmN5IG9mIHRoaXMgb2JzZXJ2YXRpb24gb24gYSBzY2FsZSBvZiAxIHRvIDEwIChpbnRlZ2VyKToge29ic2VydmF0aW9ufVxcblJhdGluZzpcIlxuKVxuLi4uXG5QYXRoOiBtYWluLnB5XG4jIEZpbGU6IG1haW4ucHlcbmZyb20gZmFzdGFwaSBpbXBvcnQgRmFzdEFQSVxuXG5mcm9tIHV0aWxzIGltcG9ydCBCQ29sb3JzICMgSW1wb3J0IGZyb20gbmV3IHV0aWxzXG5mcm9tIGNvbmZpZyBpbXBvcnQgT1BFTkFJX0FQSV9LRVlfU0VUICMgSW1wb3J0IGZyb20gbmV3IGNvbmZpZ1xuZnJvbSByb3V0ZXJzIGltcG9ydCBhZ2VudF9yb3V0ZXIgIyBJbXBvcnQgdGhlIG5ldyByb3V0ZXJcbiMgVGhlIGdsb2JhbCBhZ2VudHNfZGIgaXMgbm93IGluIHJvdXRlcnMuYWdlbnRfcm91dGVyXG5cbmFwcCA9IEZhc3RBUEkodGl0bGU9XCJBdXRvbm9tb3VzIEdlbmVyYXRpdmUtQWdlbnQgQVBJIHYyXCIpICMgVXBkYXRlZCB0aXRsZVxuXG5wcmludChmXCJ7QkNvbG9ycy5PS0dSRUVOfUQuLi4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJkZmEzYjcwNS04MTNhLTQwZjUtOTgzMy0xZDk5M2M4M2U3ODQ7dG9vbHVfdnJ0eF8wMVRNaFB4SmF0am80NFh4ck13cVFyNjkiOnsicmVxdWVzdElkIjoiZGZhM2I3MDUtODEzYS00MGY1LTk4MzMtMWQ5OTNjODNlNzg0IiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMVRNaFB4SmF0am80NFh4ck13cVFyNjkiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiItIFtIb3cgdG8gYWRkIHRvb2wgb3V0cHV0IHRvIEFnZW50IE1lbW9yeT8gwrcgbGFuZ2NoYWluLWFpIGxhbmdjaGFpbiAuLi5dKGh0dHBzOi8vZ2l0aHViLmNvbS9sYW5nY2hhaW4tYWkvbGFuZ2NoYWluL2Rpc2N1c3Npb25zLzEyMTQ4KVxuICBPY3QgMjMsIDIwMjMgLi4uIC4uLiBtZXRob2Qgb2YgdGhlIEdlbmVyYXRpdmVBZ2VudE1lbW9yeSBjbGFzcy4gVGhlc2UgbWV0aG9kcyBhZGQgYW4gb2JzZXJ2YXRpb24gb3IgbWVtb3J5IHRvIHRoZSBhZ2VudCdzIG1lbW9yeS4gVGhlIG1lbW9yeSBpcyBzdG9yZWQgYXMgYcKgLi4uXG5cbi0gW0EgRGVlcCBEaXZlIEludG8gTGFuZ0NoYWluJ3MgR2VuZXJhdGl2ZSBBZ2VudHMgfCBibG9nX3Bvc3RzIC4uLl0oaHR0cHM6Ly93YW5kYi5haS92aW5jZW50dHUvYmxvZ19wb3N0cy9yZXBvcnRzL0EtRGVlcC1EaXZlLUludG8tTGFuZ0NoYWluLXMtR2VuZXJhdGl2ZS1BZ2VudHMtLVZtbGxkem8xTXpNd05qSTMpXG4gIFNlcCA3LCAyMDIzIC4uLiAuLi4gR2VuZXJhdGl2ZUFnZW50TWVtb3J5IGxsbSwgaW5wdXQgcHJvbXB0LCBhbmQgR2VuZXJhdGl2ZUFnZW50TWVtb3J5IHZlcmJvc2UgZmxhZy4gSW1wb3J0YW5jZS4gX3Njb3JlX21lbW9yeV9pbXBvcnRhbmNlOiBHaXZlbiBtZW1vcnksIGEgc3RywqAuLi5cblxuLSBbVW50aXRsZWRdKGh0dHBzOi8vaHVnZ2luZ2ZhY2UuY28vZGF0YXNldHMvYW1vZGFycmVzL2xhbmdjaGFpbl9kb2NzX3Rlc3QvY29tbWl0LzkwMTQ0NGRhMzNmZjg0NzI3YTZhM2M4ZjliZjgxNjg0MzhmN2IzZTIuZGlmZj9maWxlPXRyYWluLmpzb25sKVxuICAuLi4gTGFuZ0NoYWluXFxuIENvbnRlbnRzIFxcbkdldHRpbmcgU3RhcnRlZFxcbk1vZHVsZXNcXG5Vc2UgQ2FzZXNcXG5SZWZlcmVuY2UgRG9jcyAuLi4gbWV0aG9kKVxcbihsYW5nY2hhaW4ubGxtcy5BbGVwaEFscGhhIG1ldGhvZClcXG4obGFuZ2NoYWluLmxsbXMuQW50aHJvcGljwqAuLi4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCI3YmE5YjE1OC0xOGExLTRlOGMtYTRlMS1iYjYyMGNmMGFiNGM7dG9vbHVfdnJ0eF8wMTJkWnpLNXBVaUdWWGV0NDdHMTc3UEsiOnsicmVxdWVzdElkIjoiN2JhOWIxNTgtMThhMS00ZThjLWE0ZTEtYmI2MjBjZjBhYjRjIiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMTJkWnpLNXBVaUdWWGV0NDdHMTc3UEsiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBjdXN0b21fYWdlbnQucHlcbiMgRmlsZTogY3VzdG9tX2FnZW50LnB5XG5mcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZVxuZnJvbSB0eXBpbmcgaW1wb3J0IFR1cGxlLCBPcHRpb25hbCwgQW55XG5pbXBvcnQgcmVcblxuZnJvbSBsYW5nY2hhaW5fZXhwZXJpbWVudGFsLmdlbmVyYXRpdmVfYWdlbnRzLmdlbmVyYXRpdmVfYWdlbnQgaW1wb3J0IEdlbmVyYXRpdmVBZ2VudFxuZnJvbSBsYW5nY2hhaW4ucHJvbXB0cyBpbXBvcnQgUHJvbXB0VGVtcGxhdGVcbmZyb20gbGFuZ2NoYWluLmNoYWlucyBpbXBvcnQgTExNQ2hhaW5cblxuZnJvbSB1dGlscyBpbXBvcnQgQkNvbG9yc1xuXG5jbGFzcyBBdXRvbm9tb3VzR2VuZXJhdGl2ZUFnZW50KEdlbmVyYXRpdmVBZ2VudCk6XG4gICAgZGVmIF9faW5pdF9fKHNlbGYsICoqZGF0YTogQW55KTpcbiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygqKmRhdGEpXG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLk9LR1JFRU59REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogSW5pdGlhbGl6ZWQgQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudCwgXCJcbiAgICAgICAgICAgICAgZlwidXNpbmcgYmFzZSBHZW5lcmF0aXZlQWdlbnQgbG9naWMue0JDb2xvcnMuRU5EQ31cIilcblxuICAgIGRlZiBnZXRfaW50ZXJwcmV0ZWRfcmVhY3Rpb24oc2VsZiwgb2JzZXJ2YXRpb246IHN0ciwgbm93OiBPcHRpb25hbFtkYXRldGltZV0gPSBOb25lKSAtPiBUdXBsZVtzdHIsIHN0ciwgYm9vbF06XG4gICAgICAgIGNhbGxfdGltZSA9IG5vdyBvciBkYXRldGltZS5ub3coKVxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5ESU19REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogQ2FsbGluZyBwYXJlbnQncyBnZW5lcmF0ZV9yZWFjdGlvbiBmb3I6ICd7b2JzZXJ2YXRpb25bOjUwXX0uLi4ne0JDb2xvcnMuRU5EQ31cIilcblxuICAgICAgICBpc19kaWFsb2d1ZV9mbGFnLCByZXN1bHRfc3RyID0gc3VwZXIoKS5nZW5lcmF0ZV9yZWFjdGlvbihvYnNlcnZhdGlvbiwgbm93PWNhbGxfdGltZSlcblxuICAgICAgICBlc3RpbWF0ZWRfb2JzZXJ2YXRpb25faW1wb3J0YW5jZSA9IEZhbHNlXG4gICAgICAgIHRyeTpcbiAgICAgICAgICAgIGlmIHNlbGYubGxtOlxuICAgICAgICAgICAgICAgIHBvaWduYW5jeV9wcm9tcHRfc3RyID0gKFxuICAgICAgICAgICAgICAgICAgICBcIklzIHRoZSBmb2xsb3dpbmcgb2JzZXJ2YXRpb24gbXVuZGFuZSAoZS5nLiwgYnJ1c2hpbmcgdGVldGgpIG9yIHBvaWduYW50IChlLmcuLCBhIG1ham9yIGxpZmUgZXZlbnQpPyBcIlxuICAgICAgICAgICAgICAgICAgICBcIkFuc3dlciB3aXRoICdtdW5kYW5lJyBvciAncG9pZ25hbnQnLlxcbk9ic2VydmF0aW9uOiB7b2JzZXJ2YXRpb25fdGV4dH1cXG5BbnN3ZXI6XCJcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgcHJvbXB0ID0gUHJvbXB0VGVtcGxhdGUuZnJvbV90ZW1wbGF0ZShwb2lnbmFuY3lfcHJvbXB0X3N0cilcbiAgICAgICAgICAgICAgICBjaGFpbiA9IExMTUNoYWluKGxsbT1zZWxmLmxsbSwgcHJvbXB0PXByb21wdClcbiAgICAgICAgICAgICAgICBwb2lnbmFuY3lfcmVzdWx0ID0gY2hhaW4ucnVuKG9ic2VydmF0aW9uX3RleHQ9b2JzZXJ2YXRpb24pLnN0cmlwKCkubG93ZXIoKVxuICAgICAgICAgICAgICAgIGlmIFwicG9pZ25hbnRcIiBpbiBwb2lnbmFuY3lfcmVzdWx0OlxuICAgICAgICAgICAgICAgICAgICBlc3RpbWF0ZWRfb2JzZXJ2YXRpb25faW1wb3J0YW5jZSA9IFRydWVcbiAgICAgICAgICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5ESU19REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogT2JzZXJ2YXRpb24gcG9pZ25hbmN5IGVzdGltYXRlZCBhcyAne3BvaWduYW5jeV9yZXN1bHR9JywgQVBJIGltcG9ydGFudCBmbGFnOiB7ZXN0aW1hdGVkX29ic2VydmF0aW9uX2ltcG9ydGFuY2V9e0JDb2xvcnMuRU5EQ31cIilcbiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlX3BvaWduYW5jeTpcbiAgICAgICAgICAgIHByaW50KGZcIntCQ29sb3JzLldBUk5JTkd9V0FSTiAoQWdlbnQge3NlbGYubmFtZX0pOiBDb3VsZCBub3QgZXN0aW1hdGUgb2JzZXJ2YXRpb24gcG9pZ25hbmN5IGZvciBBUEkgZmxhZzoge2VfcG9pZ25hbmN5fXtCQ29sb3JzLkVOREN9XCIpXG5cbiAgICAgICAgY29udGVudCA9IHNlbGYuX2NsZWFuX3Jlc3BvbnNlKHJlc3VsdF9zdHIpXG5cbiAgICAgICAgaWYgaXNfZGlhbG9ndWVfZmxhZzpcbiAgICAgICAgICAgIGFjdHVhbF9kaWFsb2d1ZSA9IGNvbnRlbnRbbGVuKFwic2FpZCBcIik6XS5zdHJpcCgpIGlmIGNvbnRlbnQubG93ZXIoKS5zdGFydHN3aXRoKFwic2FpZCBcIikgZWxzZSBjb250ZW50XG4gICAgICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5PS0JMVUV9REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogSW50ZXJwcmV0ZWQgYXMgU0FZLCBDb250ZW50OiAne2FjdHVhbF9kaWFsb2d1ZX0ne0JDb2xvcnMuRU5EQ31cIilcbiAgICAgICAgICAgIHJldHVybiBcIlNBWVwiLCBhY3R1YWxfZGlhbG9ndWUsIGVzdGltYXRlZF9vYnNlcnZhdGlvbl9pbXBvcnRhbmNlXG4gICAgICAgIGVsc2U6XG4gICAgICAgICAgICBpZiBub3QgY29udGVudC5zdHJpcCgpIG9yIGNvbnRlbnQubG93ZXIoKSA9PSBcIm5vbmVcIjpcbiAgICAgICAgICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5ESU19REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogSW50ZXJwcmV0ZWQgYXMgSUdOT1JFLntCQ29sb3JzLkVOREN9XCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiSUdOT1JFXCIsIFwiXCIsIGVzdGltYXRlZF9vYnNlcnZhdGlvbl9pbXBvcnRhbmNlXG4gICAgICAgICAgICBlbHNlOlxuICAgICAgICAgICAgICAgIHByaW50KGZcIntCQ29sb3JzLk9LR1JFRU59REVCVUcgKEFnZW50IHtzZWxmLm5hbWV9KTogSW50ZXJwcmV0ZWQgYXMgRE8gKHJlYWN0aW9uKSwgQ29udGVudDogJ3tjb250ZW50fSd7QkNvbG9ycy5FTkRDfVwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBcIkRPXCIsIGNvbnRlbnQsIGVzdGltYXRlZF9vYnNlcnZhdGlvbl9pbXBvcnRhbmNlXG4uLi5cblBhdGg6IGFnZW50X2ZhY3RvcnkucHlcbiMgRmlsZTogYWdlbnRfZmFjdG9yeS5weVxuaW1wb3J0IHRyYWNlYmFja1xuZnJvbSB0eXBpbmcgaW1wb3J0IE9wdGlvbmFsXG5cbmltcG9ydCBmYWlzc1xuZnJvbSBmYXN0YXBpIGltcG9ydCBIVFRQRXhjZXB0aW9uXG5mcm9tIGxhbmdjaGFpbl9vcGVuYWkgaW1wb3J0IENoYXRPcGVuQUksIE9wZW5BSUVtYmVkZGluZ3NcbmZyb20gbGFuZ2NoYWluX2NvbW11bml0eS52ZWN0b3JzdG9yZXMgaW1wb3J0IEZBSVNTXG5mcm9tIGxhbmdjaGFpbl9jb21tdW5pdHkuZG9jc3RvcmUuaW5fbWVtb3J5IGltcG9ydCBJbk1lbW9yeURvY3N0b3JlXG5mcm9tIGxhbmdjaGFpbi5yZXRyaWV2ZXJzIGltcG9ydCBUaW1lV2VpZ2h0ZWRWZWN0b3JTdG9yZVJldHJpZXZlclxuZnJvbSBsYW5nY2hhaW5fZXhwZXJpbWVudGFsLmdlbmVyYXRpdmVfYWdlbnRzIGltcG9ydCBHZW5lcmF0aXZlQWdlbnRNZW1vcnlcbmZyb20gbGFuZ2NoYWluX2NvbW11bml0eS52ZWN0b3JzdG9yZXMudXRpbHMgaW1wb3J0IERpc3RhbmNlU3RyYXRlZ3lcblxuZnJvbSBjdXN0b21fYWdlbnQgaW1wb3J0IEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnRcbmZyb20gdXRpbHMgaW1wb3J0IEJDb2xvcnNcbmZyb20gY29uZmlnIGltcG9ydCBERUZBVUxUX0NIQVRfTU9ERUwsIERFRkFVTFRfRU1CRURESU5HX01PREVMXG4uLi5cblxuICAgIGVmZmVjdGl2ZV9sbG1fbW9kZWwgPSBsbG1fbW9kZWxfbmFtZSBpZiBsbG1fbW9kZWxfbmFtZSBhbmQgbGxtX21vZGVsX25hbWUuc3RyaXAoKSBlbHNlIERFRkFVTFRfQ0hBVF9NT0RFTFxuICAgIHRyeTpcbiAgICAgICAgYWdlbnRfbGxtID0gQ2hhdE9wZW5BSShtb2RlbF9uYW1lPWVmZmVjdGl2ZV9sbG1fbW9kZWwsIHRlbXBlcmF0dXJlPTAuNylcbiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLkZBSUx9RVJST1JfU1RBQ0tUUkFDRTogRmFpbGVkIHRvIGluaXRpYWxpemUgTExNIGZvciBhZ2VudCAne25hbWV9JyB3aXRoIG1vZGVsICd7ZWZmZWN0aXZlX2xsbV9tb2RlbH0nOiB7ZX17QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKClcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJGYWlsZWQgdG8gaW5pdGlhbGl6ZSBMTE0gd2l0aCBtb2RlbCAne2VmZmVjdGl2ZV9sbG1fbW9kZWx9Jzoge2V9XCIpXG5cbiAgICBlZmZlY3RpdmVfZW1iZWRkaW5nX21vZGVsID0gZW1iZWRkaW5nX21vZGVsX25hbWUgaWYgZW1iZWRkaW5nX21vZGVsX25hbWUgYW5kIGVtYmVkZGluZ19tb2RlbF9uYW1lLnN0cmlwKCkgZWxzZSBERUZBVUxUX0VNQkVERElOR19NT0RFTFxuICAgIGRpbSA9IDBcbiAgICB0cnk6XG4gICAgICAgIGFnZW50X2VtYmVkZGluZ3MgPSBPcGVuQUlFbWJlZGRpbmdzKG1vZGVsPWVmZmVjdGl2ZV9lbWJlZGRpbmdfbW9kZWwpXG4gICAgICAgIHByb2JlX2Zvcl9kaW0gPSBhZ2VudF9lbWJlZGRpbmdzLmVtYmVkX3F1ZXJ5KFwiZ2V0X2RpbV9wcm9iZV9mb3JfYWdlbnRcIilcbiAgICAgICAgZGltID0gbGVuKHByb2JlX2Zvcl9kaW0pXG4gICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5GQUlMfUVSUk9SX1NUQUNLVFJBQ0U6IEZhaWxlZCB0byBpbml0aWFsaXplIG9yIHRlc3QgT3BlbkFJRW1iZWRkaW5ncyBmb3IgYWdlbnQgJ3tuYW1lfScgd2l0aCBtb2RlbCAne2VmZmVjdGl2ZV9lbWJlZGRpbmdfbW9kZWx9Jzoge2V9e0JDb2xvcnMuRU5EQ31cIiwgZmx1c2g9VHJ1ZSlcbiAgICAgICAgdHJhY2ViYWNrLnByaW50X2V4YygpXG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZlwiRmFpbGVkIHRvIGluaXRpYWxpemUvdGVzdCBlbWJlZGRpbmdzIHdpdGggbW9kZWwgJ3tlZmZlY3RpdmVfZW1iZWRkaW5nX21vZGVsfSc6IHtlfVwiKVxuXG4gICAgcHJpbnQoZlwie0JDb2xvcnMuRElNfURFQlVHOiBTZXR0aW5nIHVwIEZBSVNTIGluZGV4IGZvciBhZ2VudCAne25hbWV9JyAoZGltOiB7ZGltfSkuIFVzaW5nIElubmVyIFByb2R1Y3QgKGZvciBDb3NpbmUpLntCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgdHJ5OlxuICAgICAgICBpbmRleCA9IGZhaXNzLkluZGV4RmxhdElQKGRpbSlcbiAgICAgICAgdmVjdG9yc3RvcmUgPSBGQUlTUyhcbiAgICAgICAgICAgIGVtYmVkZGluZ19mdW5jdGlvbj1hZ2VudF9lbWJlZGRpbmdzLFxuICAgICAgICAgICAgaW5kZXg9aW5kZXgsXG4gICAgICAgICAgICBkb2NzdG9yZT1Jbk1lbW9yeURvY3N0b3JlKHt9KSxcbiAgICAgICAgICAgIGluZGV4X3RvX2RvY3N0b3JlX2lkPXt9LFxuICAgICAgICAgICAgbm9ybWFsaXplX0wyPVRydWUsXG4gICAgICAgICAgICBkaXN0YW5jZV9zdHJhdGVneT1EaXN0YW5jZVN0cmF0ZWd5Lk1BWF9JTk5FUl9QUk9EVUNUXG4gICAgICAgIClcbiAgICAgICAgcmV0cmlldmVyID0gVGltZVdlaWdodGVkVmVjdG9yU3RvcmVSZXRyaWV2ZXIoXG4gICAgICAgICAgICB2ZWN0b3JzdG9yZT12ZWN0b3JzdG9yZSwgaz0xNSwgZGVjYXlfcmF0ZT0wLjAxXG4gICAgICAgIClcbiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLkZBSUx9RVJST1JfU1RBQ0tUUkFDRTogRmFpbGVkIGR1cmluZyBGQUlTUyBzZXR1cCBmb3IgYWdlbnQgJ3tuYW1lfSc6IHtlfXtCQ29sb3JzLkVOREN9XCIsIGZsdXNoPVRydWUpXG4gICAgICAgIHRyYWNlYmFjay5wcmludF9leGMoKVxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTUwMCwgZGV0YWlsPWZcIkZhaWxlZCBkdXJpbmcgRkFJU1Mgc2V0dXA6IHtlfVwiKVxuXG4gICAgcHJpbnQoZlwie0JDb2xvcnMuRElNfURFQlVHOiBTZXR0aW5nIHVwIEdlbmVyYXRpdmVBZ2VudE1lbW9yeSBmb3IgYWdlbnQgJ3tuYW1lfScuLi57QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgIHRyeTpcbiAgICAgICAgYWN0dWFsX3JlZmxlY3RfZm9yX21lbW9yeSA9IGZsb2F0KHJlZmxlY3Rpb25fdGhyZXNob2xkKSBpZiByZWZsZWN0aW9uX3RocmVzaG9sZCA+IDAgZWxzZSBOb25lXG4gICAgICAgIG1lbW9yeV9pbnN0YW5jZSA9IEdlbmVyYXRpdmVBZ2VudE1lbW9yeShcbiAgICAgICAgICAgIGxsbT1hZ2VudF9sbG0sXG4gICAgICAgICAgICBtZW1vcnlfcmV0cmlldmVyPXJldHJpZXZlcixcbiAgICAgICAgICAgIHJlZmxlY3Rpb25fdGhyZXNob2xkPWFjdHVhbF9yZWZsZWN0X2Zvcl9tZW1vcnksXG4gICAgICAgICAgICB2ZXJib3NlPXZlcmJvc2UsXG4gICAgICAgIClcbiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLkZBSUx9RVJST1JfU1RBQ0tUUkFDRTogRmFpbGVkIGR1cmluZyBHZW5lcmF0aXZlQWdlbnRNZW1vcnkgc2V0dXAgZm9yIGFnZW50ICd7bmFtZX0nOiB7ZX17QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKClcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJGYWlsZWQgZHVyaW5nIEdlbmVyYXRpdmVBZ2VudE1lbW9yeSBzZXR1cDoge2V9XCIpXG4uLi5cblBhdGg6IHJvdXRlcnMvYWdlbnRfcm91dGVyLnB5XG4jIEZpbGU6IHJvdXRlcnMvYWdlbnRfcm91dGVyLnB5XG5pbXBvcnQgdHJhY2ViYWNrXG5mcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZVxuZnJvbSB0eXBpbmcgaW1wb3J0IERpY3QsIExpc3QsIEFueSwgVHVwbGVcbmZyb20gdXVpZCBpbXBvcnQgdXVpZDRcbmltcG9ydCBudW1weSBhcyBucFxuXG5mcm9tIGZhc3RhcGkgaW1wb3J0IEFQSVJvdXRlciwgSFRUUEV4Y2VwdGlvblxuZnJvbSBsYW5nY2hhaW5fY29yZS5kb2N1bWVudHMgaW1wb3J0IERvY3VtZW50ICMgUmVxdWlyZWQgZm9yIGZldGNoX21lbW9yaWVzIHR5cGUgaGludFxuXG5mcm9tIGN1c3RvbV9hZ2VudCBpbXBvcnQgQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudFxuZnJvbSBhZ2VudF9mYWN0b3J5IGltcG9ydCBjcmVhdGVfbmV3X2FnZW50X2luc3RhbmNlXG5mcm9tIHNjaGVtYXMgaW1wb3J0IChcbiAgICBDcmVhdGVBZ2VudFJlcSwgR2VuZXJhdGVSZXNwb25zZVJlcSwgR2VuZXJhdGVSZWFjdGlvblJlc3BvbnNlLCBBZGRNZW1vcnlSZXEsXG4gICAgRmV0Y2hNZW1vcmllc1JlcSwgVXBkYXRlU3RhdHVzUmVxLCBBZ2VudExpc3RSZXNwb25zZSwgQWdlbnREZXRhaWwsXG4gICAgQWdlbnRDcmVhdGlvblJlc3BvbnNlLCBBZGRlZE1lbW9yeVJlc3BvbnNlLCBGZXRjaGVkTWVtb3JpZXNSZXNwb25zZSxcbiAgICBGZXRjaGVkTWVtb3JpZXNEb2N1bWVudCwgQWdlbnRTdW1tYXJ5UmVzcG9uc2UsIERlbGV0ZWRBZ2VudFJlc3BvbnNlXG4pXG4uLi5cblxuXG5kZWYgZ2V0X2FnZW50X21vZGVsX2RldGFpbHMoYWdlbnQ6IEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnQpIC0+IFR1cGxlW3N0ciwgc3RyXTpcbiAgICBsbG1fbW9kZWxfdXNlZCA9IFwidW5rbm93blwiXG4gICAgZW1iZWRkaW5nX21vZGVsX3VzZWQgPSBcInVua25vd25cIlxuICAgIGlmIGFnZW50OlxuICAgICAgICBpZiBoYXNhdHRyKGFnZW50LCAnbGxtJykgYW5kIGFnZW50LmxsbSBhbmQgaGFzYXR0cihhZ2VudC5sbG0sICdtb2RlbF9uYW1lJyk6XG4gICAgICAgICAgICBsbG1fbW9kZWxfdXNlZCA9IGFnZW50LmxsbS5tb2RlbF9uYW1lXG4gICAgICAgIGlmIChoYXNhdHRyKGFnZW50LCAnbWVtb3J5JykgYW5kIGFnZW50Lm1lbW9yeSBhbmRcbiAgICAgICAgICAgIGhhc2F0dHIoYWdlbnQubWVtb3J5LCAnbWVtb3J5X3JldHJpZXZlcicpIGFuZCBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlciBhbmRcbiAgICAgICAgICAgIGhhc2F0dHIoYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXIsICd2ZWN0b3JzdG9yZScpIGFuZCBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlci52ZWN0b3JzdG9yZSBhbmRcbiAgICAgICAgICAgIGhhc2F0dHIoYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXIudmVjdG9yc3RvcmUsICdlbWJlZGRpbmdfZnVuY3Rpb24nKSBhbmRcbiAgICAgICAgICAgIGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyLnZlY3RvcnN0b3JlLmVtYmVkZGluZ19mdW5jdGlvbiBhbmRcbiAgICAgICAgICAgIGhhc2F0dHIoYWdlbnQubWVtb3J5Lm1lbW9yeV9yZXRyaWV2ZXIudmVjdG9yc3RvcmUuZW1iZWRkaW5nX2Z1bmN0aW9uLCAnbW9kZWwnKSk6XG4gICAgICAgICAgICBlbWJlZGRpbmdfbW9kZWxfdXNlZCA9IGFnZW50Lm1lbW9yeS5tZW1vcnlfcmV0cmlldmVyLnZlY3RvcnN0b3JlLmVtYmVkZGluZ19mdW5jdGlvbi5tb2RlbFxuICAgIHJldHVybiBsbG1fbW9kZWxfdXNlZCwgZW1iZWRkaW5nX21vZGVsX3VzZWRcblxuXG5Acm91dGVyLnBvc3QoXCJcIiwgc3RhdHVzX2NvZGU9MjAxLCByZXNwb25zZV9tb2RlbD1BZ2VudENyZWF0aW9uUmVzcG9uc2UpXG5kZWYgY3JlYXRlX2FnZW50X2VuZHBvaW50KHJlcTogQ3JlYXRlQWdlbnRSZXEpOlxuICAgIHByaW50KGZcIntCQ29sb3JzLkhFQURFUn1ERUJVRzogL2FnZW50cyBQT1NUIHJlcXVlc3QgcmVjZWl2ZWQ6IHtyZXEubW9kZWxfZHVtcF9qc29uKGV4Y2x1ZGVfbm9uZT1UcnVlKX17QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgIGFpZCA9IHJlcS5hZ2VudF9pZCBvciBzdHIodXVpZDQoKSlcbiAgICBpZiBhaWQgaW4gYWdlbnRzX2RiOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwMCwgZGV0YWlsPWZcIkFnZW50IHdpdGggYWdlbnRfaWQgJ3thaWR9JyBhbHJlYWR5IGV4aXN0cy5cIilcbiAgICB0cnk6XG4gICAgICAgIGN1cnJlbnRfYWdlbnRfaW5zdGFuY2UgPSBjcmVhdGVfbmV3X2FnZW50X2luc3RhbmNlKFxuICAgICAgICAgICAgbmFtZT1yZXEubmFtZSwgYWdlPXJlcS5hZ2UsIHRyYWl0cz1yZXEudHJhaXRzLCBzdGF0dXM9cmVxLnN0YXR1cyxcbiAgICAgICAgICAgIHN1bW1hcnlfcmVmcmVzaF9zZWNvbmRzPXJlcS5zdW1tYXJ5X3JlZnJlc2hfc2Vjb25kcyxcbiAgICAgICAgICAgIHJlZmxlY3Rpb25fdGhyZXNob2xkPXJlcS5yZWZsZWN0aW9uX3RocmVzaG9sZCwgdmVyYm9zZT1yZXEudmVyYm9zZSxcbiAgICAgICAgICAgIGxsbV9tb2RlbF9uYW1lPXJlcS5tb2RlbF9uYW1lLCBlbWJlZGRpbmdfbW9kZWxfbmFtZT1yZXEuZW1iZWRkaW5nX21vZGVsX25hbWVcbiAgICAgICAgKVxuICAgICAgICBhZ2VudHNfZGJbYWlkXSA9IGN1cnJlbnRfYWdlbnRfaW5zdGFuY2VcbiAgICBleGNlcHQgSFRUUEV4Y2VwdGlvbiBhcyBodHRwX2V4YzpcbiAgICAgICAgcmFpc2UgaHR0cF9leGNcbiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgIGlmIGFpZCBpbiBhZ2VudHNfZGI6IGRlbCBhZ2VudHNfZGJbYWlkXVxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTUwMCwgZGV0YWlsPWZcIlVuZXhwZWN0ZWQgc2VydmVyIGVycm9yIGR1cmluZyBhZ2VudCBjcmVhdGlvbjoge2V9XCIpXG5cbiAgICBsbG1fbW9kZWxfdXNlZCwgZW1iZWRkaW5nX21vZGVsX3VzZWQgPSBnZXRfYWdlbnRfbW9kZWxfZGV0YWlscyhjdXJyZW50X2FnZW50X2luc3RhbmNlKVxuICAgIHJldHVybiBBZ2VudENyZWF0aW9uUmVzcG9uc2UoXG4gICAgICAgIGFnZW50X2lkPWFpZCwgbmFtZT1yZXEubmFtZSxcbiAgICAgICAgbGxtX21vZGVsX3VzZWQ9bGxtX21vZGVsX3VzZWQsIGVtYmVkZGluZ19tb2RlbF91c2VkPWVtYmVkZGluZ19tb2RlbF91c2VkXG4gICAgKVxuLi4uXG5cbiAgICBhZ2VudDogQXV0b25vbW91c0dlbmVyYXRpdmVBZ2VudCA9IGFnZW50c19kYlthZ2VudF9pZF1cbiAgICBvcmlnaW5hbF9rID0gLTFcbiAgICByZXRyaWV2ZXIgPSBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlclxuICAgIGlmIGhhc2F0dHIocmV0cmlldmVyLCAnaycpOlxuICAgICAgICAgb3JpZ2luYWxfayA9IHJldHJpZXZlci5rXG5cbiAgICBhcGlfcmVhY3Rpb25fdHlwZSwgYXBpX2NvbnRlbnQsIG9ic2VydmF0aW9uX3dhc19pbXBvcnRhbnRfZmxhZyA9IFwiVU5LTk9XTlwiLCBcIlwiLCBGYWxzZVxuICAgIHRyeTpcbiAgICAgICAgaWYgcmVxLmsgaXMgbm90IE5vbmUgYW5kIHJlcS5rID4gMCBhbmQgaGFzYXR0cihyZXRyaWV2ZXIsICdrJyk6XG4gICAgICAgICAgICByZXRyaWV2ZXIuayA9IHJlcS5rXG4gICAgICAgIFxuICAgICAgICBhcGlfcmVhY3Rpb25fdHlwZSwgYXBpX2NvbnRlbnQsIG9ic2VydmF0aW9uX3dhc19pbXBvcnRhbnRfZmxhZyA9IGFnZW50LmdldF9pbnRlcnByZXRlZF9yZWFjdGlvbihvYnNlcnZhdGlvbiwgZGF0ZXRpbWUubm93KCkpXG4gICAgICAgIHByaW50KGZcIntCQ29sb3JzLk9LR1JFRU59REVCVUc6IGFnZW50LmdldF9pbnRlcnByZXRlZF9yZWFjdGlvbiBjb21wbGV0ZWQuIEFQSSBUeXBlOiAne2FwaV9yZWFjdGlvbl90eXBlfScsIEltcG9ydGFudDoge29ic2VydmF0aW9uX3dhc19pbXBvcnRhbnRfZmxhZ317QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuXG4gICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICBwcmludChmXCJ7QkNvbG9ycy5GQUlMfUVSUk9SX1NUQUNLVFJBQ0U6IEVycm9yIGR1cmluZyByZWFjdGlvbiBnZW5lcmF0aW9uIGZvciBhZ2VudCB7YWdlbnRfaWR9OiB7ZX17QkNvbG9ycy5FTkRDfVwiLCBmbHVzaD1UcnVlKVxuICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKClcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJFcnJvciBkdXJpbmcgcmVhY3Rpb24gZ2VuZXJhdGlvbjoge2V9XCIpXG4gICAgZmluYWxseTpcbiAgICAgICAgaWYgb3JpZ2luYWxfayAhPSAtMSBhbmQgaGFzYXR0cihyZXRyaWV2ZXIsICdrJyk6XG4gICAgICAgICAgICAgcmV0cmlldmVyLmsgPSBvcmlnaW5hbF9rXG5cbiAgICByZXR1cm4gR2VuZXJhdGVSZWFjdGlvblJlc3BvbnNlKFxuICAgICAgICBhZ2VudF9uYW1lPWFnZW50Lm5hbWUsIHJlYWN0aW9uX3R5cGU9YXBpX3JlYWN0aW9uX3R5cGUsXG4gICAgICAgIGNvbnRlbnQ9YXBpX2NvbnRlbnQsIG9ic2VydmF0aW9uX3dhc19pbXBvcnRhbnQ9b2JzZXJ2YXRpb25fd2FzX2ltcG9ydGFudF9mbGFnXG4gICAgKVxuXG5Acm91dGVyLnBvc3QoXCIve2FnZW50X2lkfS9hZGRfbWVtb3J5XCIsIHJlc3BvbnNlX21vZGVsPUFkZGVkTWVtb3J5UmVzcG9uc2UpXG5kZWYgYWRkX21lbW9yeV9lbmRwb2ludChhZ2VudF9pZDogc3RyLCByZXE6IEFkZE1lbW9yeVJlcSk6XG4gICAgaWYgYWdlbnRfaWQgbm90IGluIGFnZW50c19kYiBvciBhZ2VudHNfZGJbYWdlbnRfaWRdIGlzIE5vbmU6XG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NDA0LCBkZXRhaWw9ZlwiQWdlbnQgJ3thZ2VudF9pZH0nIG5vdCBmb3VuZCBvciBpbnZhbGlkLlwiKVxuICAgIHRleHRfdG9fYWRkID0gcmVxLnRleHRfdG9fbWVtb3JpemUuc3RyaXAoKVxuICAgIGlmIG5vdCB0ZXh0X3RvX2FkZDpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDAsIGRldGFpbD1cIk1lbW9yeSB0ZXh0IG1heSBub3QgYmUgZW1wdHkuXCIpXG4gICAgYWdlbnQgPSBhZ2VudHNfZGJbYWdlbnRfaWRdXG4gICAgdHJ5OlxuICAgICAgICBpZiBub3QgYWdlbnQubWVtb3J5OlxuICAgICAgICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZlwiQWdlbnQge2FnZW50X2lkfSBtZW1vcnkgbm90IGluaXRpYWxpemVkLlwiKVxuICAgICAgICBhZ2VudC5tZW1vcnkuYWRkX21lbW9yeSh0ZXh0X3RvX2FkZCwgbm93PWRhdGV0aW1lLm5vdygpKVxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJFcnJvciBhZGRpbmcgbWVtb3J5OiB7ZX1cIilcbiAgICByZXR1cm4gQWRkZWRNZW1vcnlSZXNwb25zZShzdGF0dXM9XCJzdWNjZXNzXCIsIGFkZGVkX21lbW9yeT10ZXh0X3RvX2FkZClcblxuQHJvdXRlci5wb3N0KFwiL3thZ2VudF9pZH0vZmV0Y2hfbWVtb3JpZXNcIiwgcmVzcG9uc2VfbW9kZWw9RmV0Y2hlZE1lbW9yaWVzUmVzcG9uc2UpXG5kZWYgZmV0Y2hfbWVtb3JpZXNfZW5kcG9pbnQoYWdlbnRfaWQ6IHN0ciwgcmVxOiBGZXRjaE1lbW9yaWVzUmVxKTpcbiAgICBpZiBhZ2VudF9pZCBub3QgaW4gYWdlbnRzX2RiIG9yIGFnZW50c19kYlthZ2VudF9pZF0gaXMgTm9uZTpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDQsIGRldGFpbD1mXCJBZ2VudCAne2FnZW50X2lkfScgbm90IGZvdW5kIG9yIGludmFsaWQuXCIpXG4gICAgb2JzZXJ2YXRpb24gPSByZXEub2JzZXJ2YXRpb24uc3RyaXAoKVxuICAgIGlmIG5vdCBvYnNlcnZhdGlvbjpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDAsIGRldGFpbD1cIk9ic2VydmF0aW9uIHRleHQgbWF5IG5vdCBiZSBlbXB0eSBmb3IgZmV0Y2hpbmcgbWVtb3JpZXMuXCIpXG5cbiAgICBhZ2VudCA9IGFnZW50c19kYlthZ2VudF9pZF1cbiAgICBpZiBub3QgYWdlbnQubWVtb3J5IG9yIG5vdCBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlcjpcbiAgICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZlwiQWdlbnQge2FnZW50X2lkfSBtZW1vcnkvcmV0cmlldmVyIG5vdCBpbml0aWFsaXplZC5cIilcblxuICAgIG9yaWdpbmFsX2ssIHJldHJpZXZlciA9IC0xLCBhZ2VudC5tZW1vcnkubWVtb3J5X3JldHJpZXZlclxuICAgIGlmIGhhc2F0dHIocmV0cmlldmVyLCAnaycpOiBvcmlnaW5hbF9rID0gcmV0cmlldmVyLmtcbiAgICBcbiAgICByZXNwb25zZV9wYXlsb2FkX2RvY3M6IExpc3RbRmV0Y2hlZE1lbW9yaWVzRG9jdW1lbnRdID0gW11cbiAgICB0cnk6XG4gICAgICAgIHJlcXVlc3RlZF9rID0gcmV0cmlldmVyLmsgIyBEZWZhdWx0IHRvIHJldHJpZXZlcidzIGtcbiAgICAgICAgaWYgcmVxLmsgaXMgbm90IE5vbmUgYW5kIHJlcS5rID4gMCBhbmQgaGFzYXR0cihyZXRyaWV2ZXIsICdrJyk6XG4gICAgICAgICAgICByZXF1ZXN0ZWRfayA9IHJlcS5rXG4gICAgICAgICAgICByZXRyaWV2ZXIuayA9IHJlcXVlc3RlZF9rXG5cbiAgICAgICAgZG9jc19hbmRfc2NvcmVzOiBMaXN0W1R1cGxlW0RvY3VtZW50LCBmbG9hdF1dID0gW11cbiAgICAgICAgaWYgKGhhc2F0dHIocmV0cmlldmVyLCBcInZlY3RvcnN0b3JlXCIpIGFuZCByZXRyaWV2ZXIudmVjdG9yc3RvcmUgYW5kXG4gICAgICAgICAgICBoYXNhdHRyKHJldHJpZXZlci52ZWN0b3JzdG9yZSwgXCJzaW1pbGFyaXR5X3NlYXJjaF93aXRoX3JlbGV2YW5jZV9zY29yZXNcIikpOlxuICAgICAgICAgICAgZG9jc19hbmRfc2NvcmVzID0gcmV0cmlldmVyLnZlY3RvcnN0b3JlLnNpbWlsYXJpdHlfc2VhcmNoX3dpdGhfcmVsZXZhbmNlX3Njb3JlcyhvYnNlcnZhdGlvbiwgaz1yZXF1ZXN0ZWRfaylcbiAgICAgICAgZWxzZTpcbiAgICAgICAgICAgIGZldGNoZWRfZG9jc19vbmx5OiBMaXN0W0RvY3VtZW50XSA9IGFnZW50Lm1lbW9yeS5mZXRjaF9tZW1vcmllcyhvYnNlcnZhdGlvbiwgbm93PWRhdGV0aW1lLm5vdygpKVxuICAgICAgICAgICAgZG9jc19hbmRfc2NvcmVzID0gWyhkb2MsIDAuMCkgZm9yIGRvYyBpbiBmZXRjaGVkX2RvY3Nfb25seV1cblxuICAgICAgICBmb3IgZG9jLCBzY29yZSBpbiBkb2NzX2FuZF9zY29yZXM6XG4gICAgICAgICAgICBzZXJpYWxpemFibGVfbWV0YWRhdGEgPSB7XG4gICAgICAgICAgICAgICAgazogdi5pc29mb3JtYXQoKSBpZiBpc2luc3RhbmNlKHYsIGRhdGV0aW1lKSBlbHNlXG4gICAgICAgICAgICAgICAgICAgdi50b2xpc3QoKSBpZiBpc2luc3RhbmNlKHYsIG5wLm5kYXJyYXkpIGVsc2VcbiAgICAgICAgICAgICAgICAgICBmbG9hdCh2KSBpZiBpc2luc3RhbmNlKHYsIChucC5mbG9hdDMyLCBucC5mbG9hdDY0KSkgZWxzZVxuICAgICAgICAgICAgICAgICAgIGludCh2KSBpZiBpc2luc3RhbmNlKHYsIChucC5pbnQzMiwgbnAuaW50NjQpKSBlbHNlIHZcbiAgICAgICAgICAgICAgICBmb3IgaywgdiBpbiBkb2MubWV0YWRhdGEuaXRlbXMoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzcG9uc2VfcGF5bG9hZF9kb2NzLmFwcGVuZChGZXRjaGVkTWVtb3JpZXNEb2N1bWVudChcbiAgICAgICAgICAgICAgICBjb250ZW50PWRvYy5wYWdlX2NvbnRlbnQsIG1ldGFkYXRhPXNlcmlhbGl6YWJsZV9tZXRhZGF0YSwgcmVsZXZhbmNlX3Njb3JlPXNjb3JlXG4gICAgICAgICAgICApKVxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1mXCJFcnJvciBmZXRjaGluZyBtZW1vcmllczoge2V9XCIpXG4gICAgZmluYWxseTpcbiAgICAgICAgaWYgb3JpZ2luYWxfayAhPSAtMSBhbmQgaGFzYXR0cihyZXRyaWV2ZXIsICdrJyk6XG4gICAgICAgICAgICAgcmV0cmlldmVyLmsgPSBvcmlnaW5hbF9rXG4gICAgcmV0dXJuIEZldGNoZWRNZW1vcmllc1Jlc3BvbnNlKG1lbW9yaWVzPXJlc3BvbnNlX3BheWxvYWRfZG9jcylcbi4uLlxuUGF0aDogc2NoZW1hcy5weVxuIyBGaWxlOiBzY2hlbWFzLnB5XG5mcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwsIExpc3QsIERpY3QsIEFueVxuZnJvbSBweWRhbnRpYyBpbXBvcnQgQmFzZU1vZGVsLCBGaWVsZFxuXG5jbGFzcyBDcmVhdGVBZ2VudFJlcShCYXNlTW9kZWwpOlxuICAgIG5hbWU6IHN0clxuICAgIGFnZTogaW50XG4gICAgdHJhaXRzOiBzdHJcbiAgICBzdGF0dXM6IHN0clxuICAgIGFnZW50X2lkOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuICAgIHN1bW1hcnlfcmVmcmVzaF9zZWNvbmRzOiBpbnQgPSBGaWVsZChkZWZhdWx0PTM2MDAsIGdlPTApXG4gICAgcmVmbGVjdGlvbl90aHJlc2hvbGQ6IGludCA9IEZpZWxkKGRlZmF1bHQ9MCwgZ2U9MClcbiAgICB2ZXJib3NlOiBib29sID0gRmFsc2VcbiAgICBtb2RlbF9uYW1lOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuICAgIGVtYmVkZGluZ19tb2RlbF9uYW1lOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuXG5jbGFzcyBHZW5lcmF0ZVJlc3BvbnNlUmVxKEJhc2VNb2RlbCk6XG4gICAgcHJvbXB0OiBzdHJcbiAgICBrOiBPcHRpb25hbFtpbnRdID0gRmllbGQoZGVmYXVsdD1Ob25lLCBndD0wKVxuXG5jbGFzcyBHZW5lcmF0ZVJlYWN0aW9uUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBhZ2VudF9uYW1lOiBzdHJcbiAgICByZWFjdGlvbl90eXBlOiBzdHIgIyBTQVksIFRISU5LLCBETywgSUdOT1JFLCBVTktOT1dOXG4gICAgY29udGVudDogc3RyXG4gICAgb2JzZXJ2YXRpb25fd2FzX2ltcG9ydGFudDogYm9vbFxuXG5jbGFzcyBBZGRNZW1vcnlSZXEoQmFzZU1vZGVsKTpcbiAgICB0ZXh0X3RvX21lbW9yaXplOiBzdHJcblxuY2xhc3MgRmV0Y2hNZW1vcmllc1JlcShCYXNlTW9kZWwpOlxuICAgIG9ic2VydmF0aW9uOiBzdHJcbiAgICBrOiBPcHRpb25hbFtpbnRdID0gRmllbGQoZGVmYXVsdD1Ob25lLCBndD0wKVxuXG5jbGFzcyBVcGRhdGVTdGF0dXNSZXEoQmFzZU1vZGVsKTpcbiAgICBuZXdfc3RhdHVzOiBzdHJcblxuY2xhc3MgQWdlbnREZXRhaWwoQmFzZU1vZGVsKTpcbiAgICBhZ2VudF9pZDogc3RyXG4gICAgbmFtZTogc3RyXG4gICAgc3RhdHVzOiBzdHJcbiAgICBsbG1fbW9kZWw6IHN0clxuICAgIGVtYmVkZGluZ19tb2RlbDogc3RyXG5cbmNsYXNzIEFnZW50TGlzdFJlc3BvbnNlKEJhc2VNb2RlbCk6XG4gICAgYWdlbnRzOiBMaXN0W0FnZW50RGV0YWlsXVxuXG5jbGFzcyBBZ2VudENyZWF0aW9uUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBhZ2VudF9pZDogc3RyXG4gICAgbmFtZTogc3RyXG4gICAgbGxtX21vZGVsX3VzZWQ6IHN0clxuICAgIGVtYmVkZGluZ19tb2RlbF91c2VkOiBzdHJcblxuY2xhc3MgU2ltcGxlU3RhdHVzUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBzdGF0dXM6IHN0clxuICAgIG1lc3NhZ2U6IE9wdGlvbmFsW3N0cl0gPSBOb25lXG5cbmNsYXNzIEFkZGVkTWVtb3J5UmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBzdGF0dXM6IHN0clxuICAgIGFkZGVkX21lbW9yeTogc3RyXG5cbmNsYXNzIEZldGNoZWRNZW1vcmllc0RvY3VtZW50KEJhc2VNb2RlbCk6XG4gICAgY29udGVudDogc3RyXG4gICAgbWV0YWRhdGE6IERpY3Rbc3RyLCBBbnldXG4gICAgcmVsZXZhbmNlX3Njb3JlOiBmbG9hdFxuXG5jbGFzcyBGZXRjaGVkTWVtb3JpZXNSZXNwb25zZShCYXNlTW9kZWwpOlxuICAgIG1lbW9yaWVzOiBMaXN0W0ZldGNoZWRNZW1vcmllc0RvY3VtZW50XVxuLi4uXG5QYXRoOiByZXF1aXJlbWVudHMudHh0XG4jIGNvcmUgd2ViIGZyYW1ld29ya1xuZmFzdGFwaVthbGxdXG5cbiMgTGFuZ0NoYWluIHByaW1pdGl2ZXNcbmxhbmdjaGFpbn49MC4yICAgICAgICAgICMgY29yZVxubGFuZ2NoYWluLWV4cGVyaW1lbnRhbH49MC4yICAjIGNvbnRhaW5zIGdlbmVyYXRpdmVfYWdlbnRzXG5sYW5nY2hhaW4tY29tbXVuaXR5fj0wLjJcbmxhbmdjaGFpbi1vcGVuYWl+PTAuMSAgIyBob3VzZXMgQ2hhdE9wZW5BSSAmIE9wZW5BSUVtYmVkZGluZ3NcblxuIyBMTE0gKyBlbWJlZGRpbmdzIChwaWNrIHRoZSBwcm92aWRlciB5b3XigJlsbCByZWFsbHkgdXNlKVxub3BlbmFpPj0xLjI1LjBcbnRpa3Rva2VuPj0wLjYuMFxuXG4jIHNpbXBsZSBpbuKAkXByb2Nlc3MgdmVjdG9yIHN0b3JlIGZvciBhZ2VudCBtZW1vcnlcbmZhaXNzLWNwdT49MS44LjBcbi4uLlxuUGF0aDogcHJvbXB0cy5weVxuIyBGaWxlOiBwcm9tcHRzLnB5XG5cbiMgLS0tIEF1dG9ub21vdXNHZW5lcmF0aXZlQWdlbnQgUHJvbXB0cyAtLS1cblxuREVDSVNJT05fVEVNUExBVEUgPSAoXG4gICAgXCJZb3UgYXJlIHthZ2VudF9uYW1lfS5cXG5cIlxuICAgIFwiWW91ciBjb3JlIGNoYXJhY3RlcmlzdGljcyBhcmU6IHthZ2VudF90cmFpdHN9XFxuXCJcbiAgICBcIkl0IGlzIHtjdXJyZW50X3RpbWV9LlxcblwiXG4gICAgXCJZb3VyIHN0YXR1cyBpczoge2FnZW50X3N0YXR1c31cXG5cIlxuICAgIFwiWW91IG9ic2VydmU6IHtvYnNlcnZhdGlvbn1cXG5cIlxuICAgIFwiUmVsZXZhbnQgcmVjZW50IG1lbW9yaWVzOlxcbnttZW1vcnlfY29udGV4dH1cXG5cXG5cIlxuICAgIFwiQ29uc2lkZXJpbmcgeW91ciBwZXJzb25hbGl0eSAoZXNwZWNpYWxseSB0cmFpdHMgbGlrZSB7YWdlbnRfdHJhaXRzfSksIHRoZSBvYnNlcnZhdGlvbiwgYW5kIHJlY2VudCBtZW1vcmllcywgXCJcbiAgICBcIndoYXQgaXMgdGhlICptb3N0IGxpa2VseSB0eXBlKiBvZiBpbW1lZGlhdGUgcmVhY3Rpb24geW91IHdvdWxkIGhhdmU/IENob29zZSAqb25lKiBmcm9tOiBcIlxuICAgIFwiJ1NBWScgKHNwZWFrIGFsb3VkKSwgJ1RISU5LJyAoaW50ZXJuYWwgdGhvdWdodCBvbmx5KSwgJ0RPJyAocGVyZm9ybSBhIHBoeXNpY2FsIGFjdGlvbiksICdJR05PUkUnIChubyBzaWduaWZpY2FudCByZWFjdGlvbiwgcmVtYWluIGluIGN1cnJlbnQgc3RhdHVzKS5cIlxuICAgIFwiXFxuUmVhY3Rpb24gVHlwZSBDaG9pY2U6XCJcbilcblxuVEhPVUdIVF9URU1QTEFURSA9IChcbiAgICBcIllvdSBhcmUge2FnZW50X25hbWV9LlxcblwiXG4gICAgXCJZb3VyIGNvcmUgY2hhcmFjdGVyaXN0aWNzIGFyZToge2FnZW50X3RyYWl0c31cXG5cIlxuICAgIFwiSXQgaXMge2N1cnJlbnRfdGltZX0uXFxuXCJcbiAgICBcIllvdXIgc3RhdHVzIGlzOiB7YWdlbnRfc3RhdHVzfVxcblwiXG4gICAgXCJZb3Ugb2JzZXJ2ZToge29ic2VydmF0aW9ufVxcblwiXG4gICAgXCJSZWxldmFudCByZWNlbnQgbWVtb3JpZXM6XFxue21lbW9yeV9jb250ZXh0fVxcblwiXG4gICAgXCJSZWxhdGlvbnNoaXAgY29udGV4dDoge3JlbGF0aW9uc2hpcF9jb250ZXh0fVxcblxcblwiXG4gICAgXCJDb25zaWRlcmluZyB5b3VyIHBlcnNvbmFsaXR5IGFuZCB0aGUgc2l0dWF0aW9uLCB3aGF0IGlzIHlvdXIgKmludGVybmFsIHRob3VnaHQqIG9yICphc3Nlc3NtZW50KiByaWdodCBub3cgaW4gcmVzcG9uc2UgdG8gdGhlIG9ic2VydmF0aW9uPyBcIlxuICAgIFwiRGVzY3JpYmUgdGhlIHRob3VnaHQgY29uY2lzZWx5LiBEbyAqbm90KiBkZXNjcmliZSBhY3Rpb25zIG9yIHNwZWVjaC4gRXhhbXBsZTogKEludGVybmFsIHRob3VnaHQpIFRoYXQgc2VlbXMgc3VzcGljaW91cy5cIlxuICAgIFwiXFxuSW50ZXJuYWwgVGhvdWdodDpcIlxuKVxuXG5BQ1RJT05fVEVNUExBVEUgPSAoXG4gICAgXCJZb3UgYXJlIHthZ2VudF9uYW1lfS5cXG5cIlxuICAgIFwiWW91ciBjb3JlIGNoYXJhY3RlcmlzdGljcyBhcmU6IHthZ2VudF90cmFpdHN9XFxuXCJcbiAgICBcIkl0IGlzIHtjdXJyZW50X3RpbWV9LlxcblwiXG4gICAgXCJZb3VyIHN0YXR1cyBpczoge2FnZW50X3N0YXR1c31cXG5cIlxuICAgIFwiWW91IG9ic2VydmU6IHtvYnNlcnZhdGlvbn1cXG5cIlxuICAgIFwiUmVsZXZhbnQgcmVjZW50IG1lbW9yaWVzOlxcbnttZW1vcnlfY29udGV4dH1cXG5cIlxuICAgIFwiUmVsYXRpb25zaGlwIGNvbnRleHQ6IHtyZWxhdGlvbnNoaXBfY29udGV4dH1cXG5cXG5cIlxuICAgIFwiQ29uc2lkZXJpbmcgeW91ciBwZXJzb25hbGl0eSBhbmQgdGhlIHNpdHVhdGlvbiwgd2hhdCAqcGh5c2ljYWwgYWN0aW9uKiBkbyB5b3UgdGFrZSBpbiBpbW1lZGlhdGUgcmVzcG9uc2UgdG8gdGhlIG9ic2VydmF0aW9uPyBcIlxuICAgIFwiRGVzY3JpYmUgdGhlIGFjdGlvbiBjb25jaXNlbHkgYXMgaWYgbmFycmF0aW5nIGl0LiBFeGFtcGxlOiBJIHNoaWZ0IG15IHdlaWdodCB1bmVhc2lseS4gLyBJIGRyYXcgbXkgc3dvcmQuXCJcbiAgICBcIlxcbkFjdGlvbiBUYWtlbjpcIlxuKVxuXG5TVEFUVVNfVVBEQVRFX1RFTVBMQVRFID0gKFxuICAgIFwiWW91IGFyZSB7YWdlbnRfbmFtZX0uXFxuXCJcbiAgICBcIllvdXIgY29yZSBjaGFyYWN0ZXJpc3RpY3MgYXJlOiB7YWdlbnRfdHJhaXRzfVxcblwiXG4gICAgXCJZb3VyIHByZXZpb3VzIHN0YXR1cyB3YXM6IHtwcmV2aW91c19zdGF0dXN9XFxuXCJcbiAgICBcIllvdSBqdXN0IHBlcmZvcm1lZCB0aGUgYWN0aW9uOiB7YWN0aW9uX3Rha2VufVxcblwiXG4gICAgXCJCYXNlZCBvbiB0aGlzIGFjdGlvbiwgd2hhdCBpcyB5b3VyIGNvbmNpc2UsIHVwZGF0ZWQgc3RhdHVzPyBEZXNjcmliZSBpdCBpbiB0aGUgZmlyc3QgcGVyc29uIChlLmcuLCAnU3RhbmRpbmcgYWxlcnQuJywgJ1NpdHRpbmcgYW5kIG9ic2VydmluZy4nKS5cIlxuICAgIFwiXFxuVXBkYXRlZCBTdGF0dXM6XCJcbilcblxuRU5USVRZX0VYVFJBQ1RJT05fVEVNUExBVEUgPSAoXG4gICAgXCJJbiB0aGUgZm9sbG93aW5nIG9ic2VydmF0aW9uLCBpZGVudGlmeSB0aGUgbWFpbiBlbnRpdHkgb3IgcGVyc29uIE9USEVSIFRIQU4ge2FnZW50X25hbWV9IHdobyBpcyBiZWluZyBvYnNlcnZlZC4gXCJcbiAgICBcIklmIHRoZXJlIGFyZSBtdWx0aXBsZSBlbnRpdGllcywgaWRlbnRpZnkgdGhlIG1vc3QgcHJvbWluZW50IG9uZS4gXCJcbiAgICBcIklmIHRoZXJlIGlzIG5vIGVudGl0eSBvdGhlciB0aGFuIHthZ2VudF9uYW1lfSwgcmVzcG9uZCB3aXRoICdubyBvdGhlciBlbnRpdHknLlxcblxcblwiXG4gICAgXCJPYnNlcnZhdGlvbjoge29ic2VydmF0aW9ufVxcblxcblwiXG4gICAgXCJNYWluIGVudGl0eSAobm90IHthZ2VudF9uYW1lfSk6XCJcbilcblxuRU5USVRZX0FDVElPTl9URU1QTEFURSA9IChcbiAgICBcIkJhc2VkIG9uIHRoZSBmb2xsb3dpbmcgb2JzZXJ2YXRpb24sIHdoYXQgaXMge2VudGl0eX0gZG9pbmc/IERlc2NyaWJlIHRoZWlyIGFjdGlvbnMgY29uY2lzZWx5LlxcblxcblwiXG4gICAgXCJPYnNlcnZhdGlvbjoge29ic2VydmF0aW9ufVxcblxcblwiXG4gICAgXCJXaGF0IHtlbnRpdHl9IGlzIGRvaW5nOlwiXG4pXG5cblJFTEFUSU9OU0hJUF9TVU1NQVJZX1RFTVBMQVRFID0gKFxuICAgIFwiQmFzZWQgb24geW91ciBtZW1vcmllcywgd2hhdCBpcyB5b3VyIHJlbGF0aW9uc2hpcCBvciBrbm93bGVkZ2UgYWJvdXQge2VudGl0eV9uYW1lfT9cXG5cIlxuICAgIFwiQ29uc2lkZXI6XFxuXCJcbiAgICBcIjEuIEhhdmUgeW91IG1ldCB7ZW50aXR5X25hbWV9IGJlZm9yZT9cXG5cIlxuICAgIFwiMi4gRG8geW91IGhhdmUgYW55IGhpc3Rvcnkgd2l0aCB7ZW50aXR5X25hbWV9P1xcblwiXG4gICAgXCIzLiBEbyB5b3UgaGF2ZSBhbnkgZmVlbGluZ3Mgb3Igb3BpbmlvbnMgYWJvdXQge2VudGl0eV9uYW1lfT9cXG5cIlxuICAgIFwiNC4gSXMgdGhlcmUgYW55dGhpbmcgbm90YWJsZSBhYm91dCB7ZW50aXR5X25hbWV9P1xcblxcblwiXG4gICAgXCJDb250ZXh0IGZyb20geW91ciBtZW1vcmllczpcXG57cmVsZXZhbnRfbWVtb3JpZXN9XFxuXFxuXCJcbiAgICBcIkN1cnJlbnQgb2JzZXJ2YXRpb246IHtlbnRpdHlfbmFtZX0gaXMge2VudGl0eV9hY3Rpb259XFxuXFxuXCJcbiAgICBcIlJlbGF0aW9uc2hpcCB3aXRoIHtlbnRpdHlfbmFtZX0gKGJlIGNvbmNpc2UsIGlmIG5vIHJlbGF0aW9uc2hpcCBleGlzdHMsIHN0YXRlIHRoYXQgY2xlYXJseSk6XCJcbilcblxuUE9JR05BLi4uIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiMTQ1MjFhNjMtZmI0NS00YTQyLWI4NjMtMWJlYWQwMTU5MzVjO3Rvb2x1X3ZydHhfMDFURWtkamppTldUQ3hOTXhLSndWOHpuIjp7InJlcXVlc3RJZCI6IjE0NTIxYTYzLWZiNDUtNGE0Mi1iODYzLTFiZWFkMDE1OTM1YyIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDFURWtkamppTldUQ3hOTXhLSndWOHpuIiwicGhhc2UiOjYsInJlc3VsdCI6eyJ0ZXh0IjoiUmFuIGludG8gVW5rbm93biBlcnJvciB3aGlsZSB0cnlpbmcgdG8gcmVhZCBtZW1vcnkucHkiLCJpc0Vycm9yIjp0cnVlLCJyZXF1ZXN0SWQiOiIifX0sIjBkNGJkMTA5LWUzYTItNDRkZC05ODg0LWFlNzhiYjg0Yjk2Mzt0b29sdV92cnR4XzAxNUhmclNQZGRNNHp0Mm9kMzFHdHBIOCI6eyJyZXF1ZXN0SWQiOiIwZDRiZDEwOS1lM2EyLTQ0ZGQtOTg4NC1hZTc4YmI4NGI5NjMiLCJ0b29sVXNlSWQiOiJ0b29sdV92cnR4XzAxNUhmclNQZGRNNHp0Mm9kMzFHdHBIOCIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUgYXJlIHRoZSByZXN1bHRzIGZyb20gZXhlY3V0aW5nIHRoZSBjb21tYW5kLlxuICAgICAgICA8cmV0dXJuLWNvZGU+XG4gICAgICAgIDFcbiAgICAgICAgPC9yZXR1cm4tY29kZT5cbiAgICAgICAgPHN0ZG91dD5cbiAgICAgICAgXHUwMDFiWz85MDAxaFx1MDAxYls/MTAwNGhcdTAwMWJbPzI1bFx1MDAxYlsySlx1MDAxYlttXHUwMDFiW0hcblxuXG5cblx1MDAxYltIXHUwMDFiXTA7QzpcXFdJTkRPV1NcXFN5c3RlbTMyXFxXaW5kb3dzUG93ZXJTaGVsbFxcdjEuMFxccG93ZXJzaGVsbC5leGVcdTAwMDdcdTAwMWJbPzI1aEZJTkQ6IFBhcmFtZXRlcmZvcm1hdCBmYWxzY2hcblxuICAgICAgICA8L3N0ZG91dD5cbiAgICAgICAgPHN0ZGVycj5cbiAgICAgICAgXG4gICAgICAgIDwvc3RkZXJyPiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjhjZWRjZTgzLTAzNzktNDkyNS04YjljLTZjYjE3YTE0ZWE2NDt0b29sdV92cnR4XzAxSkFqaHJONmVEdExtNVFjWEV5MkdSYyI6eyJyZXF1ZXN0SWQiOiI4Y2VkY2U4My0wMzc5LTQ5MjUtOGI5Yy02Y2IxN2ExNGVhNjQiLCJ0b29sVXNlSWQiOiJ0b29sdV92cnR4XzAxSkFqaHJONmVEdExtNVFjWEV5MkdSYyIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUgYXJlIHRoZSByZXN1bHRzIGZyb20gZXhlY3V0aW5nIHRoZSBjb21tYW5kLlxuICAgICAgICA8cmV0dXJuLWNvZGU+XG4gICAgICAgIDFcbiAgICAgICAgPC9yZXR1cm4tY29kZT5cbiAgICAgICAgPHN0ZG91dD5cbiAgICAgICAgXHUwMDFiWz85MDAxaFx1MDAxYls/MTAwNGhcdTAwMWJbPzI1bFx1MDAxYlsySlx1MDAxYlttXHUwMDFiW0hcblxuXG5cblx1MDAxYltIXHUwMDFiXTA7QzpcXFdJTkRPV1NcXFN5c3RlbTMyXFxXaW5kb3dzUG93ZXJTaGVsbFxcdjEuMFxccG93ZXJzaGVsbC5leGVcdTAwMDdcdTAwMWJbPzI1aFx1MDAxYlszODs1OzltR2V0LUNoaWxkSXRlbSA6IEVzIHd1cmRlIGtlaW4gUG9zaXRpb25zcGFyYW1ldGVyIGdlZnVuZGVuLCBkZXIgZGFzIEFyZ3VtZW50IFwibWVtb3J5LnB5XCIgYWt6ZXB0aWVydC5cbkluIFplaWxlOjEgWmVpY2hlbjoxXG4rIGRpciAvcyAvYiBtZW1vcnkucHlcbisgfn5+fn5+fn5+fn5+fn5+fn5+flxuICAgICsgQ2F0ZWdvcnlJbmZvICAgICAgICAgIDogSW52YWxpZEFyZ3VtZW50OiAoOikgW0dldC1DaGlsZEl0ZW1dLCBQYXJhbWV0ZXJCaW5kaW5nRXhjZXB0aW9uXHUwMDFiW21cblx1MDAxYlszODs1OzltICAgICsgRnVsbHlRdWFsaWZpZWRFcnJvcklkIDogUG9zaXRpb25hbFBhcmFtZXRlck5vdEZvdW5kLE1pY3Jvc29mdC5Qb3dlclNoZWxsLkNvbW1hbmRzLkdldENoaWxkSXRlbUNvbW1hbmRcdTAwMWJbbVxuXHUwMDFiWzM4OzU7OW1cdTAwMWJbMUNcdTAwMWJbbVxuXG4gICAgICAgIDwvc3Rkb3V0PlxuICAgICAgICA8c3RkZXJyPlxuICAgICAgICBcbiAgICAgICAgPC9zdGRlcnI+IiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiZjJmZTNiZWYtNTk2Zi00ODNlLWEwMmYtZTAzZTNmYWIxOTYwO3Rvb2x1X3ZydHhfMDFLNGN0ZkVEWEo5TGFuRmVrUUVSZUM0Ijp7InJlcXVlc3RJZCI6ImYyZmUzYmVmLTU5NmYtNDgzZS1hMDJmLWUwM2UzZmFiMTk2MCIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDFLNGN0ZkVEWEo5TGFuRmVrUUVSZUM0IiwicGhhc2UiOjgsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSBhcmUgdGhlIHJlc3VsdHMgZnJvbSBleGVjdXRpbmcgdGhlIGNvbW1hbmQuXG4gICAgICAgIDxyZXR1cm4tY29kZT5cbiAgICAgICAgLTEwNzM3NDE1MTBcbiAgICAgICAgPC9yZXR1cm4tY29kZT5cbiAgICAgICAgPHN0ZG91dD5cbiAgICAgICAgXHUwMDFiWz85MDAxaFx1MDAxYls/MTAwNGhcdTAwMWJbPzI1bFx1MDAxYlsySlx1MDAxYlttXHUwMDFiW0hcblxuXG5cblx1MDAxYltIXHUwMDFiXTA7QzpcXFdJTkRPV1NcXFN5c3RlbTMyXFxXaW5kb3dzUG93ZXJTaGVsbFxcdjEuMFxccG93ZXJzaGVsbC5leGVcdTAwMDdcdTAwMWJbPzI1aFxuICAgICAgICA8L3N0ZG91dD5cbiAgICAgICAgPHN0ZGVycj5cbiAgICAgICAgXG4gICAgICAgIDwvc3RkZXJyPiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX19LCJkcmFmdEV4Y2hhbmdlIjp7InJlcXVlc3RfbWVzc2FnZSI6IiIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgifV19LCJzdGF0dXMiOiJkcmFmdCJ9LCJyZXF1ZXN0SWRzIjpbXSwiaXNQaW5uZWQiOmZhbHNlLCJpc1NoYXJlYWJsZSI6dHJ1ZSwiZXh0cmFEYXRhIjp7ImlzQWdlbnRDb252ZXJzYXRpb24iOnRydWUsImhhc0RpcnR5RWRpdHMiOmZhbHNlfSwicGVyc29uYVR5cGUiOjB9fSwiYWdlbnRFeGVjdXRpb25Nb2RlIjoibWFudWFsIiwiaXNBZ2VudEVkaXRzQ29sbGFwc2VkIjp0cnVlfQ==" />
      </map>
    </option>
  </component>
</project>